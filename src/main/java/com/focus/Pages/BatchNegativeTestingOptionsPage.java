package com.focus.Pages;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashSet;
import java.util.List;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;

import com.focus.base.BaseEngine;
import com.focus.supporters.ExcelReader;
import com.focus.utilities.POJOUtility;

public class BatchNegativeTestingOptionsPage extends BaseEngine
{

	private static String resPass="Pass";
    private static String resFail="Fail";
    private static ExcelReader excelReader;
    private static String xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
    private static String xlSheetName = "BatchNegativeTestingOptionsPage";
    
    

	public static String checkValidationMessage(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		Thread.sleep(2000);
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
			String actErrorMessage=errorMessage.getText();
			String expErrorMessage=ExpMessage;

			try
			{

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				errorMessageCloseBtn.click();

				System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);

				return actErrorMessage;
			}
			catch(Exception ee)
			{

				System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);

				return actErrorMessage;
			}
		}
		catch(Exception e)
		{
			System.err.println("Error Message NOT Found or NOT Clickable");
			System.err.println(e.getMessage());

			String Exception=e.getMessage();

			return Exception;
		}
	}
	
	public static boolean checkBackgroundSavingMessage(String docno) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		try
		{
			HashSet<String> actMessage = new HashSet<String>();

			for (int i = 0; i < 1; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}


			HashSet<String> expMessage = new HashSet<String>();

			expMessage.add("Voucher saved successfully : "+docno);
			expMessage.add("Saving in background.");

			System.out.println("Actual Message    : "+actMessage);
			System.out.println("Expected Message  : "+expMessage);

			if(actMessage.equals(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		catch(Exception e)
		{
			System.err.println("Error Message NOT Found or NOT Clickable");
			System.err.println(e.getMessage());
			return false;

		} 
	}	





	
	public static boolean checkDeleteCompanyOptionInSearch() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		String actAlertTxt = null;
		String expAlertTxt = "Are you sure you want to Delete the Company";

		String actCompanyDeletedAlertTxt = null;
		String expCompanyDeletedAlertTxt = "Company deleted successfully";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyName));
		String actGetLoginCompanyNameInformation = companyName.getText();

		if (actGetLoginCompanyNameInformation.startsWith("Automation Company") || actGetLoginCompanyNameInformation.startsWith("Automation Options Company ")) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getSearch));
			getSearch.click();

			getSearch.sendKeys("Delete Company");
			Thread.sleep(2000);
			getSearch.sendKeys(Keys.ENTER);
			getWaitForAlert();

			actAlertTxt = getAlert().getText();

			getAlert().accept();

			Thread.sleep(2000);

			getWaitForAlert();

			actCompanyDeletedAlertTxt = getAlert().getText();

			getAlert().accept();

			Thread.sleep(2000);

			System.out.println(actAlertTxt+"  Value Expected  "+expAlertTxt);
			System.out.println(actCompanyDeletedAlertTxt+"  Value Expected  "+expCompanyDeletedAlertTxt);

			getDriver().navigate().refresh();

			Thread.sleep(3000);
		}

		if (actAlertTxt.equalsIgnoreCase(expAlertTxt) && actCompanyDeletedAlertTxt.equalsIgnoreCase(expCompanyDeletedAlertTxt))
		{
			return true;
		}
		else
		{
			return false;
		}
	}



	

	public static boolean checkRestoreCompanyForBatchNegativeOptions() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(loginPageRestoreBtn));
		loginPageRestoreBtn.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(adminName));
		adminPassword.sendKeys("focus");

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(loginButton));
		loginButton.click();

		Thread.sleep(2000);

		boolean actRestoreCompanyBtnOfLoginPage  =restoreCompanyBtnOfLoginPage.isDisplayed();
		boolean actRestoreInputTxt               =restoreInputTxt.isDisplayed();
		boolean actRestoreBrowseBtn              =restoreBrowseBtn.isDisplayed();

		boolean expRestoreCompanyBtnOfLoginPage  =true;
		boolean expRestoreInputTxt               =true;
		boolean expRestoreBrowseBtn              =true;

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(restoreBrowseBtn));
		restoreBrowseBtn.click();

		Thread.sleep(3000);

		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\BatchNegativeOptions.exe");

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(restoreCompanyBtnOfLoginPage));
		restoreCompanyBtnOfLoginPage.click();

		/* try
	     {
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(overRideYesBtn));
	 		 overRideYesBtn.click();
	 		 Thread.sleep(22000);*/

		getWaitForAlert();
		String actAlertTxt = getAlert().getText();
		getAlert().accept();

		System.err.println(actAlertTxt);

		String expAlertTxt = "Restore company code : ";

		Thread.sleep(15000);

		if(actAlertTxt.startsWith(expAlertTxt))
		{
			refreshBtn.click();
			Thread.sleep(2000);
			return true;
		}
		else
		{
			return false;
		}
	}






	



	public static boolean checkLoginAfterRestoringBatchNegativeOptionsBackup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{
		getDriver().navigate().refresh();
		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		boolean qflag=true;

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		Thread.sleep(2000);
		
		lp.clickOnSignInBtn();

		Thread.sleep(15000);

		try 
		{
			if (reindexingPopup.isDisplayed()) 
			{
				System.out.println("Reindexing Log is Displaying in Restore Company");

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reindexingPopupCancelBtn));
				reindexingPopupCancelBtn.click();

				Thread.sleep(2000);

				lp.clickOnSignInBtn();
			}
			else
			{
				System.out.println("Reindexing Log is Not Displaying in Restore Company");
			}

			Thread.sleep(2000);
			
			String actUserInfo1=userNameDisplay.getText();

			System.out.println("User Info  : "+actUserInfo1);

			System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
			companyLogo.click();

			String getCompanyTxt1=companyName.getText();
			String getLoginCompanyName1=getCompanyTxt1.substring(0, 19);
			System.out.println("company name  :  "+ getLoginCompanyName1);
			companyLogo.click();

			String expUserInfo1           ="SU";
			String expLoginCompanyName1   ="Automation Options ";

			System.out.println("UserInfo1             : "+actUserInfo1            +" Value Expected : "+expUserInfo1);
			System.out.println("LoginCompanyName1     : "+getLoginCompanyName1    +" Value Expected : "+expLoginCompanyName1);

			if(actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1))
			{
				qflag=true;
			}
			else
			{
				qflag=false;
			}
		} 
		catch (Exception e) 
		{
			System.err.println(e.getMessage());
			
			Thread.sleep(2000);
			
			String actUserInfo1=userNameDisplay.getText();

			System.out.println("User Info  : "+actUserInfo1);

			System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
			companyLogo.click();

			String getCompanyTxt1=companyName.getText();
			String getLoginCompanyName1=getCompanyTxt1.substring(0, 19);
			System.out.println("company name  :  "+ getLoginCompanyName1);
			companyLogo.click();

			String expUserInfo1           ="SU";
			String expLoginCompanyName1   ="Automation Options ";

			System.out.println("UserInfo1             : "+actUserInfo1            +" Value Expected : "+expUserInfo1);
			System.out.println("LoginCompanyName1     : "+getLoginCompanyName1    +" Value Expected : "+expLoginCompanyName1);
		
			if(actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1))
			{
				qflag=true;
			}
			else
			{
				qflag=false;
			}
		}
		return qflag;
	}
	
	
	public static void prongHornExit() throws AWTException, InterruptedException, IOException
	{
	 
		
		
		/* Robot robot = new Robot();
		 robot.keyPress(KeyEvent.VK_WINDOWS);
		 robot.keyPress(KeyEvent.VK_R); 
		 robot.keyRelease(KeyEvent.VK_R);
		 robot.keyRelease(KeyEvent.VK_WINDOWS);*/
		 
		 
	     
	     Thread.sleep(4000);
	     
	    Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\pronghornexit.exe");
	   
	     //Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\inetmgrRestart.exe");
	     //Thread.sleep(3000);
	     
	     
		/*
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * 
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * 
		 * 
		 * robot.keyPress(KeyEvent.VK_ENTER); robot.keyRelease(KeyEvent.VK_ENTER);
		 */
  
  Thread.sleep(4000);

	  
	
	}
	
	public static void  prongHornOn() throws AWTException, InterruptedException, IOException
	{
	 
		
		/*
		 * Robot robot = new Robot(); robot.keyPress(KeyEvent.VK_WINDOWS);
		 * robot.keyPress(KeyEvent.VK_R); robot.keyRelease(KeyEvent.VK_R);
		 * robot.keyRelease(KeyEvent.VK_WINDOWS);
		 */
		 
	     
	     Thread.sleep(3000);
	     
	  Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\PronghornOn.exe");
	   
	     //Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\inetmgrRestart.exe");
	     //Thread.sleep(3000);
	     
	     
		/*
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * 
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * 
		 * 
		 * robot.keyPress(KeyEvent.VK_ENTER); robot.keyRelease(KeyEvent.VK_ENTER);
		 */
  
	  Thread.sleep(5000);
	  
	  Robot robot = new Robot(); 
	  robot.keyPress(KeyEvent.VK_ALT);
	  robot.keyPress(KeyEvent.VK_TAB);
	  
	  robot.keyRelease(KeyEvent.VK_ALT);
	  robot.keyRelease(KeyEvent.VK_TAB);
	  
	  Thread.sleep(5000);
	  
	  

	     
	     
	   // Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\proghornExit.exe");
	     
	     
	}
	
	
	public boolean checkLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException 
	{
		Thread.sleep(2000);

		LoginPage lp=new LoginPage(getDriver()); 
		
	    String unamelt="su";
	  
	    String pawslt="su";
	      
	    lp.enterUserName(unamelt);
	    
	    lp.enterPassword(pawslt);
	    
	    String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}


		Thread.sleep(2000);
	    
	    lp.clickOnSignInBtn();
	    
	  
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		String actUserInfo=userNameDisplay.getText();
		
		System.out.println("User Info  : "+actUserInfo);
		
		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();
		
		String getCompanyTxt=companyName.getText();
		String getLoginCompanyName=getCompanyTxt.substring(0, 19);
		System.out.println("company name  :  "+ getLoginCompanyName);
		companyLogo.click();
		
		boolean actDashboard = dashboard.isDisplayed();
		
		
		String expUserInfo           ="SU";
		String expLoginCompanyName   ="Automation Options ";
		boolean expDashboard = true;
		
		
		Thread.sleep(2000);
	
		
		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}




	// First Scenario Starts : Changing Inward Voucher Transaction Date to Future Date After Full Consumption of Batch in Outward Voucher

	public boolean checkSavingPurchaseVoucherVATVoucher1WithTodaysDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 8, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 9, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 10, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 11, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 12, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 13, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 14, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 8, 6);
		
		excelReader.setCellData(xlfile, xlSheetName, 8, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(billRefNewReferenceTxt);

		Thread.sleep(2000);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(1000);
		
		 /*String actMessage =SavingInBackgroundTrial();

		 //String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         //expMsg.add(excelReader.getCellData(xlSheetName, 9, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 10, 6));
         
         String expMessage = expMsg.toString();
         
         excelReader.setCellData(xlfile, xlSheetName, 9, 7, actMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 9, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 10, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 9, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);


		
		

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 8, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 8, 8, resFail);
			return false;
		} 
	}








	public boolean checkBatchPopupIsDisplayingWithValuesInSalesInvoiceVATVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 1 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 15, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 16, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 17, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 18, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 19, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 20, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 21, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 22, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 15, 6);
		excelReader.setCellData(xlfile, xlSheetName, 15, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 16, 6);
		excelReader.setCellData(xlfile, xlSheetName, 16, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 17, 6);
		excelReader.setCellData(xlfile, xlSheetName, 17, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 18, 6);
		excelReader.setCellData(xlfile, xlSheetName, 18, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 19, 6);
		excelReader.setCellData(xlfile, xlSheetName, 19, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 20, 6);
		excelReader.setCellData(xlfile, xlSheetName, 20, 7, act1stRowBaseQuantity);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 21, 6);
		excelReader.setCellData(xlfile, xlSheetName, 21, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 22, 6);
		excelReader.setCellData(xlfile, xlSheetName, 22, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;
		//System.out.println(act1stRowPurchaseDate);
		//System.out.println(exp1stRowPurchaseDate);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 23, 6);
		excelReader.setCellData(xlfile, xlSheetName, 23, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 24, 6);
		excelReader.setCellData(xlfile, xlSheetName, 24, 7, actTotalQuantityAdjusted);
		
		//excelReader.setCellData(xlfile, xlSheetName, 25, 7, act1stRowPurchaseDate);
		//excelReader.setCellData(xlfile, xlSheetName, 26, 7, act1stRowExpiryDate);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 15, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 15, 8, resFail);
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher1WithNextDateByConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 25, 6);
		excelReader.setCellData(xlfile, xlSheetName, 25, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 26, 6);
		excelReader.setCellData(xlfile, xlSheetName, 26, 7, actTotalQuantityInHeader);

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 27, 6);
		excelReader.setCellData(xlfile, xlSheetName, 27, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 28, 6);
		excelReader.setCellData(xlfile, xlSheetName, 28, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 29, 6);
		excelReader.setCellData(xlfile, xlSheetName, 29, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 30, 6);
		excelReader.setCellData(xlfile, xlSheetName, 30, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 31, 6);
		excelReader.setCellData(xlfile, xlSheetName, 31, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 32, 6);
		excelReader.setCellData(xlfile, xlSheetName, 32, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 33, 6);
		excelReader.setCellData(xlfile, xlSheetName, 33, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 34, 6);
		excelReader.setCellData(xlfile, xlSheetName, 34, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 35, 6);
		excelReader.setCellData(xlfile, xlSheetName, 35, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 36, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 37, 6));
         
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 36, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);*/
		
		
		
		String expMessage1= excelReader.getCellData(xlSheetName, 36, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 37, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 36, 7, actMessage);
		
		
		

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 25, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 25, 8, resFail);
			return false;
		}
	}








	public boolean checkReSavingPurchaseVoucherVATVoucher1WithDateNextToSalesInvoiceFullConsumeQty() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 38, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Voucher loaded successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(1000);

		String expMessage=excelReader.getCellData(xlSheetName, 38, 6);

		String actMessage=checkValidationMessage(expMessage);
		
		excelReader.setCellData(xlfile, xlSheetName, 38, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 38, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 38, 8, resFail);
			return false;
		}
	}


	// First Scenario Stop : Changing Inward Voucher Transaction Date to Future Date After Full Consumption of Batch in Outward Voucher













	// Second Scenario Starts : Changing Inward Voucher Transaction Date to Future Date After Suspending Outward Voucher With Full Consumption of batch and Resaving Outward Voucher


	public boolean checkSuspendingSalesInvoiceVATVoucher1FromVoucherHomePage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 39, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		Thread.sleep(1000);
		
		String expMessage = excelReader.getCellData(xlSheetName, 39, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 39, 7, actMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 39, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 39, 8, resFail);
			return false;
		}
	}








	public boolean checkReSavingPurchaseVoucherVATVoucher1WithDateNextToSalesInvoiceAfterSuspendingSalesInvoiceVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 40, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}
		Thread.sleep(1000);
		checkValidationMessage("Voucher loaded successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(1000);

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 40, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 41, 6));
         
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 40, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 40, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 41, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 40, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 40, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 40, 8, resFail);
			return false;
		}
	}









	public boolean checkReSavingSalesInvoiceVATVoucher1AfterChangingPurchaseVoucherDateNextToSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 42, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(1000);

		String expMessage = excelReader.getCellData(xlSheetName, 42, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 42, 7, actMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 42, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 42, 8, resFail);
			return false;
		}
	}










	// Third Scenario Starts : Changing Inward Voucher Transaction Date to Future Date After Suspending Outward Voucher from Entry Page Home With Full Consumption of batch and Resaving Outward Voucher

	public boolean checkReSavingPurchaseVoucherVATVoucher1WithDateSameAsSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 43, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 1 Days :: " + DocDate);
		dateTxt.click();
		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		Thread.sleep(1000);
		
		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 43, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 44, 6));
         
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 43, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 43, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 44, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 43, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
		
		

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 43, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 43, 8, resFail);
			return false;
		}
	}





	public boolean checkSuspendingSalesInvoiceVATVoucher1FromEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 45, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(1000);
		
		
		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 45, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 46, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 45, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 45, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 46, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 45, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		Thread.sleep(1000);

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 47, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 48, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 47, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 49, 6);
		excelReader.setCellData(xlfile, xlSheetName, 49, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actSuspendMessage.startsWith(expSuspendMessage1)
				&& actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 45, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 45, 8, resFail);
			return false;
		}
	}








	public boolean checkReSavingPurchaseVoucherVATVoucher1WithDateNextToSalesInvoiceAfterSuspendingSalesInvoiceVoucherInEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 50, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Voucher loaded successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(1000);

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 50, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 51, 6));
         
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 50, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 50, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 51, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 50, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 50, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 50, 8, resFail);
			return false;
		}
	}







	public boolean checkReSavingSalesInvoiceVATVoucher1SuspendedFromEntryPageAfterChangingPurchaseVoucherDateNextToSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 52, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click(); 
		
		Thread.sleep(1000);

		String expMessage = excelReader.getCellData(xlSheetName, 52, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 52, 7, actMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 52, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 52, 8, resFail);
			return false;
		}
	}








	// Fourth Scenario Starts : Changing outward Transaction Date Prior to Inward Voucher Transaction Date After Full Consumption of Batch

	public boolean checkBatchPopupWithValuesInSalesInvoiceVATVoucher1WithDateSameAsPurchaseVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 53, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 53, 6);
		excelReader.setCellData(xlfile, xlSheetName, 53, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 54, 6);
		excelReader.setCellData(xlfile, xlSheetName, 54, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 55, 6);
		excelReader.setCellData(xlfile, xlSheetName, 55, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 56, 6);
		excelReader.setCellData(xlfile, xlSheetName, 56, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 57, 6);
		excelReader.setCellData(xlfile, xlSheetName, 57, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 58, 6);
		excelReader.setCellData(xlfile, xlSheetName, 58, 7, act1stRowBaseQuantity);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 59, 6);
		excelReader.setCellData(xlfile, xlSheetName, 59, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 60, 6);
		excelReader.setCellData(xlfile, xlSheetName, 60, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		pre.add(Calendar.DATE, 2);
		String PurchasetDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = PurchasetDate;
		//System.out.println();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 61, 6);
		excelReader.setCellData(xlfile, xlSheetName, 61, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 62, 6);
		excelReader.setCellData(xlfile, xlSheetName, 62, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 53, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 53, 8, resFail);
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher1WithDateSameAsPurchaseVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 63, 6);
		excelReader.setCellData(xlfile, xlSheetName, 63, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 64, 6);
		excelReader.setCellData(xlfile, xlSheetName, 64, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 65, 6);
		excelReader.setCellData(xlfile, xlSheetName, 65, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 66, 6);
		excelReader.setCellData(xlfile, xlSheetName, 66, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 67, 6);
		excelReader.setCellData(xlfile, xlSheetName, 67, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 68, 6);
		excelReader.setCellData(xlfile, xlSheetName, 68, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 69, 6);
		excelReader.setCellData(xlfile, xlSheetName, 69, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 70, 6);
		excelReader.setCellData(xlfile, xlSheetName, 70, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		pre.add(Calendar.DATE, 2);
		String PurchaseDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = PurchaseDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 71, 6);
		excelReader.setCellData(xlfile, xlSheetName, 71, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 72, 6);
		excelReader.setCellData(xlfile, xlSheetName, 72, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 73, 6);
		excelReader.setCellData(xlfile, xlSheetName, 73, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(1000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 74, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 75, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 74, 7, actMessage);
        
		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		
		String expMessage1= excelReader.getCellData(xlSheetName, 74, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 75, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 74, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		Thread.sleep(2000);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 63, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 63, 8, resFail);
			return false;
		}
	}








	public boolean checkBatchPopupIsDisplayingEmptyWhenTryToSaveSalesInvoiceVATVoucher1WithDatePriorToPurchaseVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkValidationMessage("Voucher Loaded Successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 1 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 76, 6);
		excelReader.setCellData(xlfile, xlSheetName, 76, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 77, 6);
		excelReader.setCellData(xlfile, xlSheetName, 77, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 78, 6);
		excelReader.setCellData(xlfile, xlSheetName, 78, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 79, 6);
		excelReader.setCellData(xlfile, xlSheetName, 79, 7, actBalance);

		String actBatchPopupTable = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expBatchPopupTable = excelReader.getCellData(xlSheetName, 80, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 80, 7, actBatchPopupTable);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 81, 6);
		excelReader.setCellData(xlfile, xlSheetName, 81, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 82, 6);
		excelReader.setCellData(xlfile, xlSheetName, 82, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable.equalsIgnoreCase(expBatchPopupTable) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 76, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 76, 8, resFail);
			return false;
		}
	}










	// Fifth Scenario Starts : Try to Suspending inward Document After Full Consumption of batch from Home page

	public boolean checkSuspendingPurchaseVoucherVATVoucher1InHomePageAfterConsumingFullyInSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 83, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();
		
		Thread.sleep(1000);

		String expMessage = excelReader.getCellData(xlSheetName, 83, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 83, 7, actMessage);

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 84, 6);
		excelReader.setCellData(xlfile, xlSheetName, 84, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actMessage.equalsIgnoreCase(expMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 83, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 83, 8, resFail);
			return false;
		}
	}






	// Sixth Scenario Starts : Try to Suspending inward Document After Full Consumption of batch from Entry page

	public boolean checkSuspendingPurchaseVoucherVATVoucher1InEntryPageAfterConsumingFullyInSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 85, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		Thread.sleep(1000);

		String expSuspendMessage =excelReader.getCellData(xlSheetName, 85, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage);
		excelReader.setCellData(xlfile, xlSheetName, 85, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 86, 6);
		excelReader.setCellData(xlfile, xlSheetName, 86, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.equalsIgnoreCase(expSuspendMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 85, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 85, 8, resFail);
			return false;
		}
	}











	// Seventh Scenario Starts : Try to Suspending inward Document After Suspending Outward Voucher With Full Consumption of Batch and Resaving Outward Document(Keep Inward Suspend)

	public boolean checkSuspendingSalesInvoiceVATVoucher1FromVoucherHomePageForSeventhScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 87, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();
		Thread.sleep(1000);
		
		String expMessage = excelReader.getCellData(xlSheetName, 87, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 87, 7, actMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 87, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 87, 8, resFail);
			return false;
		}
	}










	public boolean checkSuspendingPurchaseVoucherVATVoucher1InHomePageAfterSuspendingSalesInvoiceVAt() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 88, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();
		Thread.sleep(1000);
		
		String expMessage = excelReader.getCellData(xlSheetName, 88, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 88, 7, actMessage);

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 89, 6);
		excelReader.setCellData(xlfile, xlSheetName, 89, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actMessage.equalsIgnoreCase(expMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 88, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 88, 8, resFail);
			return false;
		}
	}








	public boolean checkReSavingSalesInvoiceVATVoucher1AfterSuspendingPurchaseVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 90, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		
		Thread.sleep(1000);
		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(1000);
		String expMessage = excelReader.getCellData(xlSheetName, 90, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 90, 7, actMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 90, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 90, 8, resFail);
			return false;
		}
	}










	// Eight Scenario Starts : Try to Suspending inward Document After Suspending Outward Voucher With Full Consumption of Batch and Resaving Outward Document(Keep Inward Suspend)
	// Suspending from Entry Page

	public boolean checkReSavingPurchaseVoucherVATVoucher1AfterSeventhScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 91, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}
		Thread.sleep(1000);
		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(1000);
		
		/*
		String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 91, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 92, 6));
        excelReader.setCellData(xlfile, xlSheetName, 91, 7, actMessage);
        
        String expMessage = expMsg.toString();

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 91, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 92, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 91, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 91, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 91, 8, resFail);
			return false;
		}
	}








	public boolean checkReSavingSalesInvoiceVATVoucher1AfterSeventhScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 93, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		Thread.sleep(1000);
		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(1000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 93, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 94, 6));
        
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 93, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 93, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 94, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 93, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 93, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 93, 8, resFail);
			return false;
		}
	}







	public boolean checkSuspendingSalesInvoiceVATVoucher1FromEntryPageForEightScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		Thread.sleep(1000);
		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		Thread.sleep(1000);

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 95, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 96, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 95, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 97, 6);
		excelReader.setCellData(xlfile, xlSheetName, 97, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 95, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 95, 8, resFail);
			return false;
		}
	}








	public boolean checkSuspendingPurchaseVoucherVATVoucher1InEntryPageAfterSuspendingSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 98, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		
		Thread.sleep(1000);
		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		Thread.sleep(1000);
		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 98, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 99, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 98, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 100, 6);
		excelReader.setCellData(xlfile, xlSheetName, 100, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 98, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 98, 8, resFail);
			return false;
		}
	}









	public boolean checkReSavingSalesInvoiceVATVoucher1AfterSuspendingPurchaseVoucher1FromEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 101, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		
		Thread.sleep(1000);
		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(1000);

		String expMessage = excelReader.getCellData(xlSheetName, 101, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 101, 7, actMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 101, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 101, 8, resFail);
			return false;
		}
	}










	// Ninth Scenario Starts : Try to Deleting inward Document After Full Consumption of batch

	public boolean checkReSavingPurchaseVoucherVATVoucher1AfterEigthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 102, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}
		Thread.sleep(1000);
		checkValidationMessage("Voucher Loaded Successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(1000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 102, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 103, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 102, 7, actMessage);
        
		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 102, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 103, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 102, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
		
		
		

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 102, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 102, 8, resFail);
			return false;
		}
	}







	public boolean checkReSavingSalesInvoiceVATVoucher1AfterEightScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 104, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		Thread.sleep(1000);
		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		Thread.sleep(1000);
		
		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 104, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 105, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 104, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 104, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 105, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 104, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 104, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 104, 8, resFail);
			return false;
		}
	}








	public boolean checkDeletingPurchaseVoucherVATVoucher1InHomePageAfterConsumingFullQuantityInSalesInvoiceVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 106, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		getAlert().accept();
		Thread.sleep(1000);
		String expMessage = excelReader.getCellData(xlSheetName, 106, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 106, 7, actMessage);

		Thread.sleep(1000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 106, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 106, 8, resFail);
			return false;
		}
	}











	public boolean checkDeletingPurchaseVoucherVATVoucher1InEntryPageAfterConsumingFullQuantityInSalesInvoiceVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 107, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(1000);
		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		getAlert().accept();
		Thread.sleep(1000);

		String expMessage = excelReader.getCellData(xlSheetName, 107, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 107, 7, actMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 107, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 107, 8, resFail);
			return false;
		}
	}












	// Tenth Scenario Starts : Try to Deleting inward Document After Suspending Outward Voucher With Full Consumption of Batch

	public boolean checkSuspendingSalesInvoiceVATVoucher1FromEntryPageForTenthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 108, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(1000);
		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		Thread.sleep(1000);

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 108, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 109, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 108, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 110, 6);
		excelReader.setCellData(xlfile, xlSheetName, 110, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 108, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 108, 8, resFail);
			return false;
		}
	}








	public boolean checkDeletingPurchaseVoucherVATVoucher1InHomePageAfterSuspendingSalesInvoiceVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 111, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		getAlert().accept();
		Thread.sleep(1000);

		String expMessage = excelReader.getCellData(xlSheetName, 111, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 111, 7, actMessage);

		Thread.sleep(1000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 111, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 111, 8, resFail);
			return false;
		}
	}








	// Eleventh Scenario Starts : Try to Deleting inward Document After Suspending Outward Voucher With Full Consumption of Batch and Resaving Outward Document(After Deleting Inward)

	public boolean checkReSavingSalesInvoiceVATVoucher1AfterDeletingPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 112, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		
		Thread.sleep(1000);
		
		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 112, 6);
		excelReader.setCellData(xlfile, xlSheetName, 112, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 113, 6);
		excelReader.setCellData(xlfile, xlSheetName, 113, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 114, 6);
		excelReader.setCellData(xlfile, xlSheetName, 114, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 115, 6);
		excelReader.setCellData(xlfile, xlSheetName, 115, 7, actBalance);

		String actBatchPopupTable = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expBatchPopupTable = excelReader.getCellData(xlSheetName, 116, 6);
		excelReader.setCellData(xlfile, xlSheetName, 116, 7, actBatchPopupTable);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 117, 6);
		excelReader.setCellData(xlfile, xlSheetName, 117, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 118, 6);
		excelReader.setCellData(xlfile, xlSheetName, 118, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(1000);

		String expMessage = excelReader.getCellData(xlSheetName, 119, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 119, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable.equalsIgnoreCase(expBatchPopupTable) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 112, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 112, 8, resFail);
			return false;
		}
	}










	public boolean checkSavingPurchaseVoucherVATVoucher1AgainAfterDeletingPurchaseVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		Thread.sleep(1000);

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 120, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 121, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 122, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 123, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 124, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 125, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 126, 5));
		enter_Batch.sendKeys(Keys.TAB);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 120, 6);
		excelReader.setCellData(xlfile, xlSheetName, 120, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(1000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 121, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 122, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 121, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 121, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 122, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 121, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 120, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 120, 8, resFail);
			return false;
		}
	}










	

	public boolean checkReSavingSuspendedSalesInvoiceVATVoucher1AfterSavingPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 128, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		Thread.sleep(1000);

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 128, 6);
		excelReader.setCellData(xlfile, xlSheetName, 128, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 129, 6);
		excelReader.setCellData(xlfile, xlSheetName, 129, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 130, 6);
		excelReader.setCellData(xlfile, xlSheetName, 130, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 131, 6);
		excelReader.setCellData(xlfile, xlSheetName, 131, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 132, 6);
		excelReader.setCellData(xlfile, xlSheetName, 132, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 133, 6);
		excelReader.setCellData(xlfile, xlSheetName, 133, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 134, 6);
		excelReader.setCellData(xlfile, xlSheetName, 134, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 135, 6);
		excelReader.setCellData(xlfile, xlSheetName, 135, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		pre.add(Calendar.DATE, 2);
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 136, 6);
		excelReader.setCellData(xlfile, xlSheetName, 136, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 137, 6);
		excelReader.setCellData(xlfile, xlSheetName, 137, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(2000);

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/

		 String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet(); 

         //expMsg.add(excelReader.getCellData(xlSheetName, 138, 6));
         //expMsg.add(excelReader.getCellData(xlSheetName, 139, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 140, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 141, 6));  
         String expMessage = expMsg.toString(); 
         
         excelReader.setCellData(xlfile, xlSheetName, 138, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		if(actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.equals(expMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 128, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 128, 8, resFail);
			return false;
		}
	}









	// Twelfth Scenario Starts : Try to Suspending and Deleting inward Document After Suspending Outward Voucher With Full Consumption of Batch and Resaving Outward Document(After Deleting Inward)

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForTwelfthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		Thread.sleep(1000);

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		Thread.sleep(1000);

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 142, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 143, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 142, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 144, 6);
		excelReader.setCellData(xlfile, xlSheetName, 144, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 142, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 142, 8, resFail);
			return false;
		}
	}











	public boolean checkSuspendAndDeletingPurchaseVoucherVATVoucher1InHomePageAfterSuspendingSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 145, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}
		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();
		Thread.sleep(2000);

		String expMessage = excelReader.getCellData(xlSheetName, 145, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 145, 7, actMessage);

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 146, 6);
		excelReader.setCellData(xlfile, xlSheetName, 146, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);
		
		int count1 = grid_VoucherNoList.size();

		for (int i = 0; i < count1; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 146, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(1500);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		getAlert().accept();
		Thread.sleep(1000);

		String expDeleteMessage = excelReader.getCellData(xlSheetName, 147, 6);
		String actDeleteMessage = checkValidationMessage(expDeleteMessage);
		excelReader.setCellData(xlfile, xlSheetName, 147, 7, actDeleteMessage);

		if(actMessage.equalsIgnoreCase(expMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus) && actDeleteMessage.equalsIgnoreCase(expDeleteMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 145, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 145, 8, resFail);
			return false;
		}
	}








	public boolean checkReSavingSalesInvoiceVATVoucher1AfterSuspendingAndDeletingPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 148, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		Thread.sleep(1000);

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 148, 6);
		excelReader.setCellData(xlfile, xlSheetName, 148, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 149, 6);
		excelReader.setCellData(xlfile, xlSheetName, 149, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 150, 6);
		excelReader.setCellData(xlfile, xlSheetName, 150, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 151, 6);
		excelReader.setCellData(xlfile, xlSheetName, 151, 7, actBalance);

		String actBatchPopupTable = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expBatchPopupTable = excelReader.getCellData(xlSheetName, 152, 6);
		excelReader.setCellData(xlfile, xlSheetName, 152, 7, actBatchPopupTable);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 153, 6);
		excelReader.setCellData(xlfile, xlSheetName, 153, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 154, 6);
		excelReader.setCellData(xlfile, xlSheetName, 154, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(1000);

		String expMessage = excelReader.getCellData(xlSheetName, 155, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 155, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable.equalsIgnoreCase(expBatchPopupTable) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 148, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 148, 8, resFail);
			return false;
		}
	}










	public boolean checkSavingPurchaseVoucherVATVoucher1AgainAfterSuspendingAndDeletingPurchaseVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		Thread.sleep(1000);

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 156, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 157, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 158, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 159, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 160, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 161, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 162, 5));
		enter_Batch.sendKeys(Keys.TAB);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 156, 6);
		excelReader.setCellData(xlfile, xlSheetName, 156, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(1000);
		
		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 157, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 158, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 157, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 157, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 158, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 157, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 156, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 156, 8, resFail);
			return false;
		}
	}








	public boolean checkReSavingSuspendedSalesInvoiceVATVoucher1AfterSavingSuspendedAndDeletedPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 163, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		Thread.sleep(1000);

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 163, 6);
		excelReader.setCellData(xlfile, xlSheetName, 163, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 164, 6);
		excelReader.setCellData(xlfile, xlSheetName, 164, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 165, 6);
		excelReader.setCellData(xlfile, xlSheetName, 165, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 166, 6);
		excelReader.setCellData(xlfile, xlSheetName, 166, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 167, 6);
		excelReader.setCellData(xlfile, xlSheetName, 167, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 168, 6);
		excelReader.setCellData(xlfile, xlSheetName, 168, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 169, 6);
		excelReader.setCellData(xlfile, xlSheetName, 169, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 170, 6);
		excelReader.setCellData(xlfile, xlSheetName, 170, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		pre.add(Calendar.DATE, 2);
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 171, 6);
		excelReader.setCellData(xlfile, xlSheetName, 171, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 172, 6);
		excelReader.setCellData(xlfile, xlSheetName, 172, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(2000);

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		
		Thread.sleep(1000);

		 String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet(); 

         expMsg.add(excelReader.getCellData(xlSheetName, 173, 6));
         //expMsg.add(excelReader.getCellData(xlSheetName, 174, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 175, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 176, 6));  
         String expMessage = expMsg.toString(); 
         excelReader.setCellData(xlfile, xlSheetName, 173, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		if(actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.equals(expMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 163, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 163, 8, resFail);
			return false;
		}
	}











	// Thirteenth Scenario Starts : Try to Edit Quantity in inward Document Lower Than Consumned Quantity in Outward Voucher

	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1WithQuantityBelowConsumedQuantityInSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 177, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}
		Thread.sleep(1000);

		checkValidationMessage("Voucher Loaded Successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 178, 5));
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(1000);

		String expMessage = excelReader.getCellData(xlSheetName, 177, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 177, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 177, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 177, 8, resFail);
			return false;
		}
	}










	// Fourteenth Scenario Starts : Try to Edit Quantity in inward Document Lower Than Consumned Quantity in Outward Voucher after Suspending and Resaving Outward Voucher

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForFourteenthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 179, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		Thread.sleep(1000);
		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		Thread.sleep(1000);

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 179, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 180, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 179, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 181, 6);
		excelReader.setCellData(xlfile, xlSheetName, 181, 7, actSuspendStatus);
		

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 179, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 179, 8, resFail);
			return false;
		}
	}








	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1WithQuantityBelowConsumedQuantityAfterSuspendingSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 182, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}
		Thread.sleep(1000);

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 183, 5));
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(1000);

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 182, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 183, 6));
         
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 182, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 182, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 183, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 182, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 182, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 182, 8, resFail);
			return false;
		}
	}








	public boolean checkReSavingSalesInvoiceVATVoucher1AfterSavingPurchaseVoucherVATWithBelowConsumedQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 184, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(1000);
		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = true; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(1000);

		String expMessage = excelReader.getCellData(xlSheetName, 184, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 184, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 184, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 184, 8, resFail);
			return false;
		}
	}








	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1WithQuantityEqualToConsumedQuantityInSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 185, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}
		Thread.sleep(1000);
		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 186, 5));
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(1000);

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 185, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 186, 6));
         
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 185, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 185, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 186, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 185, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 185, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 185, 8, resFail);
			return false;
		}
	}







	public boolean checkReSavingSuspendedSalesInvoiceVATVoucher1AfterSavingPurchaseVoucherVATWithQuantityFrom5To10() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 187, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		Thread.sleep(1000);

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 187, 6);
		excelReader.setCellData(xlfile, xlSheetName, 187, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 188, 6);
		excelReader.setCellData(xlfile, xlSheetName, 188, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 189, 6);
		excelReader.setCellData(xlfile, xlSheetName, 189, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 190, 6);
		excelReader.setCellData(xlfile, xlSheetName, 190, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 191, 6);
		excelReader.setCellData(xlfile, xlSheetName, 191, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 192, 6);
		excelReader.setCellData(xlfile, xlSheetName, 192, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 193, 6);
		excelReader.setCellData(xlfile, xlSheetName, 193, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 194, 6);
		excelReader.setCellData(xlfile, xlSheetName, 194, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		pre.add(Calendar.DATE, 2);
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 195, 6);
		excelReader.setCellData(xlfile, xlSheetName, 195, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 196, 6);
		excelReader.setCellData(xlfile, xlSheetName, 196, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(1000);

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);

		 String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet(); 

		expMsg.add(excelReader.getCellData(xlSheetName, 197, 6));
		//expMsg.add(excelReader.getCellData(xlSheetName, 198, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 199, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 200, 6));
		String expMessage = expMsg.toString();
		excelReader.setCellData(xlfile, xlSheetName, 197, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		if(actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.equals(expMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 187, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 187, 8, resFail);
			return false;
		}
	}
*/  
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}













	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingWarehouseFromHyderabadToSecunderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 201, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		Thread.sleep(1000);
		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 202, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(1000);

		String expMessage = excelReader.getCellData(xlSheetName, 201, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 201, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 201, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 201, 8, resFail);
			return false;
		}
	}










	// Sixteenth Scenario Starts : Try to Change Warehouse in Inward Document After Suspending and Resaving Outward Voucher With Full Consumption of Batch

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForSixteenthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 203, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 203, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 204, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 203, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 205, 6);
		excelReader.setCellData(xlfile, xlSheetName, 205, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 203, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 203, 8, resFail);
			return false;
		}
	}









	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingWarehouseFromHyderabadToSecunderabadAfterSuspendingSalesInvoiceVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 206, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 207, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 206, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 207, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 206, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/  
		
		String expMessage1= excelReader.getCellData(xlSheetName, 206, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 207, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 206, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 206, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 206, 8, resFail);
			return false;
		}
	}










	public boolean checkReSavingSalesInvoiceVATVoucher1AfterChangingWarehouseToSecunderabadInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 208, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 208, 6);
		excelReader.setCellData(xlfile, xlSheetName, 208, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 209, 6);
		excelReader.setCellData(xlfile, xlSheetName, 209, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 210, 6);
		excelReader.setCellData(xlfile, xlSheetName, 210, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 211, 6);
		excelReader.setCellData(xlfile, xlSheetName, 211, 7, actBalance);

		String actBatchPopupTable = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expBatchPopupTable = excelReader.getCellData(xlSheetName, 212, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 212, 7, actBatchPopupTable);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 213, 6);
		excelReader.setCellData(xlfile, xlSheetName, 213, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 214, 6);
		excelReader.setCellData(xlfile, xlSheetName, 214, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 215, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 215, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage) && actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 208, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 208, 8, resFail);
			return false;
		}
	}











	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingBackWarehouseFromSecunderabadToHyderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 216, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 217, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 216, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 217, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 216, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 216, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 217, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 216, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 216, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 216, 8, resFail);
			return false;
		}
	}










	public boolean checkReSavingSalesInvoiceVATVoucher1AfterChangingWarehouseToHyderabadInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 218, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 218, 6);
		excelReader.setCellData(xlfile, xlSheetName, 218, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 219, 6);
		excelReader.setCellData(xlfile, xlSheetName, 219, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 220, 6);
		excelReader.setCellData(xlfile, xlSheetName, 220, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 221, 6);
		excelReader.setCellData(xlfile, xlSheetName, 221, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 222, 6);
		excelReader.setCellData(xlfile, xlSheetName, 222, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 223, 6);
		excelReader.setCellData(xlfile, xlSheetName, 223, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 224, 6);
		excelReader.setCellData(xlfile, xlSheetName, 224, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 225, 6);
		excelReader.setCellData(xlfile, xlSheetName, 225, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		pre.add(Calendar.DATE, 2);
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 226, 6);
		excelReader.setCellData(xlfile, xlSheetName, 226, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 227, 6);
		excelReader.setCellData(xlfile, xlSheetName, 227, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/

		String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet(); 

		expMsg.add(excelReader.getCellData(xlSheetName, 228, 6));
		//expMsg.add(excelReader.getCellData(xlSheetName, 229, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 230, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 231, 6));
		String expMessage = expMsg.toString();
		excelReader.setCellData(xlfile, xlSheetName, 228, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		if(actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.equals(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 218, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 218, 8, resFail);
			return false;
		}
	}













	// Seventeenth Scenario Starts : Try to Change Item in Inward Document After Full Consumption of Batch in Outward Document 

	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingItemFromBRCOGSITEMToBATCHBRITEM() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 232, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		select1stRow_2ndColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 233, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 234, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 235, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 232, 6);
		excelReader.setCellData(xlfile, xlSheetName, 232, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 233, 6);

		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 233, 7,actMessage);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);
		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 232, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 232, 8, resFail);
			return false;
		}
	}











	// Eighteenth Scenario Starts : Try to Change Item in Inward Document After Suspending and Resaving Outward Document With Full Consumption of Batch

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForEighteenthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 236, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 236, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 237, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 236, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 238, 6);
		excelReader.setCellData(xlfile, xlSheetName, 238, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 236, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 236, 8, resFail);
			return false;
		}
	}








	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingItemFromBRCOGSITEMToBATCHBRITEMAfterSuspendingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 239, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		select1stRow_2ndColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 240, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 241, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 242, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 239, 6);
		excelReader.setCellData(xlfile, xlSheetName, 239, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 240, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 241, 6));
        
        String expMessage = expMsg.toString();

        excelReader.setCellData(xlfile, xlSheetName, 240, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 240, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 241, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 240, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 239, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 239, 8, resFail);
			return false;
		}
	}









	public boolean checkReSavingSalesInvoiceVATVoucher1AfterChangingItemToBatchBRItemInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 243, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 243, 6);
		excelReader.setCellData(xlfile, xlSheetName, 243, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 244, 6);
		excelReader.setCellData(xlfile, xlSheetName, 244, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 245, 6);
		excelReader.setCellData(xlfile, xlSheetName, 245, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 246, 6);
		excelReader.setCellData(xlfile, xlSheetName, 246, 7, actBalance);

		String actBatchPopupTable = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expBatchPopupTable = excelReader.getCellData(xlSheetName, 247, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 247, 7, actBatchPopupTable);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 248, 6);
		excelReader.setCellData(xlfile, xlSheetName, 248, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 249, 6);
		excelReader.setCellData(xlfile, xlSheetName, 249, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		Thread.sleep(1000);
		
		String expMessage = excelReader.getCellData(xlSheetName, 250, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 250, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage) && actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 243, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 243, 8, resFail);
			return false;
		}
	}










	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingItemFromBATCHBRITEMToBRCOGSITEM() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 251, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		select1stRow_2ndColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 252, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 253, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 254, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 251, 6);
		excelReader.setCellData(xlfile, xlSheetName, 251, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 252, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 253, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 252, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 252, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 253, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 252, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 251, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 251, 8, resFail);
			return false;
		}
	}










	public boolean checkReSavingSalesInvoiceVATVoucher1AfterChangingItemNameToBRCOGSITEMInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 255, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 255, 6);
		excelReader.setCellData(xlfile, xlSheetName, 255, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 256, 6);
		excelReader.setCellData(xlfile, xlSheetName, 256, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 257, 6);
		excelReader.setCellData(xlfile, xlSheetName, 257, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 258, 6);
		excelReader.setCellData(xlfile, xlSheetName, 258, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 259, 6);
		excelReader.setCellData(xlfile, xlSheetName, 259, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 260, 6);
		excelReader.setCellData(xlfile, xlSheetName, 260, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 261, 6);
		excelReader.setCellData(xlfile, xlSheetName, 261, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 262, 6);
		excelReader.setCellData(xlfile, xlSheetName, 262, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		pre.add(Calendar.DATE, 2);
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 263, 6);
		excelReader.setCellData(xlfile, xlSheetName, 263, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 264, 6);
		excelReader.setCellData(xlfile, xlSheetName, 264, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/

		String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet(); 

		expMsg.add(excelReader.getCellData(xlSheetName, 265, 6));
		//expMsg.add(excelReader.getCellData(xlSheetName, 266, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 267, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 268, 6));
		String expMessage = expMsg.toString();
		
		excelReader.setCellData(xlfile, xlSheetName, 265, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		if(actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.equals(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 255, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 255, 8, resFail);
			return false;
		}
	}











	// Nineteenth Scenario Starts : Try to Change BatchNo in Inward Document After Full Consumption of batch in Outward Document

	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingBatchNoFromBATCHPVAT1ToBATCHPVAT2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 269, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}
		Thread.sleep(1000);
		
		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 270, 5));
		enter_Batch.sendKeys(Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 269, 6);
		excelReader.setCellData(xlfile, xlSheetName, 269, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		String expMessage = excelReader.getCellData(xlSheetName, 270, 6);

		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 270, 7, actMessage);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);
		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 269, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 269, 8, resFail);
			return false;
		}
	}










	// Twentieth Scenario Starts : Try to Change BatchNo in Inward Document After Suspending and Resaving Outward Document With Full Consumption of Batch

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForTwentiethScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 271, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 271, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 272, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 271, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 273, 6);
		excelReader.setCellData(xlfile, xlSheetName, 273, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 271, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 271, 8, resPass);
			return false;
		}
	}









	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingBatchNoFromBATCHPVAT1ToBATCHPVAT2AfterSuspendingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 274, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}
		Thread.sleep(1000);
		checkValidationMessage("Voucher loaded successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 275, 5));
		enter_Batch.sendKeys(Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 274, 6);
		excelReader.setCellData(xlfile, xlSheetName, 274, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);
		
		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 275, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 276, 6));
        excelReader.setCellData(xlfile, xlSheetName, 275, 7, actMessage);
        
        String expMessage = expMsg.toString();
		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 275, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 276, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 275, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 274, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 274, 8, resFail);
			return false;
		}
	}









	public boolean checkReSavingSalesInvoiceVATVoucher1AfterChangingBatchNoInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 277, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = true; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);
		
		String expMessage = excelReader.getCellData(xlSheetName, 277, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 277, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)/* && actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)*/) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 277, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 277, 8, resFail);
			return false;
		}
	}











	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingBatchNoFromBATCHPVAT2ToBATCHPVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 278, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}
		
		Thread.sleep(1000);
		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 279, 5));
		enter_Batch.sendKeys(Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 278, 6);
		excelReader.setCellData(xlfile, xlSheetName, 278, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);
		
		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 279, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 280, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 279, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 279, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 280, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 279, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 278, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 278, 8, resFail);
			return false;
		}
	}








	public boolean checkReSavingSalesInvoiceVATVoucher1AfterChangingBatchNoToBatchPVAT1InPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 281, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		Thread.sleep(1000);
		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 281, 6);
		excelReader.setCellData(xlfile, xlSheetName, 281, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 282, 6);
		excelReader.setCellData(xlfile, xlSheetName, 282, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 283, 6);
		excelReader.setCellData(xlfile, xlSheetName, 283, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 284, 6);
		excelReader.setCellData(xlfile, xlSheetName, 284, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 285, 6);
		excelReader.setCellData(xlfile, xlSheetName, 285, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 286, 6);
		excelReader.setCellData(xlfile, xlSheetName, 286, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 287, 6);
		excelReader.setCellData(xlfile, xlSheetName, 287, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 288, 6);
		excelReader.setCellData(xlfile, xlSheetName, 288, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		pre.add(Calendar.DATE, 2);
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 289, 6);
		excelReader.setCellData(xlfile, xlSheetName, 289, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 290, 6);
		excelReader.setCellData(xlfile, xlSheetName, 290, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		
		Thread.sleep(2000);

		String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet(); 

		expMsg.add(excelReader.getCellData(xlSheetName, 291, 6));
		//expMsg.add(excelReader.getCellData(xlSheetName, 292, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 293, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 294, 6));
		String expMessage = expMsg.toString();
		excelReader.setCellData(xlfile, xlSheetName, 291, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		if(actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.equals(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 281, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 281, 8, resFail);
			return false;
		}
	}


	







	// Twenty First Scenario Starts : Try to Deleting Row in Inward Voucher(With Same Batch) After Full Consumption of batch in Outward Document.

	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByAddingRow2WithSameQuantityAndBatchNo() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 295, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 296, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 297, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		select2ndRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 298, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
		select2ndRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 299, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
		select2ndRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 300, 5));
		enter_Batch.sendKeys(Keys.TAB);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select2ndRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 295, 6);
		excelReader.setCellData(xlfile, xlSheetName, 295, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(2000);
		
		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 296, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 297, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 296, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 296, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 297, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 296, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 295, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 295, 8, resFail);
			return false;
		}
	}



	@FindBy(xpath="//i[@class='icon-settings hiconright2']")
	private static WebElement  purchaseVoucherVatSetting;
	
	@FindBy(xpath="//a[contains(text(),'Miscellaneous')]")
	private static WebElement  purchaseVoucherVatMiscellaneous;
	
	@FindBy(xpath="//button[contains(text(),'Posting Details')]")
	private static WebElement  postingDetails;
	
	@FindBy(xpath="//*[@id='misc_PostingUpdateFA']")
	private static WebElement  updatedFaIsSelected;
	
	@FindBy(xpath="//*[@id='misc_PostingUpdateFA']//..//span")
	private static WebElement  updatedFa;

	public boolean checkDisableUpdateFATag() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);
		
		click(purchaseVoucherVatSetting);
		Thread.sleep(2500);
		
		click(purchaseVoucherVatMiscellaneous);
		Thread.sleep(2000);
		ClickUsingJs(postingDetails);
		Thread.sleep(1500);
		if(updatedFaIsSelected.isSelected()==true)
		{
			click(updatedFa);
		}
		
		click(updateBtn);

		String expMessage="Data saved successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			Thread.sleep(1500);
			click(voucherhomeCloseBtn);
			
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			Thread.sleep(1500);
			click(voucherhomeCloseBtn);
			return false;
		}
	}




	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByDeletingRow1WhichHasConsumedFullyInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		checkDisableUpdateFATag();
		Thread.sleep(1500);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 301, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstRowIndex));
		//firstRowIndex.click();
		getAction().contextClick(firstRowIndex).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.
		
		sleep(2000);
		
		/*click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		Thread.sleep(2000);*/
		String expMessage = excelReader.getCellData(xlSheetName, 301, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 301, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 301, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 301, 8, resFail);
			return false;
		}
	}











	// Twenty Second Scenario Starts : Try to Deleting Row in Inward Voucher(With Same batch) After suspending and Resaving Outward Document With Full Consumption of batch

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForTwentySecondScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 302, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		Thread.sleep(2000);
		
		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 302, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 303, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 302, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 304, 6);
		excelReader.setCellData(xlfile, xlSheetName, 304, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 302, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 302, 8, resFail);
			return false;
		}
	}








	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByDeletingRow1WhichHasConsumedFullyInSalesInvoiceAfterSuspendingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 305, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstRowIndex));
		//firstRowIndex.click();
		getAction().contextClick(firstRowIndex).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		
		/*click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);*/

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 305, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 306, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 305, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 305, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 306, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 305, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 305, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 305, 8, resFail);
			return false;
		}
	}









	public boolean checkReSavingSalesInvoiceVATVoucher1AfterDeletingARowInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 307, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		String expMessage = excelReader.getCellData(xlSheetName, 307, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 307, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 307, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 307, 8, resFail);
			return false;
		}
	}











	// Twenty Third Scenario Starts : Try to Deleting Row in Inward Voucher After Full Consumption of batch in Outward Document.

	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByAddingRow2WithSameQuantityAndDifferentBatchNo() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		checkEnableUpdateFATag();
		Thread.sleep(1500);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 308, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 309, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 310, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		select2ndRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 311, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
		select2ndRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 312, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
		select2ndRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 313, 5));
		enter_Batch.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select2ndRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 308, 6);
		excelReader.setCellData(xlfile, xlSheetName, 308, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		
		click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 309, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 310, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 309, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 309, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 310, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 309, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 308, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 308, 8, resFail);
			return false;
		}
	}







	public boolean checkReSavingSalesInvoiceVATVoucher1AfterAddingRow2WithBatchNoAsBatchPVAT2InPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 314, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

		int batchCount = batchPopupBatchNoList.size();

		for (int i = 0; i < batchCount; i++) 
		{
			String data = batchPopupBatchNoList.get(i).getText();
			System.out.println(i+1+" : "+data);

			if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 315, 5))) 
			{
				getAction().doubleClick(batchPopupRowNosList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		Thread.sleep(2000);

		 String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet(); 

		expMsg.add(excelReader.getCellData(xlSheetName, 314, 6));
		//expMsg.add(excelReader.getCellData(xlSheetName, 315, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 316, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 317, 6));
		String expMessage = expMsg.toString();
		excelReader.setCellData(xlfile, xlSheetName, 314, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		if(actMessage.equals(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 314, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 314, 8, resFail);
			return false;
		}
	}








	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByDeletingRow2WhichHasConsumedFullyInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 318, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		//secondRowIndex.click();
		getAction().contextClick(secondRowIndex).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		
		click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(2000);

		String expMessage = excelReader.getCellData(xlSheetName, 318, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 318, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 318, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 318, 8, resFail);
			return false;
		}
	}










	// Twenty Fourth Scenario Starts : Try to Deleting Row in Inward Voucher After suspending and Resaving Outward Document With Full Consumption of batch


	public boolean checkSuspendingSalesInvoiceVATVoucher1ForTwentyFourthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 319, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 319, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 320, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 319, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 321, 6);
		excelReader.setCellData(xlfile, xlSheetName, 321, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 319, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 319, 8, resFail);
			return false;
		}
	}






	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByDeletingRow2WhichHasConsumedFullyInSalesInvoiceAfterSuspendingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 322, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		//secondRowIndex.click();
		getAction().contextClick(secondRowIndex).build().perform();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		
		click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(2000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 322, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 323, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 322, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 322, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 323, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 322, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
		
		

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 322, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 322, 8, resFail);
			return false;
		}
	}







	public boolean checkReSavingSalesInvoiceVATVoucher1AfterDeletingARow2InPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 324, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);
		
		String expMessage = excelReader.getCellData(xlSheetName, 324, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 324, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 324, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 324, 8, resFail);
			return false;
		}
	}









	// Twenty Fifth Scenario Starts : Try to Adding and Deleting Row in inward Document After Consumption of Batch in Outward Document

	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByAdding2ndRowWithSameQuantityAndDifferentBatchNo() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 325, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 326, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 327, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		select2ndRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 328, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
		select2ndRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 329, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
		select2ndRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 330, 5));
		enter_Batch.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select2ndRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 325, 6);
		excelReader.setCellData(xlfile, xlSheetName, 325, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		
		click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(2000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 326, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 327, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 326, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 326, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 327, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 326, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 325, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 325, 8, resFail);
			return false;
		}
	}







	public boolean checkSavingSalesInvoiceVATVoucher1WithQuantityAs11AfterAddingRow2WithBatchNoAsBatchPVAT2InPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 331, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		enter_AQ.click();
		enter_AQ.sendKeys(Keys.END);
		enter_AQ.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 332, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		enter_FQ.click();
		enter_FQ.sendKeys(Keys.END);
		enter_FQ.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 333, 5));
		enter_FQ.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		String actRow1Batch = select1stRow_19thColumn.getText();
		String expRow1Batch = excelReader.getCellData(xlSheetName, 331, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 331, 7, actRow1Batch);

		String actRow2Batch = select2ndRow_19thColumn.getText();
		String expRow2Batch = excelReader.getCellData(xlSheetName, 332, 6);
		excelReader.setCellData(xlfile, xlSheetName, 332, 7, actRow2Batch);

		System.out.println("1st Row Batch No : "+actRow1Batch+"  Value Expected  "+expRow1Batch);
		System.out.println("2nd Row Batch No : "+actRow2Batch+"  Value Expected  "+expRow2Batch);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		
		Thread.sleep(2000);

		String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet(); 

		expMsg.add(excelReader.getCellData(xlSheetName, 333, 6));
		//expMsg.add(excelReader.getCellData(xlSheetName, 334, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 335, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 336, 6));
		String expMessage = expMsg.toString();
		excelReader.setCellData(xlfile, xlSheetName, 333, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		if(actRow1Batch.equalsIgnoreCase(expRow1Batch) && actRow2Batch.equalsIgnoreCase(expRow2Batch)
				&& actMessage.equals(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 331, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 331, 8, resFail);
			return false;
		}
	}








	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByDeleting2ndRowWhichHasConsumedInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 337, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		//secondRowIndex.click();
		getAction().contextClick(secondRowIndex).build().perform();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		
		click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		Thread.sleep(2000);

		String expMessage = excelReader.getCellData(xlSheetName, 337, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 337, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 337, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 337, 8, resFail);
			return false;
		}
	}









	// Twenty Sixth Scenario Starts : Try to Adding and Deleting Row in inward Document After Suspending and Resaving Outward Document With Consumption of Batch

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForTwentySixthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 338, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 338, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 339, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 338, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 340, 6);
		excelReader.setCellData(xlfile, xlSheetName, 340, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 338, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 338, 8, resFail);
			return false;
		}
	}






	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByDeleting2ndWhichHasConsumedInSalesInvoiceAfterSuspendingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 341, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		//secondRowIndex.click();
		getAction().contextClick(secondRowIndex).build().perform();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		
		click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 341, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 342, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 341, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 341, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 342, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 341, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 341, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 341, 8, resFail);
			return false;
		}
	}







	public boolean checkReSavingSalesInvoiceVATVoucher1AfterDeleting2ndRowInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 343, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		String expMessage = excelReader.getCellData(xlSheetName, 343, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 343, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 343, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 343, 8, resFail);
			return false;
		}
	}







	// Twenty Seventh Scenario Starts : Try to Adding and Deleting Row in inward Document(With Same Batch) After Consumption of Batch in Outward Document

	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByAddingRow2WithSameQuantityAndBatchNoForTwentySeventhScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 344, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 345, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 346, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		select2ndRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 347, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
		select2ndRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 348, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
		select2ndRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 349, 5));
		enter_Batch.sendKeys(Keys.TAB);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select2ndRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 344, 6);
		excelReader.setCellData(xlfile, xlSheetName, 344, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		
		click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 345, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 346, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 345, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 345, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 346, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 345, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 344, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 344, 8, resFail);
			return false;
		}
	}





	public boolean checkSavingSalesInvoiceVATVoucher1WithQuantityAs11AfterAddingRow2WithBatchNoAsBatchPVAT1InPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 350, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		//secondRowIndex.click();
		getAction().contextClick(secondRowIndex).build().perform();
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		enter_AQ.click();
		enter_AQ.sendKeys(Keys.END);
		enter_AQ.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 351, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		enter_FQ.click();
		enter_FQ.sendKeys(Keys.END);
		enter_FQ.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 352, 5));
		enter_FQ.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		String actRow1Batch = select1stRow_19thColumn.getText();
		String expRow1Batch = excelReader.getCellData(xlSheetName, 350, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 350, 7, actRow1Batch);

		String actRow2Batch = select2ndRow_19thColumn.getText();
		String expRow2Batch = excelReader.getCellData(xlSheetName, 351, 6);
		excelReader.setCellData(xlfile, xlSheetName, 351, 7, actRow2Batch);

		System.out.println("1st Row Batch No : "+actRow1Batch+"  Value Expected  "+expRow1Batch);
		System.out.println("2nd Row Batch No : "+actRow2Batch+"  Value Expected  "+expRow2Batch);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		
		/*Thread.sleep(2000);

		String actMessage =SavingInBackgroundTrial();
		
		

        HashSet<String> expMsg = new HashSet(); 
     
		expMsg.add(excelReader.getCellData(xlSheetName, 352, 6));
		//expMsg.add(excelReader.getCellData(xlSheetName, 353, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 354, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 355, 6));
		String expMessage = expMsg.toString();
		excelReader.setCellData(xlfile, xlSheetName, 352, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		if(actRow1Batch.equalsIgnoreCase(expRow1Batch) && actRow2Batch.equalsIgnoreCase(expRow2Batch)
				&& actMessage.equals(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 350, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 350, 8, resFail);
			return false;
		}
	}*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actRow1Batch.equalsIgnoreCase(expRow1Batch) && actRow2Batch.equalsIgnoreCase(expRow2Batch)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}






	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByDeleting2ndRowWhichHasConsumedInSalesInvoice1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 356, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		//secondRowIndex.click();
		getAction().contextClick(secondRowIndex).build().perform();
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		
		click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		Thread.sleep(2000);
		String expMessage = excelReader.getCellData(xlSheetName, 356, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 356, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 356, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 356, 8, resFail);
			return false;
		}
	}








	// Twenty Eight Scenario Starts : Try to Adding and Deleting Row in inward Document(With Same batch) After Suspending and Resaving Outward Document With Consumption of Batch

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForTwentyEightScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 357, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 357, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 358, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 357, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(3000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 359, 6);
		excelReader.setCellData(xlfile, xlSheetName, 359, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 357, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 357, 8, resFail);
			return false;
		}
	}
	
	
	public boolean checkEnableUpdateFATag() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);
		
		click(purchaseVoucherVatSetting);
		Thread.sleep(2500);
		
		click(purchaseVoucherVatMiscellaneous);
		Thread.sleep(2000);
		ClickUsingJs(postingDetails);
		Thread.sleep(1500);
		if(updatedFaIsSelected.isSelected()==false)
		{
			click(updatedFa);
		}
		
		click(updateBtn);

		String expMessage="Data saved successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			Thread.sleep(1500);
			click(voucherhomeCloseBtn);
			
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			Thread.sleep(1500);
			click(voucherhomeCloseBtn);
			return false;
		}
	}





	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByDeleting2ndAfterSuspendingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		Thread.sleep(1500);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 360, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		//secondRowIndex.click();
		getAction().contextClick(secondRowIndex).build().perform();
		
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 360, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 361, 6));
         
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 360, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 360, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 361, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 360, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
		
		

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 360, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 360, 8, resFail);
			return false;
		}
	}





	public boolean checkReSavingSalesInvoiceVATVoucherAfterDeleting2ndRowInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 362, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		String expMessage = excelReader.getCellData(xlSheetName, 362, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 362, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 362, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 362, 8, resFail);
			return false;
		}
	}







	// Twenty Ninth Scenario Starts : Try to Consume Quantity Which are Already Consumed by inserting outward Document Prior to Consumed Document.(inserting Doc Between inward and outward)

	public boolean checkEditingAndSavingPurchaseVoucherVATVoucherWithCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 363, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		String DocDate=df.format(cal.getTime());

		System.out.println(" Current Date :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 363, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 364, 6));
         
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 363, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 363, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 364, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 363, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
		

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 363, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 363, 8, resFail);
			return false;
		}
	}





	public boolean checkDeletingSalesInvoiceVATVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 365, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		Thread.sleep(2000);
		getAlert().accept();
		
		Thread.sleep(2000);

		String expMessage =excelReader.getCellData(xlSheetName, 365, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 365, 7, actMessage);

		Thread.sleep(1000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 365, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 365, 8, resFail);
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceVATVoucher1WithDate2DaysMoreThanPresentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 366, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 367, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 368, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 369, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 370, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 371, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 372, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 373, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 366, 6);
		excelReader.setCellData(xlfile, xlSheetName, 366, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 367, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 368, 6));
         
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 367, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 367, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 368, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 367, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 366, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 366, 8, resFail);
			return false;
		}
	}








	public boolean checkBatchPopupInSalesInvoiceVATVoucher2WithDateAsPreviousDateToSalesInvoice1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 374, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 375, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 376, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 377, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 378, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 379, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 380, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 381, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 374, 6);
		excelReader.setCellData(xlfile, xlSheetName, 374, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 375, 6);
		excelReader.setCellData(xlfile, xlSheetName, 375, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 376, 6);
		excelReader.setCellData(xlfile, xlSheetName, 376, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 377, 6);
		excelReader.setCellData(xlfile, xlSheetName, 377, 7, actBalance);

		String actBatchPopupTable = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expBatchPopupTable = excelReader.getCellData(xlSheetName, 378, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 378, 7, actBatchPopupTable);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 379, 6);
		excelReader.setCellData(xlfile, xlSheetName, 379, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 380, 6);
		excelReader.setCellData(xlfile, xlSheetName, 380, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);


		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable.equalsIgnoreCase(expBatchPopupTable) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 374, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 374, 8, resFail);
			return false;
		}
	}











	// Thirtieth Scenario Starts : Try to Resaving Outward Suspended Outward Document after Full Consumption of Batch in Other Outward Document

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForThirtiethScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 382, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		Thread.sleep(2000);

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 382, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 383, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 382, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 384, 6);
		excelReader.setCellData(xlfile, xlSheetName, 384, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 382, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 382, 8, resFail);
			return false;
		}
	}





	public boolean checkSavingSalesInvoiceVATVoucher2WithDate1DaysMoreThanSalesInvoiceVoucher1Date() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen Opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 3); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 385, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 386, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 387, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 388, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 389, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 390, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 391, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 392, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 385, 6);
		excelReader.setCellData(xlfile, xlSheetName, 385, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 386, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 387, 6));
         
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 386, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 386, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 387, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 386, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
		
		

		System.out.println("1st Row Batch No : "+actBatchNo    +"  value expected  "+expBatchNo);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			excelReader.setCellData(xlfile, xlSheetName, 385, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			excelReader.setCellData(xlfile, xlSheetName, 385, 8, resFail);
			return false;
		}
	}







	public boolean checkReSavingSalesInvoiceVATVoucher1AfterSavingSalesInvoiceVoucher2WithSameValues() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 393, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		String expMessage = excelReader.getCellData(xlSheetName, 393, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 393, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 393, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 393, 8, resFail);
			return false;
		}
	}








	// Thirty First Scenario Starts : Try to Suspending Stock Transfer Voucher After Full Consumption of Batch

	public boolean checkDeletingSalesInvoiceVATVouchersForThirtyFirstScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_HeaderChkBox));
		grid_HeaderChkBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();
		
		Thread.sleep(2000);

		getWaitForAlert();
		Thread.sleep(1000);
		getAlert().accept();
		
		Thread.sleep(2000);

		String expMessage2 = excelReader.getCellData(xlSheetName, 394, 6);
		String expMessage1 = excelReader.getCellData(xlSheetName, 395, 6);
		String actMessage = checkValidationMessage(expMessage2);
		excelReader.setCellData(xlfile, xlSheetName, 394, 7, actMessage);

		Thread.sleep(1000);

		if(actMessage.startsWith(expMessage2) && actMessage.endsWith(expMessage1)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 394, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 394, 8, resFail);
			return false;
		}
	}






	public boolean checkBatchPopupInStockTransferVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		Thread.sleep(1000);

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferWarehouse1));
		stockTransferWarehouse1.click();
		stockTransferWarehouse1.sendKeys(Keys.SPACE);
		Thread.sleep(1000);
		stockTransferWarehouse1.sendKeys(excelReader.getCellData(xlSheetName, 396, 5));
		Thread.sleep(2000);
		stockTransferWarehouse1.sendKeys(Keys.TAB);

		/*int warehouse1Count=st_warehouse1HeaderComboList.size();

		for (int i = 0; i < warehouse1Count; i++) 
		{
			String warehouse=st_warehouse1HeaderComboList.get(i).getText();

			if (warehouse.equalsIgnoreCase("HYDERABAD")) 
			{
				st_warehouse1HeaderComboList.get(i).click();
				stockTransferWarehouse1.sendKeys(Keys.TAB);
				break;
			}
		}*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Warehouse2Txt));
		enter_Warehouse2Txt.sendKeys(excelReader.getCellData(xlSheetName, 397, 5));
		Thread.sleep(2000);
		enter_Warehouse2Txt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 398, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 399, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
		select1stRow_6thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 400, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 396, 6);
		excelReader.setCellData(xlfile, xlSheetName, 396, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 397, 6);
		excelReader.setCellData(xlfile, xlSheetName, 397, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 398, 6);
		excelReader.setCellData(xlfile, xlSheetName, 398, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 399, 6);
		excelReader.setCellData(xlfile, xlSheetName, 399, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 400, 6);
		excelReader.setCellData(xlfile, xlSheetName, 400, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 401, 6);
		excelReader.setCellData(xlfile, xlSheetName, 401, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 402, 6);
		excelReader.setCellData(xlfile, xlSheetName, 402, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 403, 6);
		excelReader.setCellData(xlfile, xlSheetName, 403, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String PurchasetDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = PurchasetDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 404, 6);
		excelReader.setCellData(xlfile, xlSheetName, 404, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 405, 6);
		excelReader.setCellData(xlfile, xlSheetName, 405, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted))
		{
			excelReader.setCellData(xlfile, xlSheetName, 396, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 396, 8, resFail);
			return false;
		}
	}







	public boolean checkSavingStockTransferVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 406, 6);
		excelReader.setCellData(xlfile, xlSheetName, 406, 7, actItemName);
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 407, 6);
		excelReader.setCellData(xlfile, xlSheetName, 407, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 408, 6);
		excelReader.setCellData(xlfile, xlSheetName, 408, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 409, 6);
		excelReader.setCellData(xlfile, xlSheetName, 409, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 410, 6);
		excelReader.setCellData(xlfile, xlSheetName, 410, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 411, 6);
		excelReader.setCellData(xlfile, xlSheetName, 411, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 412, 6);
		excelReader.setCellData(xlfile, xlSheetName, 412, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 413, 6);
		excelReader.setCellData(xlfile, xlSheetName, 413, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String PurchaseDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = PurchaseDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 414, 6);
		excelReader.setCellData(xlfile, xlSheetName, 414, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 415, 6);
		excelReader.setCellData(xlfile, xlSheetName, 415, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		String actBatchNo=select1stRow_8thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 416, 6);
		excelReader.setCellData(xlfile, xlSheetName, 416, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 417, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 418, 6));
         
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 417, 7, actMessage);
         
		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 417, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 418, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 417, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo    +"  value expected  "+expBatchNo);

		Thread.sleep(2000);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 406, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 406, 8, resFail);
			return false;
		}
	}









	public boolean checkBatchPopupIsDisplayingWithValuesInSalesInvoiceVATVoucher1WithWarehouseAsSecunderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 419, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 420, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 421, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 422, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 423, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 424, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 425, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 426, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 419, 6);
		excelReader.setCellData(xlfile, xlSheetName, 419, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 420, 6);
		excelReader.setCellData(xlfile, xlSheetName, 420, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 421, 6);
		excelReader.setCellData(xlfile, xlSheetName, 421, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 422, 6);
		excelReader.setCellData(xlfile, xlSheetName, 422, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 423, 6);
		excelReader.setCellData(xlfile, xlSheetName, 423, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 424, 6);
		excelReader.setCellData(xlfile, xlSheetName, 424, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 425, 6);
		excelReader.setCellData(xlfile, xlSheetName, 425, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 426, 6);
		excelReader.setCellData(xlfile, xlSheetName, 426, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 427, 6);
		excelReader.setCellData(xlfile, xlSheetName, 427, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 428, 6);
		excelReader.setCellData(xlfile, xlSheetName, 428, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 419, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 419, 8, resFail);
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher1WithWarehouseAsSecunderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 429, 6);
		excelReader.setCellData(xlfile, xlSheetName, 429, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 430, 6);
		excelReader.setCellData(xlfile, xlSheetName, 430, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 431, 6);
		excelReader.setCellData(xlfile, xlSheetName, 431, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 432, 6);
		excelReader.setCellData(xlfile, xlSheetName, 432, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 433, 6);
		excelReader.setCellData(xlfile, xlSheetName, 433, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 434, 6);
		excelReader.setCellData(xlfile, xlSheetName, 434, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 435, 6);
		excelReader.setCellData(xlfile, xlSheetName, 435, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 436, 6);
		excelReader.setCellData(xlfile, xlSheetName, 436, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 437, 6);
		excelReader.setCellData(xlfile, xlSheetName, 437, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 438, 6);
		excelReader.setCellData(xlfile, xlSheetName, 438, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 439, 6);
		excelReader.setCellData(xlfile, xlSheetName, 439, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 440, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 441, 6));
         
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 440, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 440, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 441, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 440, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 429, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 429, 8, resFail);
			return false;
		}
	}








	public boolean checkSuspendingStockTransferVoucherFromEntryAndHomePageAfterConsumingInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 442, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		Thread.sleep(2000);

		String expEntrySuspendMessage =excelReader.getCellData(xlSheetName, 442, 6);
		String actEntrySuspendMessage = checkValidationMessage(expEntrySuspendMessage);
		excelReader.setCellData(xlfile, xlSheetName, 442, 7, actEntrySuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actEntrySuspendStatus = grid_1stRowSuspendStatus.getText();
		String expEntrySuspendStatus = excelReader.getCellData(xlSheetName, 443, 6);
		excelReader.setCellData(xlfile, xlSheetName, 443, 7, actEntrySuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actEntrySuspendStatus+"  Expected  "+expEntrySuspendStatus);

		if (grid_ChkBox1.isSelected()==false) 
		{
			grid_ChkBox1.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();
		
		Thread.sleep(2000);

		String expHomeSuspendMessage =excelReader.getCellData(xlSheetName, 444, 6);
		String actHomeSuspendMessage = checkValidationMessage(expHomeSuspendMessage);
		excelReader.setCellData(xlfile, xlSheetName, 444, 7, actHomeSuspendMessage);

		Thread.sleep(2000);

		String actHomeSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expHomeSuspendStatus = excelReader.getCellData(xlSheetName, 445, 6);
		excelReader.setCellData(xlfile, xlSheetName, 445, 7, actHomeSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Home Page : "+actHomeSuspendStatus+"  Expected  "+expHomeSuspendStatus);

		if(actEntrySuspendMessage.equalsIgnoreCase(expEntrySuspendMessage) && actEntrySuspendStatus.equalsIgnoreCase(expEntrySuspendStatus)
				&& actHomeSuspendMessage.equalsIgnoreCase(expHomeSuspendMessage) && actHomeSuspendStatus.equalsIgnoreCase(expHomeSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 442, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 442, 8, resFail);
			return false;
		}
	}










	// Thirty Second Scenario Starts : Try to Delete Stock Transfer Voucher After Full Consumption of Batch  (From Entry and Homepage)

	public boolean checkDeletingStockTransferVoucherFromEntryPageAfterConsumingInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 446, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);
		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		getAlert().accept();
		
		Thread.sleep(2000);

		String expMessage =excelReader.getCellData(xlSheetName, 446, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 446, 7, actMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 446, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 446, 8, resFail);
			return false;
		}
	}





	public boolean checkDeletingStockTransferVoucherFromHomePageAfterConsumingInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		if (grid_ChkBox1.isSelected()==false) 
		{
			grid_ChkBox1.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		getAlert().accept();
		
		Thread.sleep(2000);

		String expMessage =excelReader.getCellData(xlSheetName, 447, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 447, 7, actMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 447, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 447, 8, resFail);
			return false;
		}
	}







	// Thirty Third Scenario Starts : Try to Change Quantity in Stock transfer Voucher After Full Consumption of batch

	public boolean checkBatchPopupInStockTransferVoucherAfterChangingQuantityTo5AndSaving() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 448, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		select1stRow_4thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 449, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
		select1stRow_6thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 448, 6);
		excelReader.setCellData(xlfile, xlSheetName, 448, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 449, 6);
		excelReader.setCellData(xlfile, xlSheetName, 449, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 450, 6);
		excelReader.setCellData(xlfile, xlSheetName, 450, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 451, 6);
		excelReader.setCellData(xlfile, xlSheetName, 451, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 452, 6);
		excelReader.setCellData(xlfile, xlSheetName, 452, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 453, 6);
		excelReader.setCellData(xlfile, xlSheetName, 453, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 454, 6);
		excelReader.setCellData(xlfile, xlSheetName, 454, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 455, 6);
		excelReader.setCellData(xlfile, xlSheetName, 455, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String PurchasetDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = PurchasetDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 456, 6);
		excelReader.setCellData(xlfile, xlSheetName, 456, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 457, 6);
		excelReader.setCellData(xlfile, xlSheetName, 457, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);

		String expMessage =excelReader.getCellData(xlSheetName, 458, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 458, 7, actMessage);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)

				&& actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 448, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 448, 8, resFail);
			return false;
		}
	}







	// Thirty Fourth Scenario Starts : Try to ReSave Suspended Stock Transfer Voucher After Full Consumption of batch

	public boolean checkDeletingSalesInvoiceVATVouchersForThirtyThirdScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_HeaderChkBox));
		grid_HeaderChkBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		Thread.sleep(1000);
		getAlert().accept();

		Thread.sleep(2000);
		String expMessage1 = excelReader.getCellData(xlSheetName, 459, 6);
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 459, 7, actMessage);

		Thread.sleep(1000);

		if(actMessage.equalsIgnoreCase(expMessage1)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 459, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 459, 8, resFail);
			return false;
		}
	}








	public boolean checkSuspendingStockTransferVoucherFromEntryPageAfterDeletingVoucherInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 460, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		Thread.sleep(2000);
		
		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		Thread.sleep(2000);

		String expEntrySuspendMessage1 = excelReader.getCellData(xlSheetName, 460, 6);
		String expEntrySuspendMessage2 = excelReader.getCellData(xlSheetName, 461, 6);
		String actEntrySuspendMessage = checkValidationMessage(expEntrySuspendMessage2);
		
		excelReader.setCellData(xlfile, xlSheetName, 460, 7, actEntrySuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actEntrySuspendStatus = grid_1stRowSuspendStatus.getText();
		String expEntrySuspendStatus = excelReader.getCellData(xlSheetName, 462, 6);
		excelReader.setCellData(xlfile, xlSheetName, 462, 7, actEntrySuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actEntrySuspendStatus+"  Expected  "+expEntrySuspendStatus);

		if(actEntrySuspendMessage.startsWith(expEntrySuspendMessage1) && actEntrySuspendMessage.endsWith(expEntrySuspendMessage2) 
				&& actEntrySuspendStatus.equalsIgnoreCase(expEntrySuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 460, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 460, 8, resFail);
			return false;
		}
	}







	public boolean checkBatchPopupInSalesInvoiceVATVoucher1WithWarehouseAsHyderabadAfterSuspendingStockTransferVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 463, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 464, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 465, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 466, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 467, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 468, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 469, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 470, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 463, 6);
		excelReader.setCellData(xlfile, xlSheetName, 463, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 464, 6);
		excelReader.setCellData(xlfile, xlSheetName, 464, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 465, 6);
		excelReader.setCellData(xlfile, xlSheetName, 465, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 466, 6);
		excelReader.setCellData(xlfile, xlSheetName, 466, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 467, 6);
		excelReader.setCellData(xlfile, xlSheetName, 467, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 468, 6);
		excelReader.setCellData(xlfile, xlSheetName, 468, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 469, 6);
		excelReader.setCellData(xlfile, xlSheetName, 469, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 470, 6);
		excelReader.setCellData(xlfile, xlSheetName, 470, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 471, 6);
		excelReader.setCellData(xlfile, xlSheetName, 471, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 472, 6);
		excelReader.setCellData(xlfile, xlSheetName, 472, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 463, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 463, 8, resFail);
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher1WithWarehouseAsHyderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 473, 6);
		excelReader.setCellData(xlfile, xlSheetName, 473, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 474, 6);
		excelReader.setCellData(xlfile, xlSheetName, 474, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 475, 6);
		excelReader.setCellData(xlfile, xlSheetName, 475, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 476, 6);
		excelReader.setCellData(xlfile, xlSheetName, 476, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 477, 6);
		excelReader.setCellData(xlfile, xlSheetName, 477, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 478, 6);
		excelReader.setCellData(xlfile, xlSheetName, 478, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 479, 6);
		excelReader.setCellData(xlfile, xlSheetName, 479, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 480, 6);
		excelReader.setCellData(xlfile, xlSheetName, 480, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 481, 6);
		excelReader.setCellData(xlfile, xlSheetName, 481, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 482, 6);
		excelReader.setCellData(xlfile, xlSheetName, 482, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 483, 6);
		excelReader.setCellData(xlfile, xlSheetName, 483, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 484, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 485, 6));
         
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 484, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 484, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 485, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 484, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
		
		

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 473, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 473, 8, resFail);
			return false;
		}
	}









	public boolean checkResavingStockTransferVoucherAfterConsumingWithWarehouseAsHyderabadInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 486, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);
		
		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);

		String expMessage =excelReader.getCellData(xlSheetName, 486, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 486, 7, actMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 486, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 486, 8, resFail);
			return false;
		}
	}








	// Thirty Fifth Scenario Starts : Try to Suspend Inward Document After Stock transfer

	public boolean checkDeletingSalesInvoiceVATVouchersForThirtyFifthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_HeaderChkBox));
		grid_HeaderChkBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		
		getWaitForAlert();
		Thread.sleep(1000);
		getAlert().accept();
		
		Thread.sleep(2000);

		String expMessage1 = excelReader.getCellData(xlSheetName, 487, 6);
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 487, 7, actMessage);

		Thread.sleep(1000);

		if(actMessage.equalsIgnoreCase(expMessage1)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 487, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 487, 8, resFail);
			return false;
		}
	}








	public boolean checkResavingStockTransferVoucherAfterDeletingSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 488, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		
		 Thread.sleep(2000);

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 488, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 489, 6));
         
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 488, 7, actMessage);
         
		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 488, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 489, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 488, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 488, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 488, 8, resFail);
			return false;
		}
	}








	public boolean checkSuspendingPurchaseVoucherVATVoucher1InEntryAndHomePageAfterConsumingFullyInStockTransferfVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 490, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		
		Thread.sleep(2000);
		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		Thread.sleep(2000);

		String expSuspendMessage =excelReader.getCellData(xlSheetName, 490, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage);
		excelReader.setCellData(xlfile, xlSheetName, 490, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 491, 6);
		excelReader.setCellData(xlfile, xlSheetName, 491, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if (grid_ChkBox1.isSelected()==false) 
		{
			grid_ChkBox1.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();
		
		Thread.sleep(2000);

		String expHomeSuspendMessage =excelReader.getCellData(xlSheetName, 492, 6);
		String actHomeSuspendMessage = checkValidationMessage(expHomeSuspendMessage);
		excelReader.setCellData(xlfile, xlSheetName, 492, 7, actHomeSuspendMessage);

		Thread.sleep(2000);

		String actHomeSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expHomeSuspendStatus = excelReader.getCellData(xlSheetName, 493, 6);
		excelReader.setCellData(xlfile, xlSheetName, 493, 7, actHomeSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Home Page : "+actHomeSuspendStatus+"  Expected  "+expHomeSuspendStatus);

		if(actSuspendMessage.equalsIgnoreCase(expSuspendMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)
				&& actHomeSuspendMessage.equalsIgnoreCase(expHomeSuspendMessage) && actHomeSuspendStatus.equalsIgnoreCase(expHomeSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 490, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 490, 8, resFail);
			return false;
		}
	}









	// Thirty Sixth Scenario Starts : Try to Suspend Inward Document After Suspending Stock Transfer

	public boolean checkBatchPopupInSalesInvoiceVATVoucher1WithWarehouseAsSecunderabadAfterResavingStockTransferVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 494, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 495, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 496, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 497, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 498, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 499, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 500, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 501, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 494, 6);
		excelReader.setCellData(xlfile, xlSheetName, 494, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 495, 6);
		excelReader.setCellData(xlfile, xlSheetName, 495, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 496, 6);
		excelReader.setCellData(xlfile, xlSheetName, 496, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 497, 6);
		excelReader.setCellData(xlfile, xlSheetName, 497, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 498, 6);
		excelReader.setCellData(xlfile, xlSheetName, 498, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 499, 6);
		excelReader.setCellData(xlfile, xlSheetName, 499, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 500, 6);
		excelReader.setCellData(xlfile, xlSheetName, 500, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 501, 6);
		excelReader.setCellData(xlfile, xlSheetName, 501, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 502, 6);
		excelReader.setCellData(xlfile, xlSheetName, 502, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 503, 6);
		excelReader.setCellData(xlfile, xlSheetName, 503, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 494, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 494, 8, resFail);
			return false;
		}
	}






	public boolean checkSavingSalesInvoiceVATVoucher1WithWarehouseAsSecunderabadAfterResavingStockTransferVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 504, 6);
		excelReader.setCellData(xlfile, xlSheetName, 504, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 505, 6);
		excelReader.setCellData(xlfile, xlSheetName, 505, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 506, 6);
		excelReader.setCellData(xlfile, xlSheetName, 506, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 507, 6);
		excelReader.setCellData(xlfile, xlSheetName, 507, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 508, 6);
		excelReader.setCellData(xlfile, xlSheetName, 508, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 509, 6);
		excelReader.setCellData(xlfile, xlSheetName, 509, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 510, 6);
		excelReader.setCellData(xlfile, xlSheetName, 510, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 511, 6);
		excelReader.setCellData(xlfile, xlSheetName, 511, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 512, 6);
		excelReader.setCellData(xlfile, xlSheetName, 512, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 513, 6);
		excelReader.setCellData(xlfile, xlSheetName, 513, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 514, 6);
		excelReader.setCellData(xlfile, xlSheetName, 514, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 515, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 516, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 515, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 515, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 516, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 515, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 504, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 504, 8, resFail);
			return false;
		}
	}







	public boolean checkSuspendingStockTransferVoucherFromEntryPageAfterSavingSalesInvoiceVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 517, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);
		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		Thread.sleep(2000);

		String expSuspendMessage =excelReader.getCellData(xlSheetName, 517, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage);
		excelReader.setCellData(xlfile, xlSheetName, 517, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 518, 6);
		excelReader.setCellData(xlfile, xlSheetName, 518, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if (grid_ChkBox1.isSelected()==false) 
		{
			grid_ChkBox1.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();
		
		Thread.sleep(2000);

		String expHomeSuspendMessage =excelReader.getCellData(xlSheetName, 519, 6);
		String actHomeSuspendMessage = checkValidationMessage(expHomeSuspendMessage);
		excelReader.setCellData(xlfile, xlSheetName, 519, 7, actHomeSuspendMessage);

		Thread.sleep(2000);

		String actHomeSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expHomeSuspendStatus = excelReader.getCellData(xlSheetName, 520, 6);
		excelReader.setCellData(xlfile, xlSheetName, 520, 7, actHomeSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Home Page : "+actHomeSuspendStatus+"  Expected  "+expHomeSuspendStatus);

		if(actSuspendMessage.equalsIgnoreCase(expSuspendMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)
				&& actHomeSuspendMessage.equalsIgnoreCase(expHomeSuspendMessage) && actHomeSuspendStatus.equalsIgnoreCase(expHomeSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 517, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 517, 8, resFail);
			return false;
		}
	}








	public boolean checkSuspendingPurchaseVoucherVATVoucher1InEntryAndHomePageAfterConsumingFullyInSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 521, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);
		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		Thread.sleep(2000);

		String expSuspendMessage =excelReader.getCellData(xlSheetName, 521, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage);
		excelReader.setCellData(xlfile, xlSheetName, 521, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 522, 6);
		excelReader.setCellData(xlfile, xlSheetName, 522, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if (grid_ChkBox1.isSelected()==false) 
		{
			grid_ChkBox1.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();
		Thread.sleep(2000);

		String expHomeSuspendMessage =excelReader.getCellData(xlSheetName, 523, 6);
		String actHomeSuspendMessage = checkValidationMessage(expHomeSuspendMessage);
		excelReader.setCellData(xlfile, xlSheetName, 523, 7, actHomeSuspendMessage);

		Thread.sleep(2000);

		String actHomeSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expHomeSuspendStatus = excelReader.getCellData(xlSheetName, 524, 6);
		excelReader.setCellData(xlfile, xlSheetName, 524, 7, actHomeSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Home Page : "+actHomeSuspendStatus+"  Expected  "+expHomeSuspendStatus);

		if(actSuspendMessage.equalsIgnoreCase(expSuspendMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)
				&& actHomeSuspendMessage.equalsIgnoreCase(expHomeSuspendMessage) && actHomeSuspendStatus.equalsIgnoreCase(expHomeSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 521, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 521, 8, resFail);
			return false;
		}
	}










	// Thirty Seventh Scenario Starts : Try to Deleting Inward Document After Suspending Stock Transfer

	public boolean checkDeletingPurchaseVoucherFromEntryPageAfterConsumingInStockTransfer() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 525, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		
		Thread.sleep(2000);
		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();
		

		getWaitForAlert();
		getAlert().accept();
		Thread.sleep(2000);

		String expMessage =excelReader.getCellData(xlSheetName, 525, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 525, 7, actMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 525, 8, resPass);
			return true;
		}
		else
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 525, 8, resFail);
			return false;
		}
	}





	public boolean checkDeletingPurchaseVoucherFromHomePageAfterConsumingInStockTransfer() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		if (grid_ChkBox1.isSelected()==false) 
		{
			grid_ChkBox1.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		getAlert().accept();
		
		Thread.sleep(2000);

		String expMessage =excelReader.getCellData(xlSheetName, 526, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 526, 7, actMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 526, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 526, 8, resFail);
			return false;
		}
	}






	// Thirty Eight Scenario Starts : Try to Resave Suspended Purchases Return Voucher After Full Consumption of batch

	public boolean checkDeletingSalesInvoiceVATVouchersForThirtyEightScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_HeaderChkBox));
		grid_HeaderChkBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		Thread.sleep(1000);
		getAlert().accept();
		
		Thread.sleep(2000);

		String expMessage1 = excelReader.getCellData(xlSheetName, 527, 6);
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 527, 7, actMessage);

		Thread.sleep(1000);

		if(actMessage.equalsIgnoreCase(expMessage1)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 527, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 527, 8, resFail);
			return false;
		}
	}






	public boolean checkDeletingStockTransferVoucherAfterDeletingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_HeaderChkBox));
		grid_HeaderChkBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		Thread.sleep(1000);
		getAlert().accept();

		Thread.sleep(2000);
		
		String expMessage1 = excelReader.getCellData(xlSheetName, 528, 6);
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 528, 7, actMessage);

		Thread.sleep(1000);

		if(actMessage.equalsIgnoreCase(expMessage1)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 528, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 528, 8, resFail);
			return false;
		}
	}






	


	public boolean checkSavingPurchaseReturnsVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 529, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 530, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);
		
		departmentTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText(excelReader.getCellData(xlSheetName, 531, 5));

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 532, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 529, 6);
		excelReader.setCellData(xlfile, xlSheetName, 529, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 530, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 531, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 530, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 530, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 531, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 530, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno +"  value expected  "+expRow1Batchno);

		if(actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 529, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 529, 8, resFail);
			return false;
		}
	}	








	public boolean checkSuspendingPurchaseReturnsVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		Thread.sleep(2000);

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		Thread.sleep(2000);

		String expEntrySuspendMessage1 = excelReader.getCellData(xlSheetName, 533, 6);
		String expEntrySuspendMessage2 = excelReader.getCellData(xlSheetName, 534, 6);
		String actEntrySuspendMessage = checkValidationMessage(expEntrySuspendMessage2);
		excelReader.setCellData(xlfile, xlSheetName, 533, 7, actEntrySuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actEntrySuspendStatus = grid_1stRowSuspendStatus.getText();
		String expEntrySuspendStatus = excelReader.getCellData(xlSheetName, 535, 6);
		excelReader.setCellData(xlfile, xlSheetName, 535, 7, actEntrySuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actEntrySuspendStatus+"  Expected  "+expEntrySuspendStatus);

		if(actEntrySuspendMessage.startsWith(expEntrySuspendMessage1) && actEntrySuspendMessage.endsWith(expEntrySuspendMessage2) 
				&& actEntrySuspendStatus.equalsIgnoreCase(expEntrySuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 533, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 533, 8, resFail);
			return false;
		}
	}








	public boolean checkBatchPopupInSalesInvoiceVATVoucher1AfterSuspendingPurchaseReturnsVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		Thread.sleep(2000);

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 536, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 537, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 538, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 539, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 540, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 541, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 542, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 543, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 536, 6);
		excelReader.setCellData(xlfile, xlSheetName, 536, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 537, 6);
		excelReader.setCellData(xlfile, xlSheetName, 537, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 538, 6);
		excelReader.setCellData(xlfile, xlSheetName, 538, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 539, 6);
		excelReader.setCellData(xlfile, xlSheetName, 539, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 540, 6);
		excelReader.setCellData(xlfile, xlSheetName, 540, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 541, 6);
		excelReader.setCellData(xlfile, xlSheetName, 541, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 542, 6);
		excelReader.setCellData(xlfile, xlSheetName, 542, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 543, 6);
		excelReader.setCellData(xlfile, xlSheetName, 543, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 544, 6);
		excelReader.setCellData(xlfile, xlSheetName, 544, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 545, 6);
		excelReader.setCellData(xlfile, xlSheetName, 545, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 536, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 536, 8, resFail);
			return false;
		}
	}






	public boolean checkSavingSalesInvoiceVATVoucher1AfterSuspendingPurchaseReturnsVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 546, 6);
		excelReader.setCellData(xlfile, xlSheetName, 546, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 547, 6);
		excelReader.setCellData(xlfile, xlSheetName, 547, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 548, 6);
		excelReader.setCellData(xlfile, xlSheetName, 548, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 549, 6);
		excelReader.setCellData(xlfile, xlSheetName, 549, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 550, 6);
		excelReader.setCellData(xlfile, xlSheetName, 550, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 551, 6);
		excelReader.setCellData(xlfile, xlSheetName, 551, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 552, 6);
		excelReader.setCellData(xlfile, xlSheetName, 552, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 553, 6);
		excelReader.setCellData(xlfile, xlSheetName, 553, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 554, 6);
		excelReader.setCellData(xlfile, xlSheetName, 554, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 555, 6);
		excelReader.setCellData(xlfile, xlSheetName, 555, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 556, 6);
		excelReader.setCellData(xlfile, xlSheetName, 556, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		Thread.sleep(2000);
		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 557, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 558, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 557, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 557, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 558, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 557, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 546, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 546, 8, resFail);
			return false;
		}
	}









	public boolean checkReSavingPurchaseReturnsVoucher1AfterSavingSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 559, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);
		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 559, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 559, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 559, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 559, 8, resFail);
			return false;
		}
	}









	// Thirty Ninth Scenario Starts : Try to Suspend Sales Return Voucher After Full Consumption of batch

	public boolean checkSavingSalesReturnsVoucher1WithQuantityAs60() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVoucher));
		salesReturnsVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		Thread.sleep(2000);

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 560, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 561, 5));
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(1000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 560, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 561, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 560, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 560, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 561, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 560, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
		
		

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 560, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 560, 8, resFail);
			return false;
		}
	}










	public boolean checkBatchPopupIsDisplayingWithValuesInSalesInvoiceVATVoucher1Row2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 562, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(Keys.END);
		pvWarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 563, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 564, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
		select2ndRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 565, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
		select2ndRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 566, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
		select2ndRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 562, 6);
		excelReader.setCellData(xlfile, xlSheetName, 562, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 563, 6);
		excelReader.setCellData(xlfile, xlSheetName, 563, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 564, 6);
		excelReader.setCellData(xlfile, xlSheetName, 564, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 565, 6);
		excelReader.setCellData(xlfile, xlSheetName, 565, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 566, 6);
		excelReader.setCellData(xlfile, xlSheetName, 566, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 567, 6);
		excelReader.setCellData(xlfile, xlSheetName, 567, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 568, 6);
		excelReader.setCellData(xlfile, xlSheetName, 568, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 569, 6);
		excelReader.setCellData(xlfile, xlSheetName, 569, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 570, 6);
		excelReader.setCellData(xlfile, xlSheetName, 570, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 571, 6);
		excelReader.setCellData(xlfile, xlSheetName, 571, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 562, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 562, 8, resFail);
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher1WithRow2AndQuantity60() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 572, 6);
		excelReader.setCellData(xlfile, xlSheetName, 572, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 573, 6);
		excelReader.setCellData(xlfile, xlSheetName, 573, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 574, 6);
		excelReader.setCellData(xlfile, xlSheetName, 574, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 575, 6);
		excelReader.setCellData(xlfile, xlSheetName, 575, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 576, 6);
		excelReader.setCellData(xlfile, xlSheetName, 576, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 577, 6);
		excelReader.setCellData(xlfile, xlSheetName, 577, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 578, 6);
		excelReader.setCellData(xlfile, xlSheetName, 578, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 579, 6);
		excelReader.setCellData(xlfile, xlSheetName, 579, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 580, 6);
		excelReader.setCellData(xlfile, xlSheetName, 580, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 581, 6);
		excelReader.setCellData(xlfile, xlSheetName, 581, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 582, 6);
		excelReader.setCellData(xlfile, xlSheetName, 582, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet(); 

		expMsg.add(excelReader.getCellData(xlSheetName, 583, 6));
		//expMsg.add(excelReader.getCellData(xlSheetName, 584, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 585, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 586, 6));
		String expMessage = expMsg.toString();
		excelReader.setCellData(xlfile, xlSheetName, 583, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo)
				&& actMessage.equals(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 572, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 572, 8, resFail);
			return false;
		}
	}*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkSuspendingSalesReturnsVoucher1FromEntryAndHomePageAfterConsumingInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVoucher));
		salesReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 587, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		Thread.sleep(2000);
		
		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		Thread.sleep(2000);

		String expSuspendMessage =excelReader.getCellData(xlSheetName, 587, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage);
		excelReader.setCellData(xlfile, xlSheetName, 587, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 588, 6);
		excelReader.setCellData(xlfile, xlSheetName, 588, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if (grid_ChkBox1.isSelected()==false) 
		{
			grid_ChkBox1.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();
		
		Thread.sleep(2000);

		String expHomeSuspendMessage =excelReader.getCellData(xlSheetName, 589, 6);
		String actHomeSuspendMessage = checkValidationMessage(expHomeSuspendMessage);
		excelReader.setCellData(xlfile, xlSheetName, 589, 7, actHomeSuspendMessage);

		Thread.sleep(2000);

		String actHomeSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expHomeSuspendStatus = excelReader.getCellData(xlSheetName, 590, 6);
		excelReader.setCellData(xlfile, xlSheetName, 590, 7, actHomeSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Home Page : "+actHomeSuspendStatus+"  Expected  "+expHomeSuspendStatus);

		if(actSuspendMessage.equalsIgnoreCase(expSuspendMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)
				&& actHomeSuspendMessage.equalsIgnoreCase(expHomeSuspendMessage) && actHomeSuspendStatus.equalsIgnoreCase(expHomeSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 587, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 587, 8, resFail);
			return false;
		}
	}








	// Fortieth Scenario Starts : Try to Delete Sales Return Voucher After Full Consumption of batch

	public boolean checkDeletingSalesReturnsVoucher1FromEntryAndHomePageAfterConsumingInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVoucher));
		salesReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 591, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		
		Thread.sleep(2000);

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		getAlert().accept();
		
		Thread.sleep(2000);

		String expDeleteMessage =excelReader.getCellData(xlSheetName, 591, 6);
		String actDeleteMessage = checkValidationMessage(expDeleteMessage);
		excelReader.setCellData(xlfile, xlSheetName, 591, 7, actDeleteMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		if (grid_ChkBox1.isSelected()==false) 
		{
			grid_ChkBox1.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		getAlert().accept();
		
		Thread.sleep(2000);

		String expHomeDeleteMessage =excelReader.getCellData(xlSheetName, 592, 6);
		String actHomeDeleteMessage = checkValidationMessage(expHomeDeleteMessage);
		excelReader.setCellData(xlfile, xlSheetName, 592, 7, actHomeDeleteMessage);

		Thread.sleep(2000);

		if(actDeleteMessage.equalsIgnoreCase(expDeleteMessage) && actHomeDeleteMessage.equalsIgnoreCase(expHomeDeleteMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 591, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 591, 8, resFail);
			return false;
		}
	}










	// Forty one Scenario Starts : Try to Delete Sales Return Voucher After Full Consumption of batch With Different Transaction Dates

	public boolean checkSavingPurchaseVoucherVATVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 593, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 594, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 595, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 596, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 597, 5));
		Thread.sleep(2000);
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 598, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 599, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 600, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 6); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 6 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 593, 6);
		excelReader.setCellData(xlfile, xlSheetName, 593, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 594, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 595, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 594, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 594, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 595, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 594, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 593, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 593, 8, resFail);
			return false;
		}
	}








	public boolean checkBatchPopupIsDisplayingWithValuesInSalesInvoiceVATVoucher2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 1 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 601, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 602, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 603, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 604, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(excelReader.getCellData(xlSheetName, 605, 5));
		Thread.sleep(2000);
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 606, 5));
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 607, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 601, 6);
		excelReader.setCellData(xlfile, xlSheetName, 601, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 602, 6);
		excelReader.setCellData(xlfile, xlSheetName, 602, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 603, 6);
		excelReader.setCellData(xlfile, xlSheetName, 603, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 604, 6);
		excelReader.setCellData(xlfile, xlSheetName, 604, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 605, 6);
		excelReader.setCellData(xlfile, xlSheetName, 605, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 606, 6);
		excelReader.setCellData(xlfile, xlSheetName, 606, 7, act1stRowBaseQuantity);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 607, 6);
		excelReader.setCellData(xlfile, xlSheetName, 607, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 608, 6);
		excelReader.setCellData(xlfile, xlSheetName, 608, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 609, 6);
		excelReader.setCellData(xlfile, xlSheetName, 609, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 610, 6);
		excelReader.setCellData(xlfile, xlSheetName, 610, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 601, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 601, 8, resFail);
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher2WithNextDateByConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 611, 6);
		excelReader.setCellData(xlfile, xlSheetName, 611, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 612, 6);
		excelReader.setCellData(xlfile, xlSheetName, 612, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 613, 6);
		excelReader.setCellData(xlfile, xlSheetName, 613, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 614, 6);
		excelReader.setCellData(xlfile, xlSheetName, 614, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 615, 6);
		excelReader.setCellData(xlfile, xlSheetName, 615, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 616, 6);
		excelReader.setCellData(xlfile, xlSheetName, 616, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 617, 6);
		excelReader.setCellData(xlfile, xlSheetName, 617, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 618, 6);
		excelReader.setCellData(xlfile, xlSheetName, 618, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 619, 6);
		excelReader.setCellData(xlfile, xlSheetName, 619, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 620, 6);
		excelReader.setCellData(xlfile, xlSheetName, 620, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		String actBatchNo=select1stRow_12thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 621, 6);
		excelReader.setCellData(xlfile, xlSheetName, 621, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 622, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 623, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 622, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 622, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 623, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 622, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 611, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 611, 8, resFail);
			return false;
		}
	}







	

	public boolean checkSavingSalesReturnsVoucher2WithDateNextToSalesInvoiceAndQuantityAs60() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVATVoucher));
		salesReturnsVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 624, 5));
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
		warehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 625, 5));
		Thread.sleep(2000);
		warehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 626, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 627, 5));
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 628, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsEnter_TaxCode));
		salesReturnsEnter_TaxCode.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(excelReader.getCellData(xlSheetName, 629, 5));
		Thread.sleep(2000);
		enter_SalesAccount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 630, 5));
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 631, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 632, 5));
		enter_Batch.sendKeys(Keys.TAB);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 6 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 624, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 625, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 624, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 624, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 625, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 624, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
		
		

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 625, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 625, 8, resFail);
			return false;
		}
	}









	public boolean checkBatchPopupIsDisplayingWithValuesInSalesInvoiceVATVoucher3() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 3); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 633, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 634, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 635, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 636, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(excelReader.getCellData(xlSheetName, 637, 5));
		Thread.sleep(2000);
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 638, 5));
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 639, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 633, 6);
		excelReader.setCellData(xlfile, xlSheetName, 633, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 634, 6);
		excelReader.setCellData(xlfile, xlSheetName, 634, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 635, 6);
		excelReader.setCellData(xlfile, xlSheetName, 635, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 636, 6);
		excelReader.setCellData(xlfile, xlSheetName, 636, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 637, 6);
		excelReader.setCellData(xlfile, xlSheetName, 637, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 638, 6);
		excelReader.setCellData(xlfile, xlSheetName, 638, 7, act1stRowBaseQuantity);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 639, 6);
		excelReader.setCellData(xlfile, xlSheetName, 639, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 640, 6);
		excelReader.setCellData(xlfile, xlSheetName, 640, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 641, 6);
		excelReader.setCellData(xlfile, xlSheetName, 641, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 642, 6);
		excelReader.setCellData(xlfile, xlSheetName, 642, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 633, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 633, 8, resFail);
			return false;
		}
	}






	


	public boolean checkSavingSalesInvoiceVATVoucher3WithNextDateByConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 643, 6);
		excelReader.setCellData(xlfile, xlSheetName, 643, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 644, 6);
		excelReader.setCellData(xlfile, xlSheetName, 644, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 645, 6);
		excelReader.setCellData(xlfile, xlSheetName, 645, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 646, 6);
		excelReader.setCellData(xlfile, xlSheetName, 646, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 647, 6);
		excelReader.setCellData(xlfile, xlSheetName, 647, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 648, 6);
		excelReader.setCellData(xlfile, xlSheetName, 648, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 649, 6);
		excelReader.setCellData(xlfile, xlSheetName, 649, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 650, 6);
		excelReader.setCellData(xlfile, xlSheetName, 650, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 651, 6);
		excelReader.setCellData(xlfile, xlSheetName, 651, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 652, 6);
		excelReader.setCellData(xlfile, xlSheetName, 652, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		String actBatchNo=select1stRow_12thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 653, 6);
		excelReader.setCellData(xlfile, xlSheetName, 653, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 654, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 655, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 654, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 654, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 655, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 654, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 643, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 643, 8, resFail);
			return false;
		}
	}








	public boolean checkDeletingSalesReturnsVoucher2FromEntryAndHomePageAfterConsumingInSalesInvoice3() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVATVoucher));
		salesReturnsVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 656, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		
		Thread.sleep(2000);

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		getAlert().accept();
		
		Thread.sleep(2000);

		String expDeleteMessage =excelReader.getCellData(xlSheetName, 656, 6);
		String actDeleteMessage = checkValidationMessage(expDeleteMessage);
		excelReader.setCellData(xlfile, xlSheetName, 656, 7, actDeleteMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 657, 5))) 
			{
				if (grid_CheckBoxList.get(i).isSelected()==false) 
				{
					grid_CheckBoxList.get(i).click();
					break;
				}

			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		getAlert().accept();
		
		Thread.sleep(2000);

		String expHomeDeleteMessage =excelReader.getCellData(xlSheetName, 657, 6);
		String actHomeDeleteMessage = checkValidationMessage(expHomeDeleteMessage);
		excelReader.setCellData(xlfile, xlSheetName, 657, 7, actHomeDeleteMessage);

		Thread.sleep(2000);

		if(actDeleteMessage.equalsIgnoreCase(expDeleteMessage) && actHomeDeleteMessage.equalsIgnoreCase(expHomeDeleteMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 656, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 656, 8, resFail);
			return false;
		}
	}









	// Forty Second Scenario Starts : Try to Resave Suspended Shortages in Stocks Voucher After Full Consumption of batch

	public boolean checkSavingPurchaseVoucherVATVoucher3() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 658, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 659, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 660, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 661, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 662, 5));
		Thread.sleep(2000);
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 663, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 664, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 665, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 6); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 6 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 658, 6);
		excelReader.setCellData(xlfile, xlSheetName, 658, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 659, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 660, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 659, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		
		String expMessage1= excelReader.getCellData(xlSheetName, 659, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 660, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 659, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 658, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 658, 8, resFail);
			return false;
		}
	}







	public boolean checkBatchPopupInShortageInStocksVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortagesInStockVoucher));
		shortagesInStockVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 1 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 666, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 667, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 668, 5));
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 669, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 666, 6);
		excelReader.setCellData(xlfile, xlSheetName, 666, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 667, 6);
		excelReader.setCellData(xlfile, xlSheetName, 667, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 668, 6);
		excelReader.setCellData(xlfile, xlSheetName, 668, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 669, 6);
		excelReader.setCellData(xlfile, xlSheetName, 669, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 670, 6);
		excelReader.setCellData(xlfile, xlSheetName, 670, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 671, 6);
		excelReader.setCellData(xlfile, xlSheetName, 671, 7, act1stRowBaseQuantity);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 672, 6);
		excelReader.setCellData(xlfile, xlSheetName, 672, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 673, 6);
		excelReader.setCellData(xlfile, xlSheetName, 673, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 674, 6);
		excelReader.setCellData(xlfile, xlSheetName, 674, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 675, 6);
		excelReader.setCellData(xlfile, xlSheetName, 675, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 666, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 666, 8, resFail);
			return false;
		}
	}







	public boolean checkSavingShortageInStockVoucher1ConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		int actBatchCount = batchPopupBatchNoList.size();
		int expBatchCount = Integer.valueOf(excelReader.getCellData(xlSheetName, 676, 6));
		excelReader.setCellData(xlfile, xlSheetName, 676, 7, Integer.toString(actBatchCount));

		for (int i = 0; i < actBatchCount; i++) 
		{
			String data = batchPopupBatchNoList.get(i).getText();
			System.out.println(i+1+" : "+data);

			if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 676, 5))) 
			{
				getAction().doubleClick(batchPopupRowNosList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 677, 6);
		excelReader.setCellData(xlfile, xlSheetName, 677, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 678, 6);
		excelReader.setCellData(xlfile, xlSheetName, 678, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 679, 6);
		excelReader.setCellData(xlfile, xlSheetName, 679, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 680, 6);
		excelReader.setCellData(xlfile, xlSheetName, 680, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 681, 6);
		excelReader.setCellData(xlfile, xlSheetName, 681, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 682, 6);
		excelReader.setCellData(xlfile, xlSheetName, 682, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 683, 6);
		excelReader.setCellData(xlfile, xlSheetName, 683, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 684, 6);
		excelReader.setCellData(xlfile, xlSheetName, 684, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 685, 6);
		excelReader.setCellData(xlfile, xlSheetName, 685, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 686, 6);
		excelReader.setCellData(xlfile, xlSheetName, 686, 7, actTotalQuantityAdjusted);

		System.out.println("Number of rows Batch Nos: "+actBatchCount             +"  value expected  "+expBatchCount);
		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		
		Thread.sleep(2000);
		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 687, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 688, 6));                
        String expMessage = expMsg.toString();

        excelReader.setCellData(xlfile, xlSheetName, 687, 7, actMessage);
        
		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 687, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 688, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 687, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		Thread.sleep(2000);

		if(actBatchCount==expBatchCount && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 676, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 676, 8, resFail);
			return false;
		}
	}







	public boolean checkSuspendingShortageInStocksVoucher1FromEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		Thread.sleep(2000);

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		Thread.sleep(2000);

		String expEntrySuspendMessage1 = excelReader.getCellData(xlSheetName, 689, 6);
		String expEntrySuspendMessage2 = excelReader.getCellData(xlSheetName, 690, 6);
		String actEntrySuspendMessage = checkValidationMessage(expEntrySuspendMessage2);
		excelReader.setCellData(xlfile, xlSheetName, 689, 7, actEntrySuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actEntrySuspendStatus = grid_1stRowSuspendStatus.getText();
		String expEntrySuspendStatus = excelReader.getCellData(xlSheetName, 691, 6);
		excelReader.setCellData(xlfile, xlSheetName, 691, 7, actEntrySuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actEntrySuspendStatus+"  Expected  "+expEntrySuspendStatus);

		Thread.sleep(2000);

		if(actEntrySuspendMessage.startsWith(expEntrySuspendMessage1) && actEntrySuspendMessage.endsWith(expEntrySuspendMessage2) 
				&& actEntrySuspendStatus.equalsIgnoreCase(expEntrySuspendStatus)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 689, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 689, 8, resFail);
			return false;
		}
	}








	public boolean checkBatchPopupInShortageInStocksVoucher2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 692, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 693, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 694, 5));
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 695, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 692, 6);
		excelReader.setCellData(xlfile, xlSheetName, 692, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 693, 6);
		excelReader.setCellData(xlfile, xlSheetName, 693, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 694, 6);
		excelReader.setCellData(xlfile, xlSheetName, 694, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 695, 6);
		excelReader.setCellData(xlfile, xlSheetName, 695, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 696, 6);
		excelReader.setCellData(xlfile, xlSheetName, 696, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 697, 6);
		excelReader.setCellData(xlfile, xlSheetName, 697, 7, act1stRowBaseQuantity);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 698, 6);
		excelReader.setCellData(xlfile, xlSheetName, 698, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 699, 6);
		excelReader.setCellData(xlfile, xlSheetName, 699, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 700, 6);
		excelReader.setCellData(xlfile, xlSheetName, 700, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 701, 6);
		excelReader.setCellData(xlfile, xlSheetName, 701, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 692, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 692, 8, resFail);
			return false;
		}
	}







	public boolean checkSavingShortageInStockVoucher2ConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		int actBatchCount = batchPopupBatchNoList.size();
		int expBatchCount = Integer.valueOf(excelReader.getCellData(xlSheetName, 702, 6));
		excelReader.setCellData(xlfile, xlSheetName, 702, 7, Integer.toString(actBatchCount));

		for (int i = 0; i < actBatchCount; i++) 
		{
			String data = batchPopupBatchNoList.get(i).getText();
			System.out.println(i+1+" : "+data);

			if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 702, 5))) 
			{
				getAction().doubleClick(batchPopupRowNosList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 703, 6);
		excelReader.setCellData(xlfile, xlSheetName, 703, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 704, 6);
		excelReader.setCellData(xlfile, xlSheetName, 704, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 705, 6);
		excelReader.setCellData(xlfile, xlSheetName, 705, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 706, 6);
		excelReader.setCellData(xlfile, xlSheetName, 706, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 707, 6);
		excelReader.setCellData(xlfile, xlSheetName, 707, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 708, 6);
		excelReader.setCellData(xlfile, xlSheetName, 708, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 709, 6);
		excelReader.setCellData(xlfile, xlSheetName, 709, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 710, 6);
		excelReader.setCellData(xlfile, xlSheetName, 710, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 711, 6);
		excelReader.setCellData(xlfile, xlSheetName, 711, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 712, 6);
		excelReader.setCellData(xlfile, xlSheetName, 712, 7, actTotalQuantityAdjusted);

		System.out.println("Number of rows Batch Nos: "+actBatchCount             +"  value expected  "+expBatchCount);
		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 713, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 714, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 713, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 713, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 714, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 713, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		Thread.sleep(2000);

		if(actBatchCount==expBatchCount && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			excelReader.setCellData(xlfile, xlSheetName, 702, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			excelReader.setCellData(xlfile, xlSheetName, 702, 8, resFail);
			return false;
		}
	}








	public boolean checkResavingSuspendedShortageInStocksVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(1000);
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 715, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);
		
		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(1000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);

		String expMessage = excelReader.getCellData(xlSheetName, 715, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 715, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 715, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 715, 8, resFail);
			return false;
		}
	}



	public static boolean checkLogoutAndLoginWithoutPronghorn() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException 
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt=excelReader.getCellData(xlSheetName, 738, 5);

		String pawslt=excelReader.getCellData(xlSheetName, 739, 5);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		logoutOption.click();

		Thread.sleep(2000);
		/*inetRestart();
		Thread.sleep(12000);*/
		/*prongHornOn();
		Thread.sleep(10000);*/

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		Thread.sleep(2000);
		
		
		String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}


		Thread.sleep(2000);
		
		
		
		
		

		lp.clickOnSignInBtn();

		Thread.sleep(7000);

		String actUserInfo1=userNameDisplay.getText();

		System.out.println("User Info  : "+actUserInfo1);

		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		String getCompanyTxt1=companyName.getText();
		String getLoginCompanyName1=getCompanyTxt1.substring(0, 19);
		System.out.println("company name  :  "+ getLoginCompanyName1);
		companyLogo.click();

		String expUserInfo1           =excelReader.getCellData(xlSheetName, 738, 6);
		String expLoginCompanyName1   =excelReader.getCellData(xlSheetName, 739, 6);
		
		excelReader.setCellData(xlfile, xlSheetName, 738, 7, actUserInfo1);
		excelReader.setCellData(xlfile, xlSheetName, 739, 7, getLoginCompanyName1);

		System.out.println("UserInfo1             : "+actUserInfo1            +" Value Expected : "+expUserInfo1);
		System.out.println("LoginCompanyName1     : "+getLoginCompanyName1    +" Value Expected : "+expLoginCompanyName1);

		if(actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1))
		{
			return true;
		}
		else
		{
			return false;
		}
	}




	public static boolean checkEraseAllTransactionsLogoutAndLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException 
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt=excelReader.getCellData(xlSheetName, 716, 5);

		String pawslt=excelReader.getCellData(xlSheetName, 717, 5);
		
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
		dataMangementMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
		eraseAll.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
		eraseTranscationsRadio.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
		eraseAllOkBtn.click();

		if(getIsAlertPresent())
		{
			getWaitForAlert();

			getAlert().accept();
		}

		String expValidationMsg=excelReader.getCellData(xlSheetName, 716, 6);

		String actValidationMsg=checkValidationMessage(expValidationMsg);
		excelReader.setCellData(xlfile, xlSheetName, 716, 7, actValidationMsg);

		System.out.println("************************************* checkEraseAllTransactions  *********************************");
		System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(3000);
		
		Thread.sleep(2000);
		prongHornOn();
		Thread.sleep(7000);

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		Thread.sleep(2000);
		
		String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}


		Thread.sleep(2000);
		
		
		

		lp.clickOnSignInBtn();

		Thread.sleep(7000);

		String actUserInfo1=userNameDisplay.getText();

		System.out.println("User Info  : "+actUserInfo1);

		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		String getCompanyTxt1=companyName.getText();
		String getLoginCompanyName1=getCompanyTxt1.substring(0, 19);
		System.out.println("company name  :  "+ getLoginCompanyName1);
		companyLogo.click();

		String expUserInfo1           =excelReader.getCellData(xlSheetName, 717, 6);
		String expLoginCompanyName1   =excelReader.getCellData(xlSheetName, 718, 6);
		
		excelReader.setCellData(xlfile, xlSheetName, 717, 7, actUserInfo1);
		excelReader.setCellData(xlfile, xlSheetName, 718, 7, getLoginCompanyName1);

		System.out.println("UserInfo1             : "+actUserInfo1            +" Value Expected : "+expUserInfo1);
		System.out.println("LoginCompanyName1     : "+getLoginCompanyName1    +" Value Expected : "+expLoginCompanyName1);

		if(actValidationMsg.equalsIgnoreCase(expValidationMsg) && actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1))
		{
			excelReader.setCellData(xlfile, xlSheetName, 716, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 716, 8, resFail);
			return false;
		}
	}









	// Scenarios Using "Allow Negative Batch Quantities" Option				
	// Forty Third Scenario Starts : try to Saving Negative batch Quantity Without Enabling Allow Negative batch Quantity Option

	public boolean checkSavingPurchaseVoucherVATVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 719, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 720, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 721, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 722, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 723, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 724, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 725, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 6); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 6 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 719, 6);
		excelReader.setCellData(xlfile, xlSheetName, 719, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 720, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 721, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 720, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 720, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 721, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 720, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 719, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 719, 8, resFail);
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher1WithMoreThanAvailableQuantityInPurchaseVoucherWithoutEnablingAllowNegativeBatchQuantities() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 726, 5));
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 727, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 728, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 729, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 730, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 731, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 732, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 733, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		batchTable1stRow5thCol.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BatchTableQtyAdjusted));
		enter_BatchTableQtyAdjusted.sendKeys(excelReader.getCellData(xlSheetName, 734, 5));
		enter_BatchTableQtyAdjusted.sendKeys(Keys.TAB);

		String expMessage = excelReader.getCellData(xlSheetName, 726, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 726, 7, actMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		System.out.println("Error Message    : "+actMessage        +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 726, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 726, 8, resFail);
			return false;
		}
	}












	// Forth Forth Scenario Starts : try to Saving Negative batch Quantity With Enabling Allow Negative batch Quantity Option and Disable Option After Saving Negative Stock

	public boolean checkEnablingAllowNegativeBatchQuantityOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
		SettingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preference));
		preference.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
		BatchBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(AllowNegativeBatchesQtyChkBox));
		if (AllowNegativeBatchesQtyChkBoxIsSelected.isSelected()==false) 
		{
			AllowNegativeBatchesQtyChkBox.click();
		}

		String actAllowNegBatchQty=Boolean.toString(AllowNegativeBatchesQtyChkBoxIsSelected.isSelected());
		String expAllowNegBatchQty=excelReader.getCellData(xlSheetName, 735, 6);
		excelReader.setCellData(xlfile, xlSheetName, 735, 7, actAllowNegBatchQty);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();

		getWaitForAlert();
		String actAlertTxt=getAlert().getText();
		String expAlertTxt=excelReader.getCellData(xlSheetName, 736, 6);
		
		getAlert().accept();
		excelReader.setCellData(xlfile, xlSheetName, 736, 7, actAlertTxt);

		String expMessage=excelReader.getCellData(xlSheetName, 737, 6);
		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 737, 7, actMessage);

		Thread.sleep(2000);

		System.out.println("AllowNegativeBatchQuantity isSelected : "+actAllowNegBatchQty   +"  value expected  "+expAllowNegBatchQty);
		System.out.println("Alert Text                            : "+actAlertTxt           +"  value expected  "+expAlertTxt);
		System.out.println("Error Message                         : "+actMessage            +"  value expected  "+expMessage);

		if(actAllowNegBatchQty.equalsIgnoreCase(expAllowNegBatchQty) && actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 735, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 735, 8, resFail);
			return false;
		}
	}







	public static boolean checkLogoutAndLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException 
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt=excelReader.getCellData(xlSheetName, 738, 5);

		String pawslt=excelReader.getCellData(xlSheetName, 739, 5);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		logoutOption.click();

		Thread.sleep(2000);
		/*inetRestart();
		Thread.sleep(12000);*/
		prongHornOn();
		Thread.sleep(7000);

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		Thread.sleep(2000);
		
		String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}


		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(7000);

		String actUserInfo1=userNameDisplay.getText();

		System.out.println("User Info  : "+actUserInfo1);

		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		String getCompanyTxt1=companyName.getText();
		String getLoginCompanyName1=getCompanyTxt1.substring(0, 19);
		System.out.println("company name  :  "+ getLoginCompanyName1);
		companyLogo.click();

		String expUserInfo1           =excelReader.getCellData(xlSheetName, 738, 6);
		String expLoginCompanyName1   =excelReader.getCellData(xlSheetName, 739, 6);
		
		excelReader.setCellData(xlfile, xlSheetName, 738, 7, actUserInfo1);
		excelReader.setCellData(xlfile, xlSheetName, 739, 7, getLoginCompanyName1);

		System.out.println("UserInfo1             : "+actUserInfo1            +" Value Expected : "+expUserInfo1);
		System.out.println("LoginCompanyName1     : "+getLoginCompanyName1    +" Value Expected : "+expLoginCompanyName1);

		if(actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1))
		{
			excelReader.setCellData(xlfile, xlSheetName, 738, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 738, 8, resFail);
			return false;
		}
	}









	public boolean checkBatchPopupIsDisplayingWithValuesInSalesInvoiceVATVoucher1AfterEnablingAllowBatchNegativeQuantityOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 740, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 741, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 742, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 743, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 744, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 745, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 746, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 747, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 740, 6);
		excelReader.setCellData(xlfile, xlSheetName, 740, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 741, 6);
		excelReader.setCellData(xlfile, xlSheetName, 741, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 742, 6);
		excelReader.setCellData(xlfile, xlSheetName, 742, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 743, 6);
		excelReader.setCellData(xlfile, xlSheetName, 743, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 744, 6);
		excelReader.setCellData(xlfile, xlSheetName, 744, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 745, 6);
		excelReader.setCellData(xlfile, xlSheetName, 745, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 746, 6);
		excelReader.setCellData(xlfile, xlSheetName, 746, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 747, 6);
		excelReader.setCellData(xlfile, xlSheetName, 747, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 748, 6);
		excelReader.setCellData(xlfile, xlSheetName, 748, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 749, 6);
		excelReader.setCellData(xlfile, xlSheetName, 749, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 740, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 740, 8, resFail);
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceVATVoucher1AfterEnablingAllowBatchNegativeQuantityOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		batchTable1stRow5thCol.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BatchTableQtyAdjusted));
		enter_BatchTableQtyAdjusted.sendKeys(excelReader.getCellData(xlSheetName, 750, 5));
		enter_BatchTableQtyAdjusted.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 750, 6);
		excelReader.setCellData(xlfile, xlSheetName, 750, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 751, 6);
		excelReader.setCellData(xlfile, xlSheetName, 751, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 752, 6);
		excelReader.setCellData(xlfile, xlSheetName, 752, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 753, 6);
		excelReader.setCellData(xlfile, xlSheetName, 753, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 754, 6);
		excelReader.setCellData(xlfile, xlSheetName, 754, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 755, 6);
		excelReader.setCellData(xlfile, xlSheetName, 755, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 756, 6);
		excelReader.setCellData(xlfile, xlSheetName, 756, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 757, 6);
		excelReader.setCellData(xlfile, xlSheetName, 757, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 758, 6);
		excelReader.setCellData(xlfile, xlSheetName, 758, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 759, 6);
		excelReader.setCellData(xlfile, xlSheetName, 759, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 760, 6);
		excelReader.setCellData(xlfile, xlSheetName, 760, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/

		String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet(); 

		expMsg.add(excelReader.getCellData(xlSheetName, 761, 6));
		//expMsg.add(excelReader.getCellData(xlSheetName, 762, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 763, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 764, 6));
		String expMessage = expMsg.toString();
		excelReader.setCellData(xlfile, xlSheetName, 761, 7, actMessage);
		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		Thread.sleep(2000);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) 
				&& actMessage.equals(expMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 750, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 750, 8, resFail);
			return false;
		}
	}





	public boolean checkValidatingQuantityInEntryPageAndBatchPopupAfterSavingWithQuantityGreaterThanAvailableQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		String actQuantityInEntryPage = select1stRow_11thColumn.getText();
		String expQuantityInEntryPage = excelReader.getCellData(xlSheetName, 765, 6);
		excelReader.setCellData(xlfile, xlSheetName, 765, 7, actQuantityInEntryPage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(4000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 766, 6);
		excelReader.setCellData(xlfile, xlSheetName, 766, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 767, 6);
		excelReader.setCellData(xlfile, xlSheetName, 767, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 768, 6);
		excelReader.setCellData(xlfile, xlSheetName, 768, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 769, 6);
		excelReader.setCellData(xlfile, xlSheetName, 769, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 770, 6);
		excelReader.setCellData(xlfile, xlSheetName, 770, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 771, 6);
		excelReader.setCellData(xlfile, xlSheetName, 771, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 772, 6);
		excelReader.setCellData(xlfile, xlSheetName, 772, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 773, 6);
		excelReader.setCellData(xlfile, xlSheetName, 773, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 774, 6);
		excelReader.setCellData(xlfile, xlSheetName, 774, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 775, 6);
		excelReader.setCellData(xlfile, xlSheetName, 775, 7, actTotalQuantityAdjusted);

		System.out.println("Quantity In Entry Page  : "+actQuantityInEntryPage    +"  value expected  "+expQuantityInEntryPage);
		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		if(actQuantityInEntryPage.equalsIgnoreCase(expQuantityInEntryPage)
				&& actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 765, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 765, 8, resFail);
			return false;
		}
	}









	public boolean checkDisablingAllowNegativeBatchQuantityOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
		SettingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preference));
		preference.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
		BatchBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(AllowNegativeBatchesQtyChkBox));
		if (AllowNegativeBatchesQtyChkBoxIsSelected.isSelected()==true) 
		{
			AllowNegativeBatchesQtyChkBox.click();
		}

		String actAllowNegBatchQty=Boolean.toString(AllowNegativeBatchesQtyChkBoxIsSelected.isSelected());
		String expAllowNegBatchQty=excelReader.getCellData(xlSheetName, 776, 6);
		excelReader.setCellData(xlfile, xlSheetName, 776, 7, actAllowNegBatchQty);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();

		getWaitForAlert();
		String actAlertTxt=getAlert().getText();
		String expAlertTxt=excelReader.getCellData(xlSheetName, 777, 6);
		getAlert().accept();
		excelReader.setCellData(xlfile, xlSheetName, 777, 7, actAlertTxt);

		String expMessage=excelReader.getCellData(xlSheetName, 778, 6);
		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 778, 7, actMessage);

		Thread.sleep(2000);

		System.out.println("AllowNegativeBatchQuantity isSelected : "+actAllowNegBatchQty   +"  value expected  "+expAllowNegBatchQty);
		System.out.println("Alert Text                            : "+actAlertTxt           +"  value expected  "+expAlertTxt);
		System.out.println("Error Message                         : "+actMessage            +"  value expected  "+expMessage);

		if(actAllowNegBatchQty.equalsIgnoreCase(expAllowNegBatchQty) && actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 776, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 776, 8, resFail);
			return false;
		}
	}







	public boolean checkValidatingQuantityInEntryPageAndBatchPopupInSalesInvoice1AfterDisablingAllowNegativeBatchQuantityOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 779, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		String actQuantityInEntryPage = select1stRow_11thColumn.getText();
		String expQuantityInEntryPage = excelReader.getCellData(xlSheetName, 779, 6);
		excelReader.setCellData(xlfile, xlSheetName, 779, 7, actQuantityInEntryPage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 780, 6);
		excelReader.setCellData(xlfile, xlSheetName, 780, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 781, 6);
		excelReader.setCellData(xlfile, xlSheetName, 781, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 782, 6);
		excelReader.setCellData(xlfile, xlSheetName, 782, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 783, 6);
		excelReader.setCellData(xlfile, xlSheetName, 783, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 784, 6);
		excelReader.setCellData(xlfile, xlSheetName, 784, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 785, 6);
		excelReader.setCellData(xlfile, xlSheetName, 785, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 786, 6);
		excelReader.setCellData(xlfile, xlSheetName, 786, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 787, 6);
		excelReader.setCellData(xlfile, xlSheetName, 787, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 788, 6);
		excelReader.setCellData(xlfile, xlSheetName, 788, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 789, 6);
		excelReader.setCellData(xlfile, xlSheetName, 789, 7, actTotalQuantityAdjusted);

		System.out.println("Quantity In Entry Page  : "+actQuantityInEntryPage    +"  value expected  "+expQuantityInEntryPage);
		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		if(actQuantityInEntryPage.equalsIgnoreCase(expQuantityInEntryPage)
				&& actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 779, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 779, 8, resFail);
			return false;
		}
	}








	// Forty Fifth Scenario Starts : try to Change Inward Document Date to Future Date After Consumption of Batch in Outward Document.

	public boolean checkSavingPurchaseVoucherVATVoucher1With2Rows() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 790, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 791, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		// 1st Row 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 792, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 793, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 794, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 795, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 796, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 6); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 6 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNoR1 = select1stRow_16thColumn.getText();
		String expBatchNoR1 = excelReader.getCellData(xlSheetName, 790, 6);
		excelReader.setCellData(xlfile, xlSheetName, 790, 7, actBatchNoR1);



		// 2nd Row 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 797, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 798, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		select2ndRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 799, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
		select2ndRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 800, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
		select2ndRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 801, 5));
		enter_Batch.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNoR2 = select2ndRow_16thColumn.getText();
		String expBatchNoR2 = excelReader.getCellData(xlSheetName, 791, 6);
		excelReader.setCellData(xlfile, xlSheetName, 791, 7, actBatchNoR2);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 792, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 793, 6));                
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 792, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 792, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 793, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 792, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No Row1  : "+actBatchNoR1 +"  value expected  "+expBatchNoR1);
		System.out.println("******** Batch No Row2  : "+actBatchNoR2 +"  value expected  "+expBatchNoR2);

		if(actBatchNoR1.equalsIgnoreCase(expBatchNoR1) && actBatchNoR2.equalsIgnoreCase(expBatchNoR2) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 790, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 790, 8, resFail);
			return false;
		}
	}







	public boolean checkBatchPopupIsDisplayingWithValuesInSalesInvoiceVATVoucher1WithQuantity11() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 802, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 803, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 804, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 805, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 806, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 807, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 808, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 809, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 802, 6);
		excelReader.setCellData(xlfile, xlSheetName, 802, 7, actItemName);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 803, 6);
		excelReader.setCellData(xlfile, xlSheetName, 803, 7, actTotalQuantityInHeader);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 804, 6);
		excelReader.setCellData(xlfile, xlSheetName, 804, 7, actAdjustQuantity);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 805, 6);
		excelReader.setCellData(xlfile, xlSheetName, 805, 7, actBalance);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 806, 6);
		excelReader.setCellData(xlfile, xlSheetName, 806, 7, act1stRowBatchNo);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 807, 6);
		excelReader.setCellData(xlfile, xlSheetName, 807, 7, act1stRowBaseQuantity);


		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 808, 6);
		excelReader.setCellData(xlfile, xlSheetName, 808, 7, act1stRowRate);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 809, 6);
		excelReader.setCellData(xlfile, xlSheetName, 809, 7, act1stRowAdjQty);


		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow1stCol));
		String act2ndRowBatchNo=batchTable2ndRow1stCol.getText();
		String exp2ndRowBatchNo=excelReader.getCellData(xlSheetName, 810, 6);
		excelReader.setCellData(xlfile, xlSheetName, 810, 7, act2ndRowBatchNo);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow2ndCol));
		String act2ndRowBaseQuantity=batchTable2ndRow2ndCol.getText();
		String exp2ndRowBaseQuantity=excelReader.getCellData(xlSheetName, 811, 6);
		excelReader.setCellData(xlfile, xlSheetName, 811, 7, act2ndRowBaseQuantity);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow3rdCol));
		String act2ndRowExpiryDate = batchTable2ndRow3rdCol.getText();
		String exp2ndRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow4thCol));
		String act2ndRowRate = batchTable2ndRow4thCol.getText();
		String exp2ndRowRate = excelReader.getCellData(xlSheetName, 812, 6);
		excelReader.setCellData(xlfile, xlSheetName, 812, 7, act2ndRowRate);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow5thCol));
		String act2ndRowAdjQty = batchTable1stRow5thCol.getText();
		String exp2ndRowAdjQty = excelReader.getCellData(xlSheetName, 813, 6);
		excelReader.setCellData(xlfile, xlSheetName, 813, 7, act2ndRowAdjQty);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow6thCol));
		String act2ndRowPurchaseDate = batchTable2ndRow6thCol.getText();
		String exp2ndRowPurchaseDate = presentDate;



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 814, 6);
		excelReader.setCellData(xlfile, xlSheetName, 814, 7, actTotalQuantity);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 815, 6);
		excelReader.setCellData(xlfile, xlSheetName, 815, 7, actTotalQuantityAdjusted);



		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Batch No                : "+act2ndRowBatchNo          +"  value expected  "+exp2ndRowBatchNo);
		System.out.println("Base Quantity           : "+act2ndRowBaseQuantity     +"  value expected  "+exp2ndRowBaseQuantity);
		System.out.println("Expiry Date             : "+act2ndRowExpiryDate       +"  value expected  "+exp2ndRowExpiryDate);
		System.out.println("Rate                    : "+act2ndRowRate             +"  value expected  "+exp2ndRowRate);
		System.out.println("Adj Qty                 : "+act2ndRowAdjQty           +"  value expected  "+exp2ndRowAdjQty);
		System.out.println("Purchase Date           : "+act2ndRowPurchaseDate     +"  value expected  "+exp2ndRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& act2ndRowBatchNo.equalsIgnoreCase(exp2ndRowBatchNo) && act2ndRowBaseQuantity.equalsIgnoreCase(exp2ndRowBaseQuantity)
				&& act2ndRowExpiryDate.equalsIgnoreCase(exp2ndRowExpiryDate) && act2ndRowRate.equalsIgnoreCase(exp2ndRowRate)
				&& act2ndRowAdjQty.equalsIgnoreCase(exp2ndRowAdjQty) && act2ndRowPurchaseDate.equalsIgnoreCase(exp2ndRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 802, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 802, 8, resFail);
			return false;
		}
	}





	public boolean checkSavingSalesInvoiceVATVoucher1WithQuantity11() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 816, 6);
		excelReader.setCellData(xlfile, xlSheetName, 816, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 817, 6);
		excelReader.setCellData(xlfile, xlSheetName, 817, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 818, 6);
		excelReader.setCellData(xlfile, xlSheetName, 818, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 819, 6);
		excelReader.setCellData(xlfile, xlSheetName, 819, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 820, 6);
		excelReader.setCellData(xlfile, xlSheetName, 820, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 821, 6);
		excelReader.setCellData(xlfile, xlSheetName, 821, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 822, 6);
		excelReader.setCellData(xlfile, xlSheetName, 822, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 823, 6);
		excelReader.setCellData(xlfile, xlSheetName, 823, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow1stCol));
		String act2ndRowBatchNo=batchTable2ndRow1stCol.getText();
		String exp2ndRowBatchNo=excelReader.getCellData(xlSheetName, 824, 6);
		excelReader.setCellData(xlfile, xlSheetName, 824, 7, act2ndRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow2ndCol));
		String act2ndRowBaseQuantity=batchTable2ndRow2ndCol.getText();
		String exp2ndRowBaseQuantity=excelReader.getCellData(xlSheetName, 825, 6);
		excelReader.setCellData(xlfile, xlSheetName, 825, 7, act2ndRowBaseQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow3rdCol));
		String act2ndRowExpiryDate = batchTable2ndRow3rdCol.getText();
		String exp2ndRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow4thCol));
		String act2ndRowRate = batchTable2ndRow4thCol.getText();
		String exp2ndRowRate = excelReader.getCellData(xlSheetName, 826, 6);
		excelReader.setCellData(xlfile, xlSheetName, 826, 7, act2ndRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow5thCol));
		String act2ndRowAdjQty = batchTable2ndRow5thCol.getText();
		String exp2ndRowAdjQty = excelReader.getCellData(xlSheetName, 827, 6);
		excelReader.setCellData(xlfile, xlSheetName, 827, 7, act2ndRowAdjQty);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow6thCol));
		String act2ndRowPurchaseDate = batchTable2ndRow6thCol.getText();
		String exp2ndRowPurchaseDate = presentDate;



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 828, 6);
		excelReader.setCellData(xlfile, xlSheetName, 828, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 829, 6);
		excelReader.setCellData(xlfile, xlSheetName, 829, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Batch No                : "+act2ndRowBatchNo          +"  value expected  "+exp2ndRowBatchNo);
		System.out.println("Base Quantity           : "+act2ndRowBaseQuantity     +"  value expected  "+exp2ndRowBaseQuantity);
		System.out.println("Expiry Date             : "+act2ndRowExpiryDate       +"  value expected  "+exp2ndRowExpiryDate);
		System.out.println("Rate                    : "+act2ndRowRate             +"  value expected  "+exp2ndRowRate);
		System.out.println("Adj Qty                 : "+act2ndRowAdjQty           +"  value expected  "+exp2ndRowAdjQty);
		System.out.println("Purchase Date           : "+act2ndRowPurchaseDate     +"  value expected  "+exp2ndRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNoR1=select1stRow_19thColumn.getText();
		String expBatchNoR1=excelReader.getCellData(xlSheetName, 830, 6);
		excelReader.setCellData(xlfile, xlSheetName, 830, 7, actBatchNoR1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
		String actBatchNoR2=select2ndRow_19thColumn.getText();
		String expBatchNoR2=excelReader.getCellData(xlSheetName, 831, 6);
		excelReader.setCellData(xlfile, xlSheetName, 831, 7, actBatchNoR2);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 832, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 833, 6));                
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 832, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 832, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 833, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 832, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNoR1 +"  value expected  "+expBatchNoR1);
		System.out.println("2nd Row Batch No : "+actBatchNoR2 +"  value expected  "+expBatchNoR2);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& act2ndRowBatchNo.equalsIgnoreCase(exp2ndRowBatchNo) && act2ndRowBaseQuantity.equalsIgnoreCase(exp2ndRowBaseQuantity)
				&& act2ndRowExpiryDate.equalsIgnoreCase(exp2ndRowExpiryDate) && act2ndRowRate.equalsIgnoreCase(exp2ndRowRate)
				&& act2ndRowAdjQty.equalsIgnoreCase(exp2ndRowAdjQty) && act2ndRowPurchaseDate.equalsIgnoreCase(exp2ndRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actBatchNoR1.equalsIgnoreCase(expBatchNoR1) && actBatchNoR2.equalsIgnoreCase(expBatchNoR2)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 816, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 816, 8, resFail);
			return false;
		}
	}







	public boolean checkReSavingPurchaseVoucherVATVoucher1WithDateNextToCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 834, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage=excelReader.getCellData(xlSheetName, 834, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 834, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 834, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 834, 8, resFail);
			return false;
		}
	}








	// Forty Sixth Scenario Starts : try to Change Inward Document Date to Future Date After Suspending and Resaving Outward Document With Consumption of Batch.

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForFortySixthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 835, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 835, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 836, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 835, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 837, 6);
		excelReader.setCellData(xlfile, xlSheetName, 837, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 835, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 835, 8, resFail);
			return false;
		}
	}







	public boolean checkReSavingPurchaseVoucherVATVoucher1WithDateNextToCurrentDateAfterSuspendingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 838, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 838, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 839, 6));                
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 838, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 838, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 839, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 838, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 838, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 838, 8, resFail);
			return false;
		}
	}







	public boolean checkReSavingSalesInvoiceVATVoucherAfterChangingDateNextToCurrentDateInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 840, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 840, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 840, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 840, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 840, 8, resFail);
			return false;
		}
	}







	// Forty Seventh Scenario Starts : try to Change Warehouse in  Inward Document After Consumption of Batch in Outward Document. 

	public boolean checkReSavingPurchaseVoucherVATVoucher1WithCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 841, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Current :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		 /*String actMessage =SavingInBackgroundTrial();

         HashSet<String> expMsg = new HashSet();

         expMsg.add(excelReader.getCellData(xlSheetName, 841, 6));
         expMsg.add(excelReader.getCellData(xlSheetName, 842, 6));                
         String expMessage = expMsg.toString();
         excelReader.setCellData(xlfile, xlSheetName, 841, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		
		String expMessage1= excelReader.getCellData(xlSheetName, 841, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 842, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 841, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 841, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 841, 8, resFail);
			return false;
		}
	}






	public boolean checkReSavingSalesInvoiceVATVoucher1AfterResavingPurchaseVoucherVAT1WithCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 843, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batch = select1stRow_19thColumn.getText();
		String expRow1Batch = excelReader.getCellData(xlSheetName, 843, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 843, 7, actRow1Batch);

		String actRow2Batch = select2ndRow_19thColumn.getText();
		String expRow2Batch = excelReader.getCellData(xlSheetName, 844, 6);
		excelReader.setCellData(xlfile, xlSheetName, 844, 7, actRow2Batch);

		System.out.println("1st Row Batch No : "+actRow1Batch+"  Value Expected  "+expRow1Batch);
		System.out.println("2nd Row Batch No : "+actRow2Batch+"  Value Expected  "+expRow2Batch);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet(); 

		expMsg.add(excelReader.getCellData(xlSheetName, 845, 6));
		//expMsg.add(excelReader.getCellData(xlSheetName, 846, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 847, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 848, 6));
		String expMessage = expMsg.toString();
		excelReader.setCellData(xlfile, xlSheetName, 845, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 847, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 848, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 845, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
		
		

		if(actRow1Batch.equalsIgnoreCase(expRow1Batch) && actRow2Batch.equalsIgnoreCase(expRow2Batch)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 843, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 843, 8, resFail);
			return false;
		}
	}







	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingWarehouseFromHyderabadToSecunderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 849, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 850, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 851, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 849, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 849, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 849, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 849, 8, resFail);
			return false;
		}
	}









	// Forty Eight Scenario Starts : try to Change Warehouse in  Inward Document After Suspend And Resaving Outward Document With Consumption of Batch 

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForFortyEightScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 852, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 852, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 853, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 852, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 854, 6);
		excelReader.setCellData(xlfile, xlSheetName, 854, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 852, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 852, 8, resFail);
			return false;
		}
	}







	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingWarehouseFromHyderabadToSecunderabadAfterSuspendingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 855, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 856, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 857, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 855, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 856, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 855, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 855, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 856, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 855, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 855, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 855, 8, resFail);
			return false;
		}
	}








	public boolean checkReSavingSalesInvoiceVATVoucherAfterChangingWarehouseToSecunderabadInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 858, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 858, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 858, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 858, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 858, 8, resFail);
			return false;
		}
	}














	// Forty Ninth Scenario Starts : try to Change Quantity in First Row Inward Document Lesser Than Consumed Batch in Outward Document.

	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingWarehouseFromSecunderabadToHyderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 859, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 860, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 861, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 859, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 860, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 859, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 859, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 860, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 859, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 859, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 859, 8, resFail);
			return false;
		}
	}









	public boolean checkDeletingSalesInvoiceVATVoucher1AfterChangingWarehouseInPurchaseVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 862, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		Thread.sleep(2000);
		getAlert().accept();

		String expMessage =excelReader.getCellData(xlSheetName, 862, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 862, 7, actMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 862, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 862, 8, resFail);
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceVATVoucher1WithQuantity180() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 863, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 864, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 865, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 866, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 867, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 868, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 869, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 870, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNoR1=select1stRow_19thColumn.getText();
		String expBatchNoR1=excelReader.getCellData(xlSheetName, 863, 6);
		excelReader.setCellData(xlfile, xlSheetName, 863, 7, actBatchNoR1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
		String actBatchNoR2=select2ndRow_19thColumn.getText();
		String expBatchNoR2=excelReader.getCellData(xlSheetName, 864, 6);
		excelReader.setCellData(xlfile, xlSheetName, 864, 7, actBatchNoR2);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 865, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 866, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 865, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 865, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 866, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 865, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNoR1 +"  value expected  "+expBatchNoR1);
		System.out.println("2nd Row Batch No : "+actBatchNoR2 +"  value expected  "+expBatchNoR2);

		if(actBatchNoR1.equalsIgnoreCase(expBatchNoR1) && actBatchNoR2.equalsIgnoreCase(expBatchNoR2)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 863, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 863, 8, resFail);
			return false;
		}
	}









	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingQuantityTo12In1stRow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 871, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 872, 5));
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 871, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 871, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 871, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 871, 8, resFail);
			return false;
		}
	}










	// Fiftieth Scenario Starts : try to Change Quantity in Second Row Inward Document Lesser Than Consumed Batch in Outward Document.

	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingQuantityTo12In2ndRow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 873, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Voucher loaded successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		select2ndRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 874, 5));
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 873, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 873, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 873, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 873, 8, resFail);
			return false;
		}
	}









	// Fifty One Scenario Starts : try to Change Item in First Row Inward Document After Consumption of Batch in Outward Document.

	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingItemToBATCHBRITEMIn1stRow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 875, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Voucher loaded successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		select1stRow_2ndColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 876, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 877, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 878, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 6); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 6 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 875, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 875, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 875, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 875, 8, resFail);
			return false;
		}
	}







	// Fifty Second Scenario Starts : try to Change Item in Second  Row Inward Document After Consumption of Batch in Outward Document. 

	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingItemToBATCHBRITEMIn2ndRow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 879, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Voucher loaded successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_2ndColumn));
		select2ndRow_2ndColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 880, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
		select2ndRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 881, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
		select2ndRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 882, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 6); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 6 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 879, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 879, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 879, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 879, 8, resFail);
			return false;
		}
	}








	// Fifty Third Scenario Starts : try to Deleting First Row Inward Document After Consumption of Batch in Outward Document.

	public boolean checkReSavingPurchaseVoucherVATVoucher1ByDeleting1stRow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		checkDisableUpdateFATag();
		Thread.sleep(1500);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 883, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Voucher loaded successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstRowIndex));
		//firstRowIndex.click();
		getAction().contextClick(firstRowIndex).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		
		/*click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();*/

		String expMessage = excelReader.getCellData(xlSheetName, 883, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 883, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 883, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 883, 8, resFail);
			return false;
		}
	}










	// Fifty Forth Scenario Starts : try to Deleting Second  Row Inward Document After Consumption of Batch in Outward Document.

	public boolean checkReSavingPurchaseVoucherVATVoucher1ByDeleting2ndRow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		checkEnableUpdateFATag();
		Thread.sleep(1500);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 884, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Voucher loaded successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		//secondRowIndex.click();
		getAction().contextClick(secondRowIndex).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 884, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 884, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 884, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 884, 8, resFail);
			return false;
		}
	}










	// Fifty Five Scenario Starts : try to Change BatchNo in First Row in Inward Document After Consumption of Batch in Outward Document.

	public boolean checkReSavingPurchaseVoucherVATVoucher1ByBatchNoIn1stRow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 885, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Voucher loaded successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
		select2ndRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 886, 5));
		enter_Batch.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 885, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 885, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 885, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 885, 8, resFail);
			return false;
		}
	}









	// Fifty Sixth Scenario Starts : try to Change BatchNo in Second Row in Inward Document After Consumption of Batch in Outward Document.

	public boolean checkReSavingPurchaseVoucherVATVoucher1ByBatchNoIn2ndRow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 887, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Voucher loaded successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
		select2ndRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 888, 5));
		enter_Batch.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 887, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 887, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 887, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 887, 8, resFail);
			return false;
		}
	}









	// Scenarios Using "Expiry Dates For Batches" Option				
	// Fifty Seventh Scenario Starts : Try to Change Expiry Date in Inward Document After Partial Consumption of Batch in Outward Document

	public boolean checkSavingPurchaseVoucherVATVoucher1WithExpiryDate4DaysMoreThanCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 889, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 890, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 891, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 892, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 893, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 894, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 895, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 4); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 4 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 889, 6);
		excelReader.setCellData(xlfile, xlSheetName, 889, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 890, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 891, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 890, 7, actMessage);
        
		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 890, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 891, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 890, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 889, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 889, 8, resFail);
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceVATVoucher1ByConsumingPartialQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 896, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 897, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 898, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 899, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 900, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 901, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 902, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 903, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 896, 6);
		excelReader.setCellData(xlfile, xlSheetName, 896, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 897, 6);
		excelReader.setCellData(xlfile, xlSheetName, 897, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 898, 6);
		excelReader.setCellData(xlfile, xlSheetName, 898, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 899, 6);
		excelReader.setCellData(xlfile, xlSheetName, 899, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 900, 6);
		excelReader.setCellData(xlfile, xlSheetName, 900, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 901, 6);
		excelReader.setCellData(xlfile, xlSheetName, 901, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 4); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 902, 6);
		excelReader.setCellData(xlfile, xlSheetName, 902, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 903, 6);
		excelReader.setCellData(xlfile, xlSheetName, 903, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 904, 6);
		excelReader.setCellData(xlfile, xlSheetName, 904, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 905, 6);
		excelReader.setCellData(xlfile, xlSheetName, 905, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 906, 6);
		excelReader.setCellData(xlfile, xlSheetName, 906, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 907, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 908, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 907, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 907, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 908, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 907, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 896, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 896, 8, resFail);
			return false;
		}
	}








	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingExpiryDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 909, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Voucher loaded successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
		select1stRow_18thColumn.click();

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 909, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 909, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 909, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 909, 8, resFail);
			return false;
		}
	}









	// Fifty Eight Scenario Starts : Try to Change Expiry Date in Inward Document After Full Consumption of Batch in Outward Document

	public boolean checkReSavingSalesInvoiceVATVoucher1ByConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 910, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(Keys.END);
		enter_AQ.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 911, 5));
		enter_AQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(Keys.END);
		enter_FQ.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 912, 5));
		enter_FQ.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		Thread.sleep(2000);
		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet(); 

		expMsg.add(excelReader.getCellData(xlSheetName, 910, 6));
		//expMsg.add(excelReader.getCellData(xlSheetName, 911, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 912, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 913, 6));
		String expMessage = expMsg.toString();
		excelReader.setCellData(xlfile, xlSheetName, 910, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 912, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 913, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 910, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 910, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 910, 8, resFail);
			return false;
		}
	}










	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingExpiryDateAfterConsumingFullQuantityInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 914, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Voucher loaded successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
		select1stRow_18thColumn.click();

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 914, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 914, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 914, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 914, 8, resFail);
			return false;
		}
	}








	// Fifty Ninth Scenario Starts : Try to Consume Batch Quantity Through Link Which is Already Fully Consumed in Other Outward Document

	public boolean checkSavingPurchaseVoucherVATVoucher1ForFiftyNinthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 915, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 916, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 917, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 918, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 919, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 920, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 921, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 5); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 915, 6);
		excelReader.setCellData(xlfile, xlSheetName, 915, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 916, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 917, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 916, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 916, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 917, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 916, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 915, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 915, 8, resFail);
			return false;
		}
	}








	public boolean checkBatchPopupIsDisplayingWithValuesInSalesInvoiceVATVoucher1AfterSavingPurchaseVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 922, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 923, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 924, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 925, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 926, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 927, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 928, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 929, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 922, 6);
		excelReader.setCellData(xlfile, xlSheetName, 922, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 923, 6);
		excelReader.setCellData(xlfile, xlSheetName, 923, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 924, 6);
		excelReader.setCellData(xlfile, xlSheetName, 924, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 925, 6);
		excelReader.setCellData(xlfile, xlSheetName, 925, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 926, 6);
		excelReader.setCellData(xlfile, xlSheetName, 926, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 927, 6);
		excelReader.setCellData(xlfile, xlSheetName, 927, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 5); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 928, 6);
		excelReader.setCellData(xlfile, xlSheetName, 928, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty =excelReader.getCellData(xlSheetName, 929, 6);
		excelReader.setCellData(xlfile, xlSheetName, 929, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 930, 6);
		excelReader.setCellData(xlfile, xlSheetName, 930, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 931, 6);
		excelReader.setCellData(xlfile, xlSheetName, 931, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 922, 8, resPass);
			return true;
		}
		else
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 922, 8, resFail);
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher1ByConsumingFullQuantityAfterSavingPurchaseVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 932, 6);
		excelReader.setCellData(xlfile, xlSheetName, 932, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 933, 6);
		excelReader.setCellData(xlfile, xlSheetName, 933, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 934, 6);
		excelReader.setCellData(xlfile, xlSheetName, 934, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 935, 6);
		excelReader.setCellData(xlfile, xlSheetName, 935, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 936, 6);
		excelReader.setCellData(xlfile, xlSheetName, 936, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 937, 6);
		excelReader.setCellData(xlfile, xlSheetName, 937, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 5); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 938, 6);
		excelReader.setCellData(xlfile, xlSheetName, 938, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 939, 6);
		excelReader.setCellData(xlfile, xlSheetName, 939, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 940, 6);
		excelReader.setCellData(xlfile, xlSheetName, 940, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 941, 6);
		excelReader.setCellData(xlfile, xlSheetName, 941, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 942, 6);
		excelReader.setCellData(xlfile, xlSheetName, 942, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 943, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 944, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 943, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 943, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 944, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 943, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 932, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 932, 8, resFail);
			return false;
		}
	}








	public boolean checkSavingPurchaseReturnsVoucher1AfterConsumingFullQuantityInSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText(excelReader.getCellData(xlSheetName, 945, 5));

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 946, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 947, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 945, 6);
		excelReader.setCellData(xlfile, xlSheetName, 945, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 946, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 946, 7, actMessage);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno +"  value expected  "+expRow1Batchno);
		System.out.println("******** Error Message : "+actMessage     +"  value expected  "+expMessage);

		if(actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 945, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 945, 8, resFail);
			return false;
		}
	}	










	// Sixtieth Scenario Starts : Try to Consume Batch Quantity Through Link Which is Already Fully Consumed in suspended Outward Document

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForSixtiethScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 948, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 948, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 949, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 948, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 950, 6);
		excelReader.setCellData(xlfile, xlSheetName, 950, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 948, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 948, 8, resFail);
			return false;
		}
	}








	public boolean checkSavingPurchaseReturnsVoucher1AfterSuspendingSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);

		 documentNumberTxt.sendKeys(Keys.CONTROL, "l");
		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText(excelReader.getCellData(xlSheetName, 951, 5));

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 952, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 953, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 951, 6);
		excelReader.setCellData(xlfile, xlSheetName, 951, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 952, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 953, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 952, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 952, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 953, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 952, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 951, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 951, 8, resFail);
			return false;
		}
	}	








	public boolean checkReSavingSalesInvoiceVATVoucherAfterConsumingFullQuantityInPurchaseReturnsVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 954, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 954, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 954, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 954, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 954, 8, resFail);
			return false;
		}
	}









	// Sixty One Scenario Starts : Try to Consume Batch Quantity Through Link, By Suspending and Resaving linked Document and Loading Link Twice in New link Document

	public boolean checkSuspendingPurchaseReturnsVoucher1ForSixtiethOneScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 955, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 955, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 956, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 955, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 957, 6);
		excelReader.setCellData(xlfile, xlSheetName, 957, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 955, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 955, 8, resFail);
			return false;
		}
	}







	public boolean checkSavingPurchaseReturnsVoucher2AfterSuspendingPurchaseReturnsVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText(excelReader.getCellData(xlSheetName, 958, 5));

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 959, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 960, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 958, 6);
		excelReader.setCellData(xlfile, xlSheetName, 958, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 959, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 960, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 959, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 959, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 960, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 959, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			excelReader.setCellData(xlfile, xlSheetName, 958, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			excelReader.setCellData(xlfile, xlSheetName, 958, 8, resFail);
			return false;
		}
	}	







	public boolean checkReSavingPurchaseReturnsVoucher1AfterConsumingFullQuantityInPurchaseReturnsVoucher2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 961, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 961, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 961, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 961, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 961, 8, resFail);
			return false;
		}
	}








	// Sixty Two Scenario Starts : Try to Consume Batch Quantity Through Link Which is Already Partially Consumed in Other Outward Document

	public boolean checkDeletingPurchaseReturnsVoucher1And2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 962, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		Thread.sleep(2000);
		getAlert().accept();

		String expMessage1 =excelReader.getCellData(xlSheetName, 962, 6);
		String actMessage1 = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 962, 7, actMessage1);

		Thread.sleep(2000);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		Thread.sleep(2000);
		getAlert().accept();

		String expMessage2 =excelReader.getCellData(xlSheetName, 963, 6);
		String actMessage2 = checkValidationMessage(expMessage2);
		excelReader.setCellData(xlfile, xlSheetName, 963, 7, actMessage2);

		Thread.sleep(2000);

		if(actMessage1.equalsIgnoreCase(expMessage1) && actMessage2.equalsIgnoreCase(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 962, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 962, 8, resFail);
			return false;
		}
	}





	public boolean checkDeletingSalesInvoiceVATVoucher1ForSavingWithConsumingPartially() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 964, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		Thread.sleep(2000);
		getAlert().accept();

		String expMessage =excelReader.getCellData(xlSheetName, 964, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 964, 7, actMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 964, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 964, 8, resFail);
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceVATVoucher1ByConsumingPartialQuantity60() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 965, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 966, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 967, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 968, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 969, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 970, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 971, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 972, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 965, 6);
		excelReader.setCellData(xlfile, xlSheetName, 965, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 966, 6);
		excelReader.setCellData(xlfile, xlSheetName, 966, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 967, 6);
		excelReader.setCellData(xlfile, xlSheetName, 967, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 968, 6);
		excelReader.setCellData(xlfile, xlSheetName, 968, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 969, 6);
		excelReader.setCellData(xlfile, xlSheetName, 969, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 970, 6);
		excelReader.setCellData(xlfile, xlSheetName, 970, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 5); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 971, 6);
		excelReader.setCellData(xlfile, xlSheetName, 971, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 972, 6);
		excelReader.setCellData(xlfile, xlSheetName, 972, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 973, 6);
		excelReader.setCellData(xlfile, xlSheetName, 973, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 974, 6);
		excelReader.setCellData(xlfile, xlSheetName, 974, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 975, 6);
		excelReader.setCellData(xlfile, xlSheetName, 975, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 976, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 977, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 976, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 976, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 977, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 976, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 965, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 965, 8, resFail);
			return false;
		}
	}







	public boolean checkSavingPurchaseReturnsVoucher1AfterPartiallyConsumingQuantityInSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText(excelReader.getCellData(xlSheetName, 978, 5));

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 979, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 980, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 978, 6);
		excelReader.setCellData(xlfile, xlSheetName, 978, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 979, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 979, 7, actMessage);


		System.out.println("******** Row1 Batch No : "+actRow1Batchno +"  value expected  "+expRow1Batchno);
		System.out.println("******** Error Message : "+actMessage     +"  value expected  "+expMessage);

		if(actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 978, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 978, 8, resFail);
			return false;
		}
	}	







	


	// Sixty Three Scenario Starts : Try to Consume Batch Quantity By Loading Link in Two Link Documents With Consuming partial Quantities

	public boolean checkAddingLinkFromPurchaseVoucherVATToSalesInvoiceN() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
		SettingsmenuBtn.click();

		Thread.sleep(2000);
		
		ClickUsingJs(designWorkflowbtn);
		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//getAction().moveToElement(designWorkflowbtn).click().build().perform();	
		//designWorkflowbtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys(excelReader.getCellData(xlSheetName, 981, 5));
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		moveToElement(SalesInvoiceExpandBtn);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowSalesInvoiceN));
		designWorkflowSalesInvoiceN.click();
		
		Thread.sleep(1000);

		getAction().dragAndDropBy(designWorkflowSalesInvoiceN, 950, -150).build().perform();

		Thread.sleep(2000);

		getAction().contextClick(draggedPurchasesVouchersVAT).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(draggedlinkBtn));
		draggedlinkBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(linkNode5Left));
		linkNode5Left.click();

		Thread.sleep(2000);

		//getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link5TO6));
		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link5TO6));
		//link5TO6.click();
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line5 > path').setAttribute('stroke-width', '8')");

		Thread.sleep(1000);

		
		moveToElement(link5TO6);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DefinitionLinkValueDropdown));
		Select s=new Select(DefinitionLinkValueDropdown);
		s.selectByVisibleText(excelReader.getCellData(xlSheetName, 982, 5));

		Thread.sleep(1000);

		int definitionTabChkBoxNameListCount = definitionTabChkBoxNameList.size();

		for(int i=0;i<definitionTabChkBoxNameListCount;i++)
		{
			String data = definitionTabChkBoxNameList.get(i).getText();
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 983, 5)) && definitionTabChkBoxListIsSelected.get(i).isSelected()==false)
			{
				definitionTabChkBoxList.get(i).click();
				break;
			}
		}

		for(int i=0;i<definitionTabChkBoxNameListCount;i++)
		{
			String data = definitionTabChkBoxNameList.get(i).getText();
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 984, 5)) && definitionTabChkBoxListIsSelected.get(i).isSelected()==false)
			{
				definitionTabChkBoxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		OkBtn.click();
	
		
		 
		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowSaveBtn));
		workFlowSaveBtn.click();

		String expMessage=excelReader.getCellData(xlSheetName, 981, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 981, 7, actMessage);

		Thread.sleep(2000);
		checkLogoutAndLogin();

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 981, 8, resPass);
			return true;
		}
		else
		{
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 981, 8, resFail);
			return false;
		}
	}







	public boolean checkDeletingSalesInvoiceVATVoucher1AfterAddingSalesInvoiceNInDesignWorkFlow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 985, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		Thread.sleep(2000);
		getAlert().accept();

		String expMessage =excelReader.getCellData(xlSheetName, 985, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 985, 7, actMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 985, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 985, 8, resFail);
			return false;
		}
	}






	public boolean checkSavingPurchaseVoucherVATVoucher1AfterAddingLinkFromPurchasesVoucherVATToSalesInvoiceN() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);
		
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 986, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Voucher loaded successfully"); 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();
		
		getWaitForAlert();
		getAlert().accept();
		
		checkValidationMessage("");
		
		Thread.sleep(3000); 
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 987, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 988, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 989, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 990, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 991, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 992, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 993, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 5); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 986, 6);
		excelReader.setCellData(xlfile, xlSheetName, 986, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 987, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 988, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 987, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);	*/
		
		
		String expMessage1= excelReader.getCellData(xlSheetName, 987, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 988, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 987, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 986, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 986, 8, resFail);
			return false;
		}
	}





	@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_popup_body']/tr/td")
	private static List<WebElement> workflowTableList;

	public boolean checkSavingPurchaseReturnsVoucher1ByConsumingPartialQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText(excelReader.getCellData(xlSheetName, 994, 5));

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 995, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = excelReader.getCellData(xlSheetName, 994, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 995, 6);

		
		
		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);
		excelReader.setCellData(xlfile, xlSheetName, 994, 7, actWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 996, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 997, 5));
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 996, 6);
		excelReader.setCellData(xlfile, xlSheetName, 996, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 997, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 998, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 997, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 997, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 998, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 997, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 994, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 994, 8, resFail);
			return false;
		}
	}	









	public boolean checkSavingSalesInvoiceNVoucher1ByLoadingFromWorkflow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 999, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = excelReader.getCellData(xlSheetName, 999, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1000, 6);

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);
		excelReader.setCellData(xlfile, xlSheetName, 999, 7, actWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		
		customerAccountTxt.sendKeys(Keys.CONTROL, "a");
		Thread.sleep(1000);
		customerAccountTxt.sendKeys(Keys.BACK_SPACE);
		enterText(customerAccountTxt, excelReader.getCellData(xlSheetName, 1000, 5));
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);
		
		click(departmentTxt);
		departmentTxt.sendKeys(Keys.CONTROL, "a");
		Thread.sleep(1000);
		departmentTxt.sendKeys(Keys.BACK_SPACE);
		enterText(departmentTxt, excelReader.getCellData(xlSheetName, 1002, 5));
		Thread.sleep(2000);
		tab(departmentTxt);
		
		/*customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1000, 5));
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);*/

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1001, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1001, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1002, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1003, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1002, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1002, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1003, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1002, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 999, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 999, 8, resFail);
			return false;
		}
	}	







	// Sixty Fourth Scenario Starts : Try to Consume Batch Quantity By Loading Link in Two Link Documents With Consuming partial Quantities,Suspending and Resaving one Link Document

	public boolean checkDeletingSalesInvoiceNVoucher1ForSixtyFourthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1004, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		Thread.sleep(2000);
		getAlert().accept();

		String expMessage =excelReader.getCellData(xlSheetName, 1004, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1004, 7, actMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1004, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1004, 8, resFail);
			return false;
		}
	}








	public boolean checkSuspendingPurchaseReturnsVoucher1AfterDeletingSalesInvoiceNVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1005, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 1005, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 1006, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1005, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 1007, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1007, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1005, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1005, 8, resFail);
			return false;
		}
	}






	

	public boolean checkSavingSalesInvoiceNVoucher1ByLoadingFromWorkflowByConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("NDT52:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, NDT52:1, "+currentDate+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);*/
		
		click(homePageVoucherArrowBtn);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingPurchaseVoucherVATLink));
		pendingPurchaseVoucherVATLink.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1008, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		Thread.sleep(1000);
		
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingPurchaseVoucherVATLink));
		convertBtn.click();

		checkValidationMessage("Link data loaded");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		
		customerAccountTxt.sendKeys(Keys.CONTROL, "a");
		Thread.sleep(1000);
		customerAccountTxt.sendKeys(Keys.BACK_SPACE);
		enterText(customerAccountTxt, excelReader.getCellData(xlSheetName, 1009, 5));
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);
		
		click(departmentTxt);
		departmentTxt.sendKeys(Keys.CONTROL, "a");
		Thread.sleep(1000);
		departmentTxt.sendKeys(Keys.BACK_SPACE);
		enterText(departmentTxt, excelReader.getCellData(xlSheetName, 1010, 5));
		Thread.sleep(2000);
		tab(departmentTxt);
		
		
		
		
		/*customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1009, 5));
		customerAccountTxt.sendKeys(Keys.TAB);*/

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1008, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1008, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1009, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1010, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1009, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1009, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1010, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1009, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1008, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1008, 8, resFail);
			return false;
		}
	}	










	public boolean checkResavingPurchaseReturnsVoucher1AfterConsumingFullQuantityInSalesInvoiceN() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1011, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 1011, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1011, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1011, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1011, 8, resFail);
			return false;
		}
	}








	// Sixty Fifth Scenario Starts : Try to Consume Batch Quantity By Loading Link in Two Link Documents With Consuming partial Quantities and Suspending and Resaving Other Than Link Document

	public boolean checkSavingPurchaseVoucherVATVoucher1ForSixtyFifthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1012, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1013, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1014, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1015, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 1016, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1017, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 1018, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 5); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 1012, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1012, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1013, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1014, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1013, 7, actMessage);
        
        System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1013, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1014, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1013, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);


		

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1012, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1012, 8, resFail);
			return false;
		}
	}








	public boolean checkBatchPopupValuesInDeliveryNoteVoucher1AfterSavingPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deliveryNotesVoucher));
		deliveryNotesVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1019, 5));
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1020, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1021, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
		select1stRow_6thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 1022, 5));
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1023, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 1019, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1019, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 1020, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1020, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 1021, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1021, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 1022, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1022, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 1023, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1023, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 1024, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1024, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 5); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 1025, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1025, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 1026, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1026, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 1027, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1027, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 1028, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1028, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1019, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1019, 8, resFail);
			return false;
		}
	}








	public boolean checkSavingDeliveryNoteVoucher1AfterSavingPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 1029, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1029, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 1030, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1030, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 1031, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1031, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 1032, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1032, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 1033, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1033, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 1034, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1034, 7, act1stRowBaseQuantity);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 5); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 1035, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1035, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 1036, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1036, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 1037, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1037, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 1038, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1038, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
		String actBatchNo=select1stRow_10thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 1039, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1039, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1040, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1041, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1040, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1040, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1041, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1040, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1029, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1029, 8, resFail);
			return false;
		}
	}








	public boolean checkSuspendingDeliveryNotesVoucher1FromEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expEntrySuspendMessage1 = excelReader.getCellData(xlSheetName, 1042, 6);
		String expEntrySuspendMessage2 = excelReader.getCellData(xlSheetName, 1043, 6);
		String actEntrySuspendMessage = checkValidationMessage(expEntrySuspendMessage2);
		excelReader.setCellData(xlfile, xlSheetName, 1042, 7, actEntrySuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actEntrySuspendStatus = grid_1stRowSuspendStatus.getText();
		String expEntrySuspendStatus = excelReader.getCellData(xlSheetName, 1044, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1044, 7, actEntrySuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actEntrySuspendStatus+"  Expected  "+expEntrySuspendStatus);

		Thread.sleep(2000);

		if(actEntrySuspendMessage.startsWith(expEntrySuspendMessage1) && actEntrySuspendMessage.endsWith(expEntrySuspendMessage2) 
				&& actEntrySuspendStatus.equalsIgnoreCase(expEntrySuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1042, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1042, 8, resFail);
			return false;
		}
	}










	public boolean checkSavingPurchaseReturnsVoucher1ByConsumingPartialQuantityAfterSuspendingDeliveryNotesVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText(excelReader.getCellData(xlSheetName, 1045, 5));

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1046, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = excelReader.getCellData(xlSheetName, 1045, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1046, 6);

		excelReader.setCellData(xlfile, xlSheetName, 1045, 7, actWorkflowData);
		
		
		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1047, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 1048, 5));
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1047, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1047, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1048, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1049, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1048, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1048, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1049, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1048, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1045, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1045, 8, resFail);
			return false;
		}
	}	










	public boolean checkSavingSalesInvoiceNVoucher1ByLoadingFromWorkflowAfterSavingPurchaseReturns() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);
		
		click(homePageVoucherArrowBtn);
		Thread.sleep(1000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingPurchaseVoucherVATLink));
		pendingPurchaseVoucherVATLink.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1050, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingPurchaseVoucherVATLink));
		convertBtn.click();

		checkValidationMessage("Link data loaded");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		
		customerAccountTxt.sendKeys(Keys.CONTROL, "a");
		Thread.sleep(1000);
		customerAccountTxt.sendKeys(Keys.BACK_SPACE);
		enterText(customerAccountTxt, excelReader.getCellData(xlSheetName, 1051, 5));
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);
		
		click(departmentTxt);
		departmentTxt.sendKeys(Keys.CONTROL, "a");
		Thread.sleep(1000);
		departmentTxt.sendKeys(Keys.BACK_SPACE);
		enterText(departmentTxt, excelReader.getCellData(xlSheetName, 1052, 5));
		Thread.sleep(2000);
		tab(departmentTxt);
		
		
		/*customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1051, 5));
		customerAccountTxt.sendKeys(Keys.TAB);*/

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		String actQuantity = select1stRow_8thColumn.getText();
		String expQuantity = excelReader.getCellData(xlSheetName, 1050, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 1050, 7, actQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1051, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1051, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1052, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1053, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1052, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1052, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1053, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1052, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Quantity      : "+actQuantity     +"  value expected  "+expQuantity);
		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actQuantity.equalsIgnoreCase(expQuantity) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1050, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1050, 8, resFail);
			return false;
		}
	}	







	public boolean checkResavingDeliveryNotesVoucher1AfterConsumingFullQuantityInSalesInvoiceN() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deliveryNotesVoucher));
		deliveryNotesVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1054, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 1054, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1054, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1054, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1054, 8, resFail);
			return false;
		}
	}












	// Sixty Sixth Scenario Starts : Try to Consume Batch Quantity By Loading Link in Two Link Documents With Consuming Full Quantities

	public boolean checkSavingPurchaseVoucherVATVoucher1ForSixtySixthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1055, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1056, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1057, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1058, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 1059, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1060, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 1061, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 5); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 1055, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1055, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1056, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1057, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1056, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1056, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1057, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1056, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1055, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1055, 8, resFail);
			return false;
		}
	}







	public boolean checkSavingPurchaseReturnsVoucher1ByConsumingFullQuantityAfterSavingPurchaseVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText(excelReader.getCellData(xlSheetName, 1062, 5));

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1063, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = excelReader.getCellData(xlSheetName, 1062, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1063, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1062, 7, actWorkflowData);
		
		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1064, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1064, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1064, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1065, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1066, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1065, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1065, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1066, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1065, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1062, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1062, 8, resFail);
			return false;
		}
	}	








	
	public boolean checkLoadingWorkflowInSalesInvoiceNVoucher1AfterFullConsumingInPurchaseReturns() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(2000);
		
		boolean actpurchaseVoucherWorlFlowText;
		boolean exppurchaseVoucherWorlFlowText = true;
		
		try 
		{
			if (workFlowPopupCtrlPlusL.isDisplayed()==true) 
			{
				actpurchaseVoucherWorlFlowText = false;
				System.err.println(workFlowTableBody.getText());
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
				workFlowCtrlPlusLCloseBtn.click();
			}
			else
			{
				actpurchaseVoucherWorlFlowText = true;
			}
		} 
		catch (Exception e) 
		{
			System.err.println(e.getMessage());
			actpurchaseVoucherWorlFlowText = true;
		}
		
		
		/*boolean actWorkflowIsEmpty = WorkflowTable.getText().isEmpty();
		boolean expWorkflowIsEmpty = Boolean.getBoolean(excelReader.getCellData(xlSheetName, 1067, 6));
		excelReader.setCellData(xlfile, xlSheetName, 1067, 7, Boolean.toString(actWorkflowIsEmpty));

		System.out.println("Workflow Table isEmpty : "+actWorkflowIsEmpty+"  Value Expected  "+expWorkflowIsEmpty);

		if (actWorkflowIsEmpty==false) 
		{
			ArrayList<String> workflowList = new ArrayList<String>();

			int count1 = workflowTableList.size();

			for (int i = 0; i < count1; i++) 
			{
				String data = workflowTableList.get(i).getText();
				if (data.isEmpty()==false) 
				{
					System.err.println(data);
					workflowList.add(data);
				}
			}
			System.err.println(workflowList);
		}*/

		if(/*actWorkflowIsEmpty==expWorkflowIsEmpty*/ actpurchaseVoucherWorlFlowText==exppurchaseVoucherWorlFlowText) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1067, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1067, 8, resFail);
			return false;
		}
	}	










	// Sixty Seventh Scenario Starts : Try to Consume Batch Quantity By Loading Link in Two Link Documents With Consuming Full Quantities and Suspending Resaving One Link Document

	public boolean checkSuspendingPurchaseReturnsVoucher1ForSixtySeventhScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		  excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1068, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 1068, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 1069, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1068, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 1070, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1070, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1068, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1068, 8, resFail);
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceNVoucher1ByLoadingFromWorkflowAfterSuspendingPurchaseReturns() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);
		click(homePageVoucherArrowBtn);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingPurchaseVoucherVATLink));
		pendingPurchaseVoucherVATLink.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1071, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingPurchaseVoucherVATLink));
		convertBtn.click();

		checkValidationMessage("Link data loaded");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		
		customerAccountTxt.sendKeys(Keys.CONTROL, "a");
		Thread.sleep(1000);
		customerAccountTxt.sendKeys(Keys.BACK_SPACE);
		enterText(customerAccountTxt, excelReader.getCellData(xlSheetName, 1072, 5));
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);
		
		click(departmentTxt);
		departmentTxt.sendKeys(Keys.CONTROL, "a");
		Thread.sleep(1000);
		departmentTxt.sendKeys(Keys.BACK_SPACE);
		enterText(departmentTxt, excelReader.getCellData(xlSheetName, 1073, 5));
		Thread.sleep(2000);
		tab(departmentTxt);
		
		/*customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);*/

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		String actQuantity = select1stRow_8thColumn.getText();
		String expQuantity = excelReader.getCellData(xlSheetName, 1071, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 1071, 7, actQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1072, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1072, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1073, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1074, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1073, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1073, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1074, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1073, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Quantity      : "+actQuantity     +"  value expected  "+expQuantity);
		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actQuantity.equalsIgnoreCase(expQuantity) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1071, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1071, 8, resFail);
			return false;
		}
	}	








	public boolean checkResavingPurchaseReturnsVoucher1AfterConsumingQuantityInSalesInvoiceN() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1075, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 1075, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1075, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1075, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1075, 8, resFail);
			return false;
		}
	}








	

	// Sixty Eight Scenario Starts : Try to Consume Batch Quantity By Loading Link in Two Link Documents By Using Do Not Club With Common Base Option, With Consuming partial Quantities

	public boolean checkEnablingDoNotClubWithCommonBaseFromPurchaseVoucherVATToSalesInvoiceN() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
		SettingsmenuBtn.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys(excelReader.getCellData(xlSheetName, 1076, 5));
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line1 > path').setAttribute('stroke-width', '8')");

		Thread.sleep(2000);

		//Thread.sleep(4000);
		//ClickUsingJs(link1TO2);
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link1TO2));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link1TO2));
		//ClickUsingJs(link1TO2);
		//getAction().moveToElement(link1TO2).click().build().perform();
		//link1TO2.click();
		moveToElement(link1TO2);
		
		
		
		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotClubWithCommonBaseChkbox));

		if(doNotClubWithCommonBaseChkboxIsSelected.isSelected()==false)
		{
			doNotClubWithCommonBaseChkbox.click();
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		OkBtn.click();

		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkFlowSaveBtn));
		designWorkFlowSaveBtn.click();

		String expMessage=excelReader.getCellData(xlSheetName, 1076, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1076, 7, actMessage);

		Thread.sleep(2000);
		checkLogoutAndLogin();

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 1076, 8, resPass);
			return true;
		}
		else
		{
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 1076, 8, resFail);
			return false;
		}
	}









	public boolean checkSavingPurchaseVoucherVATVoucher1AfterEnablingDoNotClubWithCommonBase() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1077, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1078, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1079, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1080, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 1081, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1082, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 1083, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 5); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 1077, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1077, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1078, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1079, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1078, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1078, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1079, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1078, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1077, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1077, 8, resFail);
			return false;
		}
	}









	public boolean checkSavingPurchaseReturnsVoucher1ByConsumingPartialQuantityAfterSavingPurchaseVoucherVATVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText(excelReader.getCellData(xlSheetName, 1084, 5));

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1085, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = excelReader.getCellData(xlSheetName, 1084, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1085, 6);

		excelReader.setCellData(xlfile, xlSheetName, 1084, 7, actWorkflowData);
		
		
		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1086, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 1087, 5));
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1086, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1086, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1087, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1088, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1087, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1087, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1088, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1087, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1084, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1084, 8, resFail);
			return false;
		}
	}	









	public boolean checkSavingSalesInvoiceNVoucher1ByLoadingFromWorkflowAfterConsumingPartiallyQuantityInPurchaseReturns() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1089, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = excelReader.getCellData(xlSheetName, 1089, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1090, 6);

		excelReader.setCellData(xlfile, xlSheetName, 1089, 7, actWorkflowData);
		
		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		if (validationConfirmationMessage.getText().isEmpty()==false) 
		{
			checkValidationMessage("Debit and Credit accounts cannot be same");
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		
		customerAccountTxt.sendKeys(Keys.CONTROL, "a");
		Thread.sleep(1000);
		customerAccountTxt.sendKeys(Keys.BACK_SPACE);
		enterText(customerAccountTxt, excelReader.getCellData(xlSheetName, 1090, 5));
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);
		
		click(departmentTxt);
		departmentTxt.sendKeys(Keys.CONTROL, "a");
		Thread.sleep(1000);
		departmentTxt.sendKeys(Keys.BACK_SPACE);
		
		enterText(departmentTxt, excelReader.getCellData(xlSheetName, 1091, 5));
		Thread.sleep(2000);
		tab(departmentTxt);
		
		
		/*customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1090, 5));
		customerAccountTxt.sendKeys(Keys.TAB);*/

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1091, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1091, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage=excelReader.getCellData(xlSheetName, 1092, 6);
		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1092, 7, actMessage);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);
		System.out.println("Error Message          : "+actMessage      +"  value expected  "+expMessage);	

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1089, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1089, 8, resFail);
			return false;
		}
	}	









	// Sixty Ninth Scenario Starts : Try to Consume Batch Quantity By Loading Link in Two Link Documents By Using Do Not Club With Common Base Option,With Consuming Full Quantities

	public boolean checkDeletingPurchaseReturnsVoucher1ForSixtyNinthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1093, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		Thread.sleep(2000);
		getAlert().accept();

		String expMessage =excelReader.getCellData(xlSheetName, 1093, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1093, 7, actMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1093, 8, resPass);

			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1093, 8, resFail);
			return false;
		}
	}






	public boolean checkReSavingPurchaseReturnsVoucher1ByLoadingWorkFlow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");
		
		
		
		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText(excelReader.getCellData(xlSheetName, 1094, 5));

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1095, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = excelReader.getCellData(xlSheetName, 1094, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1095, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1094, 7, actWorkflowData);
		
		
		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1096, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1096, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1096, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1097, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1098, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1097, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1097, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1098, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1097, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1094, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1094, 8, resFail);
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceNVoucher1ByLoadingFromWorkflowAfterConsumingFullQuantityInPurchaseReturns() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);
		
		
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1099, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = excelReader.getCellData(xlSheetName, 1099, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1100, 6);

		excelReader.setCellData(xlfile, xlSheetName, 1099, 7, actWorkflowData);
		
		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		if (validationConfirmationMessage.getText().isEmpty()==false) 
		{
			checkValidationMessage("Debit and Credit accounts cannot be same");
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		
		customerAccountTxt.sendKeys(Keys.CONTROL, "a");
		Thread.sleep(1000);
		customerAccountTxt.sendKeys(Keys.BACK_SPACE);
		enterText(customerAccountTxt, excelReader.getCellData(xlSheetName, 1090, 5));
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);
		
		click(departmentTxt);
		departmentTxt.sendKeys(Keys.CONTROL, "a");
		Thread.sleep(1000);
		departmentTxt.sendKeys(Keys.BACK_SPACE);
		enterText(departmentTxt, excelReader.getCellData(xlSheetName, 1091, 5));
		Thread.sleep(2000);
		tab(departmentTxt);
		
		
		/*customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1100, 5));
		customerAccountTxt.sendKeys(Keys.TAB);*/

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1101, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1101, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage=excelReader.getCellData(xlSheetName, 1102, 6);
		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1102, 7, actMessage);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);
		System.out.println("Error Message          : "+actMessage      +"  value expected  "+expMessage);	

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1099, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1099, 8, resFail);
			return false;
		}
	}	









	// Seventieth Scenario Starts : Try to Consume Batch Quantity By Loading Link in Two Link Documents By Using Do Not Club With Common Base Option,With Consuming Full Quantities and Suspending Resaving One Link Document

	public boolean checkSuspendingPurchaseReturnsVoucher1ForSeventiethScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1103, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 1103, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 1104, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1103, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 1105, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1105, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1103, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1103, 8, resFail);
			return false;
		}
	}







	public boolean checkSavingSalesInvoiceNVoucher1ByConvertingPendingVoucherAfterSuspendingPurchaseReturns() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		click(homePageVoucherArrowBtn);
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingPurchaseVoucherVATLink));
		pendingPurchaseVoucherVATLink.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1106, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingPurchaseVoucherVATLink));
		convertBtn.click();

		checkValidationMessage("Link data loaded");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		
		customerAccountTxt.sendKeys(Keys.CONTROL, "a");
		Thread.sleep(1000);
		customerAccountTxt.sendKeys(Keys.BACK_SPACE);
		enterText(customerAccountTxt, excelReader.getCellData(xlSheetName, 1107, 5));
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);
		
		click(departmentTxt);
		departmentTxt.sendKeys(Keys.CONTROL, "a");
		Thread.sleep(1000);
		departmentTxt.sendKeys(Keys.BACK_SPACE);
		enterText(departmentTxt, excelReader.getCellData(xlSheetName, 1108, 5));
		Thread.sleep(2000);
		tab(departmentTxt);
		
		
		/*customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);*/

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		String actQuantity = select1stRow_8thColumn.getText();
		String expQuantity = excelReader.getCellData(xlSheetName, 1106, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 1106, 7, actQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1107, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1107, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1108, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1109, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1108, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1108, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1109, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1108, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Quantity      : "+actQuantity     +"  value expected  "+expQuantity);
		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actQuantity.equalsIgnoreCase(expQuantity) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1106, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1106, 8, resFail);
			return false;
		}
	}	








	public boolean checkResavingPurchaseReturnsVoucher1AfterConsumingQuantityInSalesInvoiceNWithDoNotConsolidateWithCommonBase() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1110, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 1110, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1110, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1110, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1110, 8, resFail);
			return false;
		}
	}








	// Seventy One Scenario Starts : try to Consume batch Quantity More Than Available Quantity in outward Document through Link Between Sales Order and Sales Invoice

	public boolean checkSavingPurchaseVoucherVATVoucher1ForSeventyOneScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1111, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1112, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1113, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1114, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 1115, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1116, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 1117, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 5); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 1111, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1111, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1112, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1113, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1112, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1112, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1113, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1112, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1111, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1111, 8, resFail);
			return false;
		}
	}








	public boolean checkSavingSalesOrderVoucher1AfterSavingPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen Opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1118, 5));
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1119, 5));
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1120, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1121, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1122, 5));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		//enter_Quantity.sendKeys(Keys.TAB);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
		select1stRow_10thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1123, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		/*click(select1stRow_12thColumn);

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);
		
		click(res_OkBtn);
		
		
		
		
		
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");*/
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1118, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1119, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1118, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1118, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1119, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1118, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		Thread.sleep(2000);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1118, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1118, 8, resFail);
			return false;
		}
	}







	public boolean checkSavingSalesOrderVoucher2AfterSavingPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1124, 5));
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1125, 5));
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1126, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1127, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1128, 5));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(1500);
		
		if (errorMessage.getText().isEmpty()==false)
		{
			checkValidationMessage("This Transaction will make the Stock Negative");
			}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		//enter_Quantity.sendKeys(Keys.TAB);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
		select1stRow_10thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1129, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		/*click(select1stRow_12thColumn);

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);
		
		click(res_OkBtn);
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");*/
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*checkValidationMessage("This Transaction will make the Stock Negative");*/

		String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet(); 

		expMsg.add(excelReader.getCellData(xlSheetName, 1124, 6));
		//expMsg.add(excelReader.getCellData(xlSheetName, 1125, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 1126, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 1127, 6));
		String expMessage = expMsg.toString();
		excelReader.setCellData(xlfile, xlSheetName, 1124, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		Thread.sleep(2000);

		if(actMessage.equals(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1124, 8, resPass);

			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1124, 8, resFail);
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceVATVoucher1ByLoadingFromWorkflowAfterSavingSalesOrderDoc1AndDoc2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(3000);

		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = excelReader.getCellData(xlSheetName, 1130, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1131, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1132, 6);

		excelReader.setCellData(xlfile, xlSheetName, 1130, 7, actWorkflowData);
		
		
		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1130, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 1131, 5));
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batchno = select1stRow_19thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1133, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1133, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_3rdColumn));
		select2ndRow_3rdColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
		select2ndRow_19thColumn.click();

		Thread.sleep(2000);

		String actRow2BatchPopupIsEmpty = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expRow2BatchPopupIsEmpty = excelReader.getCellData(xlSheetName, 1134, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1134, 7, actRow2BatchPopupIsEmpty);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
		String actRow2Batchno = Boolean.toString(select2ndRow_19thColumn.getText().isEmpty());
		String expRow2Batchno = excelReader.getCellData(xlSheetName, 1135, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1135, 7, actRow2Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 1136, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1136, 7, actMessage);

		System.out.println("******** Row1 Batch No    : "+actRow1Batchno            +"  value expected  "+expRow1Batchno);
		System.out.println("Row 2 Batch Popup isEmpty : "+actRow2BatchPopupIsEmpty  +"  value expected  "+expRow2BatchPopupIsEmpty);
		System.out.println("******** Row2 Batch No    : "+actRow2Batchno            +"  value expected  "+expRow2Batchno);
		System.out.println("Error Message             : "+actMessage                +"  value expected  "+expMessage);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actRow2BatchPopupIsEmpty.equalsIgnoreCase(expRow2BatchPopupIsEmpty)
				&& actRow2Batchno.equalsIgnoreCase(expRow2Batchno) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1130, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1130, 8, resFail);
			return false;
		}
	}	








	// Seventy Two Scenario Starts : try to Consume batch Quantity More Than Available Quantity in outward Document through Loading Two Base Vouchers in two Link Vouchers

	public boolean checkSavingSalesInvoiceVATVoucher1ByLoadingFromWorkflowAndSelectingSalesOrderDoc1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		String actMessage;
		String expMessage;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(3000);

		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = excelReader.getCellData(xlSheetName, 1137, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1138, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1139, 6);

		excelReader.setCellData(xlfile, xlSheetName, 1137, 7, actWorkflowData);
		
		
		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1137, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1138, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 1139, 5));
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batchno = select1stRow_19thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1140, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1140, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		//HashSet<String> actMessage = new HashSet<String>();
		//HashSet<String> expMessage = new HashSet<String>();

		System.err.println(errorMessage.getText());
		
		if (errorMessage.getText().equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1140, 5))) 
		{
			/*for (int i = 0; i < 4; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Saving in background.");
			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Voucher saved successfully : 2");*/
			 actMessage = SavingInBackgroundTrial();

			HashSet<String> expMsg = new HashSet();

			expMsg.add(excelReader.getCellData(xlSheetName, 1141, 6));
			//expMsg.add(excelReader.getCellData(xlSheetName, 1142, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1143, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1144, 6));
			expMessage = expMsg.toString();
			excelReader.setCellData(xlfile, xlSheetName, 1141, 7, actMessage);
		}
		else
		{
			 actMessage = SavingInBackgroundTrial();

            HashSet<String> expMsg = new HashSet();

            expMsg.add(excelReader.getCellData(xlSheetName, 1142, 6));
            expMsg.add(excelReader.getCellData(xlSheetName, 1144, 6));                
            expMessage = expMsg.toString();
            excelReader.setCellData(xlfile, xlSheetName, 1141, 7, actMessage);

		}

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		System.out.println("******** Row1 Batch No    : "+actRow1Batchno            +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno)
				&& actMessage.equals(expMessage)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}	







	public boolean checkBatchPopupInSalesInvoiceVATVoucher2ByLoadingFromWorkflowAndSelectingSalesOrderDoc2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(3000);

		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = excelReader.getCellData(xlSheetName, 1145, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1146, 6);

		excelReader.setCellData(xlfile, xlSheetName, 1145, 7, actWorkflowData);
		
		
		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1145, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}
		Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1146, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 1147, 5));
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		String actRow2BatchPopupIsEmpty = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expRow2BatchPopupIsEmpty = excelReader.getCellData(xlSheetName, 1147, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1147, 7, actRow2BatchPopupIsEmpty);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batchno = Boolean.toString(select1stRow_19thColumn.getText().isEmpty());
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1148, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1148, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		

		String expMessage = excelReader.getCellData(xlSheetName, 1149, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1149, 7, actMessage);

		System.out.println("******** Row1 Batch No    : "+actRow1Batchno            +"  value expected  "+expRow1Batchno);
		System.out.println("Row 2 Batch Popup isEmpty : "+actRow2BatchPopupIsEmpty  +"  value expected  "+expRow2BatchPopupIsEmpty);
		System.out.println("Error Message             : "+actMessage                +"  value expected  "+expMessage);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow2BatchPopupIsEmpty.equalsIgnoreCase(expRow2BatchPopupIsEmpty)
				&& actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1145, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1145, 8, resFail);
			return false;
		}
	}	










	// Seventy Third Scenario Starts : try to Consume batch Quantity More Than Available Quantity in outward Document By Suspending and Resaving Link Voucher With Same Base Voucher

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForSeventyThirdScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1150, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 1150, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 1151, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1150, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 1152, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1152, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1150, 8, resPass);
			
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1150, 8, resFail);
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher2ByLoadingFromWorkflowAndSelectingSalesOrderDoc2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		String actMessage;
		String expMessage;
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen Opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);
		
		departmentTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(3000);

		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = excelReader.getCellData(xlSheetName, 1153, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1154, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1155, 6);

		excelReader.setCellData(xlfile, xlSheetName, 1153, 7, actWorkflowData);
		
		
		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1153, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1154, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 1155, 5));
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batchno = select1stRow_19thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1156, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1156, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		//HashSet<String> actMessage = new HashSet<String>();
		//HashSet<String> expMessage = new HashSet<String>();
		
		Thread.sleep(2000);

		if (errorMessage.getText().equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1156, 5))) 
		{
			/*for (int i = 0; i < 4; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}*/
			actMessage = SavingInBackgroundTrial();
			HashSet<String> expMsg = new HashSet();
			expMsg.add(excelReader.getCellData(xlSheetName, 1157, 6));
			//expMsg.add(excelReader.getCellData(xlSheetName, 1158, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1159, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1160, 6));
			expMessage = expMsg.toString();
			excelReader.setCellData(xlfile, xlSheetName, 1157, 7, actMessage);
		}
		else
		{
			/*for (int i = 0; i < 2; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}*/
			
			actMessage = SavingInBackgroundTrial();
			HashSet<String> expMsg = new HashSet();

			
			//expMsg.add(excelReader.getCellData(xlSheetName, 1158, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1160, 6));
			expMessage = expMsg.toString();
			excelReader.setCellData(xlfile, xlSheetName, 1157, 7, actMessage);
		}

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		System.out.println("******** Row1 Batch No    : "+actRow1Batchno +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno)
				&& actMessage.equals(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			excelReader.setCellData(xlfile, xlSheetName, 1153, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			excelReader.setCellData(xlfile, xlSheetName, 1153, 8, resFail);
			return false;
		}
	}	







	public boolean checkReSavingSalesInvoiceVATVoucherAfterSalesInvoiceVoucher2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1161, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 1161, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1161, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1161, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1161, 8, resFail);
			return false;
		}
	}








	// Seventy Forth Scenario Starts : Try to Auto Load batch Details In Outward Document through Links by Enabling Input batch Even If Stock is Not Updated Option in Base Voucher Settings

	public boolean checkSavingPurchaseVoucherVATVoucher1ForSeventyForthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1162, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1163, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1164, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1165, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 1166, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1167, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 1168, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 5); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 1162, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1162, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1163, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1164, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1163, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1163, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1164, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1163, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1162, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1162, 8, resFail);
			return false;
		}
	}







	


	public boolean checkEnablingInputBatchEvenIfStockIsNotUpdatedInSalesOrderVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
		settingsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsInventoryOptionsTab));
		SettingsInventoryOptionsTab.click();
		Thread.sleep(1000);
		click(inventoryBatchAndBinsBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputBatchEvenIfStockNoyUpdatedChkbox));

		if (inputBatchEvenIfStockNoyUpdatedChkboxIsSelected.isSelected()==false) 
		{
			inputBatchEvenIfStockNoyUpdatedChkbox.click();
			Thread.sleep(2000);
			System.err.println("==============:"+inputBatchEvenIfStockNoyUpdatedChkboxIsSelected.isSelected());
			
		}
		
		System.err.println("==============:"+inputBatchEvenIfStockNoyUpdatedChkboxIsSelected.isSelected());
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 1169, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1169, 7, actMessage);
		
		checkLogoutAndLogin();

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();*/
			Thread.sleep(1000);
			excelReader.setCellData(xlfile, xlSheetName, 1169, 8, resPass);
			return true;
		}
		else
		{
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();*/
			Thread.sleep(1000);
			excelReader.setCellData(xlfile, xlSheetName, 1169, 8, resPass);
			return false;
		}
	}








	public boolean checkSavingSalesOrderVoucher1AfterEnablingInputBatchEvenIfStockIsNotUpdated() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();
		
		Thread.sleep(1500);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen Opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1170, 5));
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1171, 5));
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1172, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1173, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1174, 5));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1175, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(4000);

		try 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
			if (res_CloseBtn.isDisplayed()) 
			{
				res_CloseBtn.click();
			}
		} 
		catch (Exception e) 
		{
			System.out.println(e.getMessage());
		}
		
		

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

			/*String actMessage =SavingInBackgroundTrial();

            HashSet<String> expMsg = new HashSet();

            expMsg.add(excelReader.getCellData(xlSheetName, 1170, 6));
            expMsg.add(excelReader.getCellData(xlSheetName, 1171, 6));                
            String expMessage = expMsg.toString();
            excelReader.setCellData(xlfile, xlSheetName, 1170, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1170, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1171, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1170, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		Thread.sleep(2000);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1170, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1170, 8, resFail);
			return false;
		}
	}







	public boolean checkSavingSalesOrderVoucher2AfterEnablingInputBatchEvenIfStockIsNotUpdated() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1176, 5));
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1177, 5));
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1178, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1179, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1180, 5));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1181, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		if (res_CloseBtn.isDisplayed()) 
		{
			res_CloseBtn.click();
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String actMessage;
		
		HashSet<String> expMsg = new HashSet<String>();
		
		Thread.sleep(2000);

		if (errorMessage.getText().equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1182, 5))) 
		{
			/*for (int i = 0; i < 4; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}*/
			
			actMessage = SavingInBackgroundTrial();
			
			expMsg.add(excelReader.getCellData(xlSheetName, 1176, 6));
			//expMsg.add(excelReader.getCellData(xlSheetName, 1177, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1178, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1179, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1176, 7, actMessage);
		}
		else
		{
			actMessage = SavingInBackgroundTrial();

			//expMsg.add(excelReader.getCellData(xlSheetName, 1177, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1179, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1176, 7, actMessage);
		}

		String expMessage = expMsg.toString();
		
		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		Thread.sleep(2000);

		if(actMessage.equals(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1176, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1176, 8, resFail);
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceVATVoucher1ByLoadingFromWorkflowAfterSavingSalesOrderDoc1AndDoc2AfterEnablingInputBatchEvenIfStockIsNotUpdated() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(3000);

		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = excelReader.getCellData(xlSheetName, 1183, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1184, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1185, 6);

		excelReader.setCellData(xlfile, xlSheetName, 1183, 7, actWorkflowData);
		
		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1183, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 1184, 5));
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batchno = select1stRow_19thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1186, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1186, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_3rdColumn));
		select2ndRow_3rdColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
		String actRow2Batchno = select2ndRow_19thColumn.getText();
		String expRow2Batchno = excelReader.getCellData(xlSheetName, 1187, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1187, 7, actRow2Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 1188, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1188, 7, actMessage);

		System.out.println("******** Row1 Batch No    : "+actRow1Batchno            +"  value expected  "+expRow1Batchno);
		System.out.println("******** Row2 Batch No    : "+actRow2Batchno            +"  value expected  "+expRow2Batchno);
		System.out.println("Error Message             : "+actMessage                +"  value expected  "+expMessage);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno)
				&& actRow2Batchno.equalsIgnoreCase(expRow2Batchno) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1183, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1183, 8, resFail);
			return false;
		}
	}	








	// Seventy Fifth Scenario Starts : Try to Auto Load batch Details In Outward Document through Loading Two Base Vouchers in two Link Vouchers

	public boolean checkSavingSalesInvoiceVATVoucher1ByLoadingFromWorkflowAndSelectingSalesOrderDoc1AfterEnablingInputBatchEvenIfStockIsNotUpdated() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(3000);

		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = excelReader.getCellData(xlSheetName, 1189, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1190, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1191, 6);

		excelReader.setCellData(xlfile, xlSheetName, 1189, 7, actWorkflowData);
		
		
		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1189, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1190, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 1191, 5));
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batchno = select1stRow_19thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1192, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1192, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String actMessage;
		HashSet<String> expMsg = new HashSet<String>();
		Thread.sleep(2000);

		if (errorMessage.getText().equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1192, 5))) 
		{
			actMessage = SavingInBackgroundTrial();

			expMsg.add(excelReader.getCellData(xlSheetName, 1193, 6));
			//expMsg.add(excelReader.getCellData(xlSheetName, 1194, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1195, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1196, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1193, 7, actMessage);
		}
		else
		{
			/*actMessage = SavingInBackgroundTrial();

			//expMsg.add(excelReader.getCellData(xlSheetName, 1194, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1196, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1193, 7, actMessage);*/
			
			String expMessage1= excelReader.getCellData(xlSheetName, 1193, 6);
			String expMessage2= excelReader.getCellData(xlSheetName, 1196, 6);
			
		    actMessage = checkValidationMessage(expMessage1);
			excelReader.setCellData(xlfile, xlSheetName, 1193, 7, actMessage);
			
			System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
		}
		
		String expMessage = expMsg.toString();

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		System.out.println("******** Row1 Batch No    : "+actRow1Batchno            +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno)
				&& actMessage.equalsIgnoreCase(expMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1189, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1189, 8, resFail);
			return false;
		}
	}	







	public boolean checkBatchPopupInSalesInvoiceVATVoucher2ByLoadingFromWorkflowAndSelectingSalesOrderDoc2AfterEnablingInputBatchEvenIfStockIsNotUpdated() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(3000);

		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = excelReader.getCellData(xlSheetName, 1197, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1198, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1197, 7, actWorkflowData);
		
		
		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1197, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1198, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 1199, 5));
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batchno = select1stRow_19thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1199, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1199, 7, actRow1Batchno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 1200, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1200, 7, actMessage);

		System.out.println("******** Row1 Batch No    : "+actRow1Batchno            +"  value expected  "+expRow1Batchno);
		System.out.println("Error Message             : "+actMessage                +"  value expected  "+expMessage);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1197, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1197, 8, resFail);
			return false;
		}
	}	









	// Seventy Sixth Scenario Starts : Try to Auto Load batch Details In Outward Document through Loading Same Base Vouchers in two Link Vouchers by Suspending and Resaving Link one Voucher

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForSeventySixthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1201, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 1201, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 1202, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1201, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 1203, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1203, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1201, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1201, 8, resFail);
			return false;
		}
	}







	public boolean checkSavingSalesInvoiceVATVoucher1ByLoadingFromWorkflowAndSelectingSalesOrderDoc2AfterSuspendingSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(3000);

		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = excelReader.getCellData(xlSheetName, 1204, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1205, 6)+getCurrentDateF3()+excelReader.getCellData(xlSheetName, 1206, 6);

		excelReader.setCellData(xlfile, xlSheetName, 1204, 7, actWorkflowData);

		
		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1204, 5))) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1205, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 1206, 5));
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batchno = select1stRow_19thColumn.getText();
		String expRow1Batchno = excelReader.getCellData(xlSheetName, 1207, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1207, 7, actRow1Batchno);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String actMessage;
		HashSet<String> expMsg = new HashSet<String>();

		Thread.sleep(2000);

		if (errorMessage.getText().equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1207, 5))) 
		{
			actMessage = SavingInBackgroundTrial();

			expMsg.add(excelReader.getCellData(xlSheetName, 1208, 6));
			//expMsg.add(excelReader.getCellData(xlSheetName, 1209, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1210, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1211, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1208, 7, actMessage);

		}
		else
		{
			/*actMessage = SavingInBackgroundTrial();

			expMsg.add(excelReader.getCellData(xlSheetName, 1209, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1211, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1208, 7, actMessage);*/
			
			String expMessage1= excelReader.getCellData(xlSheetName, 1208, 6);
			String expMessage2= excelReader.getCellData(xlSheetName, 1211, 6);
			
			 actMessage = checkValidationMessage(expMessage1);
			excelReader.setCellData(xlfile, xlSheetName, 1208, 7, actMessage);
			
		   
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		}

		String expMessage = expMsg.toString();
		
		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		System.out.println("******** Row1 Batch No    : "+actRow1Batchno            +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno)
				&& actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			excelReader.setCellData(xlfile, xlSheetName, 1204, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			excelReader.setCellData(xlfile, xlSheetName, 1204, 8, resFail);
			return false;
		}
	}







	public boolean checkReSavingSalesInvoiceVATVoucher1AfterSalesInvoiceVoucher2BySelectingSalesOrderVoucher2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1212, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 1212, 6);

		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1212, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1212, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1212, 8, resFail);
			return false;
		}
	}










	// Sudheer

	public boolean checkSavingPurchaseVoucherVATWithCurrentdate() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1213, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1214, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1215, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1216, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 1217, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1218, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 1219, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 1213, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1213, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1214, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1215, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1214, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1214, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1215, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1214, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1213, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1213, 8, resFail);
			return false;
		}

	}

	
	public boolean checkAuthorisationOFSalesInvoiceDocumentWithoutEnablingInventoryOptionUnderkeepUnposted() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
		SettingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
		transactionAuthorizationBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
		documentNameDropdown.sendKeys(" ");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesExpandBtn));
		salesInvoicesExpandBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVAT));
		salesInvoiceVAT.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 1220, 5));

		Thread.sleep(3000);

		nameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addLevelBtn));
		addLevelBtn.click();

		Thread.sleep(2000);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(descriptionTxt));
		descriptionTxt.click();
		descriptionTxt.sendKeys(excelReader.getCellData(xlSheetName, 1221, 5));
		Thread.sleep(1000);
		descriptionTxt.sendKeys(Keys.TAB);


		Thread.sleep(2000);

		if(conditionNotRequiredChkBox.isSelected()==false)
		{
			conditionNotRequiredChkBox.click();
		}

		String actConditionNotRequiredIsSelected = Boolean.toString(conditionNotRequiredChkBox.isSelected());
		String expConditionNotRequiredIsSelected = excelReader.getCellData(xlSheetName, 1220, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1220, 7, actConditionNotRequiredIsSelected);

		System.out.println("Condition Not Required IsSelected  : "+actConditionNotRequiredIsSelected+" Value Expected "+expConditionNotRequiredIsSelected);


		Thread.sleep(2000);

		if(keepUnpostedInventoryChkBox.isSelected()==true)
		{
			keepUnpostedInventoryChkBox.click();
		}

		String actkeepUnpostedInventoryChkBox = Boolean.toString(keepUnpostedInventoryChkBox.isSelected());
		String expkeepUnpostedInventoryChkBox = excelReader.getCellData(xlSheetName, 1221, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1221, 7, actkeepUnpostedInventoryChkBox);

		System.out.println("keepUnpostedInventoryChkBox  : "+actkeepUnpostedInventoryChkBox+" Value Expected "+expkeepUnpostedInventoryChkBox);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userSelectionTab));
		userSelectionTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userrow1));
		userrow1.click();
		Select user = new Select(userDropdown);
		user.selectByVisibleText(excelReader.getCellData(xlSheetName, 1222, 5));

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
		definitionOkBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
		tranAuthSaveBtn.click();

		String expValidationMsg = excelReader.getCellData(xlSheetName, 1222, 6);
		String actValidationMsg = checkValidationMessage(expValidationMsg);
		excelReader.setCellData(xlfile, xlSheetName, 1222, 7, actValidationMsg);

		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+"True");

		if(actConditionNotRequiredIsSelected.equalsIgnoreCase(expConditionNotRequiredIsSelected) && actValidationMsg.equalsIgnoreCase(expValidationMsg) &&
				actkeepUnpostedInventoryChkBox.equalsIgnoreCase(expkeepUnpostedInventoryChkBox))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1220, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1220, 8, resFail);
			return false;
		}


	}



	public boolean checkSalesInvoiceVAT1WithFutureDateAfterSavingAuthorisationOnSales() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		Thread.sleep(2000);
		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 1 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1223, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1224, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 1225, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1226, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1227, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 1228, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 1229, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1230, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 1223, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1223, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 1224, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1224, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 1225, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1225, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 1226, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1226, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 1227, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1227, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 1228, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1228, 7, act1stRowBaseQuantity);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 1229, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1229, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 1230, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1230, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 1231, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1231, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 1232, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1232, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 1233, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1233, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		
		/*String actMessage = SavingInBackgroundTrial();
		
		
        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1234, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1235, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1234, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1234, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1235, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1234, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);
		
		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1223, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1223, 8, resFail);
			return false;
		}

	}





	public boolean checkSavingSalesInvoiceVAT1WithCurrentDateAfterBatchConsumed() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1236, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1237, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 1238, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1239, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1240, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 1241, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 1242, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1243, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 1236, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1236, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 1237, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1237, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 1238, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1238, 7, actAdjustQuantity);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 1239, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1239, 7, actBalance);

		String actBatchPopupTable = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expBatchPopupTable = excelReader.getCellData(xlSheetName, 1240, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 1240, 7, actBatchPopupTable);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 1241, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1241, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 1242, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1242, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable.equalsIgnoreCase(expBatchPopupTable) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1236, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1236, 8, resFail);
			return false;
		}
	}


	

	public boolean checkLoginToAuthoriseUserForSalesAuthorisation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		userNameDisplayLogo.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		logoutOption.click();

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt=excelReader.getCellData(xlSheetName, 1244, 5);

		String pawslt=excelReader.getCellData(xlSheetName, 1245, 5);

		boolean qflag=true;

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);


		/*String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}

		}


		Thread.sleep(2000);*/
		
		String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}


		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(5000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(4999);

		int voucherGridDocNoCount = voucherGridDocNo.size();

		String actSavedVouchersCount = Integer.toString(voucherGridDocNoCount-1);
		String expSavedVouchersCount = excelReader.getCellData(xlSheetName, 1244, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1244, 7, actSavedVouchersCount);

		String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
		String expAuthorizationStatus = excelReader.getCellData(xlSheetName, 1245, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1245, 7, actAuthorizationStatus);

		Thread.sleep(2000);
		
		click(homePageVoucherArrowBtn);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
		pendingAuthorizationPurchases.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
		voucherHomeRow1ChkBox.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
		authorizeBtn.click();

		System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndConditionsNotRequiredOption  *********************************");

		System.out.println("SavedVouchersCount        : "+actSavedVouchersCount        +" Value Expected : "+expSavedVouchersCount);
		System.out.println("AuthorizationStatus       : "+actAuthorizationStatus       +" Value Expected : "+expAuthorizationStatus);

		if(actSavedVouchersCount.equalsIgnoreCase(expSavedVouchersCount) && actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus))
		{
			System.out.println("Test Pass : Authorized Succesfully");
			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1244, 8, resPass);
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Authorized Succesfully");
			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1244, 8, resFail);

			return false;
		}
	}

	

	public boolean checkLoginToSuperUserAndSavingSalesInvioceVAT2AfterAuthorisation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		logoutOption.click();

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt=excelReader.getCellData(xlSheetName, 1246, 5);

		String pawslt=excelReader.getCellData(xlSheetName, 1247, 5);

		boolean qflag=true;

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);
		
		
		String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}


		Thread.sleep(2000);


		/*String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}*/


		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(2000);

		//Reuse

		boolean actResult = checkSavingSalesInvoiceVAT1WithCurrentDateAfterBatchConsumed();
		boolean expResult = Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1246, 6));
		excelReader.setCellData(xlfile, xlSheetName, 1246, 7, Boolean.toString(actResult));
		
		System.err.println(actResult+"  "+expResult);
		
		if (actResult==expResult)
		{

			System.err.println(" Test Pass: Batch pop displayed Blank");
			excelReader.setCellData(xlfile, xlSheetName, 1246, 8, resPass);
			return true;
		}
		else
		{

			System.err.println(" Test FAIL: Batch pop displayed Blank");
			excelReader.setCellData(xlfile, xlSheetName, 1246, 8, resFail);
			return true;
		}
	}

	



	public boolean checkSuspendingVoucherInSalesInvoiceVAT() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
		voucherHomeRow1ChkBox.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editBtn));
		editBtn.click();

		checkValidationMessage("Voucher Loaded Sucessfully");
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1=excelReader.getCellData(xlSheetName, 1248, 6);
		String expSuspendMessage2=excelReader.getCellData(xlSheetName, 1249, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1248, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 1250, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1250, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1)
				&& actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			System.out.println(" Test Pass: Voucher Susupended Succesfully");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1248, 8, resPass);
			return true;
		}
		else
		{
			System.out.println(" Test FAIL: Voucher Susupended Succesfully");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1248, 8, resFail);
			return false;
		}
	}



	
	

	public boolean checkSavingSalesVoucher2AfterSuspending1stVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 1 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1251, 5));
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1252, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 1253, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1254, 5));
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1255, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(excelReader.getCellData(xlSheetName, 1256, 5));
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(excelReader.getCellData(xlSheetName, 1257, 5));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1258, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 1251, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1251, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 1252, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1252, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 1253, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1253, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 1254, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1254, 7, actBalance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo=excelReader.getCellData(xlSheetName, 1255, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1255, 7, act1stRowBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity=excelReader.getCellData(xlSheetName, 1256, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1256, 7, act1stRowBaseQuantity);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = excelReader.getCellData(xlSheetName, 1257, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1257, 7, act1stRowRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = excelReader.getCellData(xlSheetName, 1258, 6);//0
		excelReader.setCellData(xlfile, xlSheetName, 1258, 7, act1stRowAdjQty);

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 1259, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1259, 7, actTotalQuantity);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 1260, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1260, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 1261, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1261, 7, actBatchNo);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		//Thread.sleep(2000);

		/*String actMessage = SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1262, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1263, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1262, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1262, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1263, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1262, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1251, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1251, 8, resFail);
			return false;
		}

	}


	public boolean checkResavingSales1stVoucherAfterBatchConsumedIn2ndVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		//Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1264, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		String expSuspendMessage =excelReader.getCellData(xlSheetName, 1264, 6);
		String actSuspendMessage = checkValidationMessage(expSuspendMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1264, 7, actSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		if(actSuspendMessage.equalsIgnoreCase(expSuspendMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1264, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1264, 8, resFail);
			return false;
		}
	}




	public boolean checkDeletingPurchaseVoucherVATAfterBatchConsumedInSalesInvoiceVat() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();
		
		Thread.sleep(2000);
		
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1265, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		getAlert().accept();

		String expMessage = excelReader.getCellData(xlSheetName, 1265, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1265, 7, actMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1265, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1265, 8, resFail);
			return false;
		}
	}



	



	public boolean checkSuspendingVoucherInPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1266, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 1266, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1266, 7, actMessage);

		Thread.sleep(2000);


		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1266, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1266, 8, resFail);
			return false;
		}
	}



	public boolean checkChangingQuantityInPurchaseVoucherAfterBatchConsumed() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1267, 5))) 
			{

				getAction().doubleClick(grid_CheckBoxList.get(i)).click().build().perform();
				break;
			}
		}


		checkValidationMessage("Voucher Loaded Successfully");


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 1268, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1=excelReader.getCellData(xlSheetName, 1267, 6);
		String actMessage=checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1267, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage );

		if(actMessage.equalsIgnoreCase(expMessage1) ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();

			getAlert().accept();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1267, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();

			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1267, 8, resFail);
			return false;
		}
	}


	


	public boolean checkDeletingVoucherInSalesInvoiceVATWhenStatusInPending() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);
		
		click(homePageVoucherArrowBtn);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomePAgeHeaderAllChkbox));
		voucherHomePAgeHeaderAllChkbox.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();

		getAlert().accept();

		String expDeleteMessage =  excelReader.getCellData(xlSheetName, 1269, 6);
		String expDeleteMessage1 = excelReader.getCellData(xlSheetName, 1270, 6);
		String actDeleteMessage = checkValidationMessage(expDeleteMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1269, 7, actDeleteMessage);

		if( actDeleteMessage.startsWith(expDeleteMessage) && 
				actDeleteMessage.endsWith(expDeleteMessage1)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1269, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1269, 8, resFail);
			return false;
		}
	}

	public boolean checkEnablingInventoryoptionUnderkeepUnpostedInTransdactionAuthorisationOfSalesType() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
		SettingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
		transactionAuthorizationBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
		documentNameDropdown.sendKeys(" ");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesExpandBtn));
		salesInvoicesExpandBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVAT1));
		salesInvoiceVAT1.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 1271, 5));

		Thread.sleep(3000);

		nameTxt.sendKeys(Keys.TAB);

		Thread.sleep(5999);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
		getAction().doubleClick(Level1editBtn).build().perform();
		

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(descriptionTxt));
		descriptionTxt.click();
		descriptionTxt.sendKeys(Keys.TAB);


		Thread.sleep(2000);

		if(conditionNotRequiredChkBox.isSelected()==false)
		{
			conditionNotRequiredChkBox.click();
		}

		boolean actConditionNotRequiredIsSelected = conditionNotRequiredChkBox.isSelected();
		boolean expConditionNotRequiredIsSelected = Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1271, 6));
		excelReader.setCellData(xlfile, xlSheetName, 1271, 7, Boolean.toString(actConditionNotRequiredIsSelected));

		System.out.println("Condition Not Required IsSelected  : "+actConditionNotRequiredIsSelected+" Value Expected "+expConditionNotRequiredIsSelected);


		Thread.sleep(2000);
		
		ScrollToElement(keepUnpostedInventoryChkBox);

		if(keepUnpostedInventoryChkBox.isSelected()==false)
		{
			//keepUnpostedInventoryChkBox.click();
			ClickUsingJs(keepUnpostedInventoryChkBox);
		}

		Thread.sleep(2000);
		boolean actkeepUnpostedInventoryChkBox = keepUnpostedInventoryChkBox.isSelected();
		boolean expkeepUnpostedInventoryChkBox = Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1272, 6));
		excelReader.setCellData(xlfile, xlSheetName, 1272, 7, Boolean.toString(actkeepUnpostedInventoryChkBox));

		System.out.println("keepUnpostedInventoryChkBox  : "+actkeepUnpostedInventoryChkBox+" Value Expected "+expkeepUnpostedInventoryChkBox);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
		definitionOkBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
		tranAuthSaveBtn.click();

		String expValidationMsg = excelReader.getCellData(xlSheetName, 1273, 6);
		String actValidationMsg = checkValidationMessage(expValidationMsg);
		excelReader.setCellData(xlfile, xlSheetName, 1273, 7, actValidationMsg);

		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+"True");

		if(actConditionNotRequiredIsSelected==expConditionNotRequiredIsSelected && actValidationMsg.equalsIgnoreCase(expValidationMsg) &&
				actkeepUnpostedInventoryChkBox==expkeepUnpostedInventoryChkBox)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1271, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1271, 8, resFail);
			return false;
		}
	}


	

	public boolean checkSavingVoucherinSalesInvoiceVATAfterEnablingInventoryOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		String act =Boolean.toString(checkSalesInvoiceVAT1WithFutureDateAfterSavingAuthorisationOnSales());
		String exp =(excelReader.getCellData(xlSheetName, 1274, 6)); 
		excelReader.setCellData(xlfile, xlSheetName, 1274, 7, act);
		
		System.err.println(act  +"    "+exp);

		if (act.equalsIgnoreCase(exp)) 
		{
			System.out.println(" Test PasS: Voucher is saved in Sales With Full Consumption ");
			excelReader.setCellData(xlfile, xlSheetName, 1274, 8, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test FAIL: Voucher is saved in Sales With Full Consumption ");
			excelReader.setCellData(xlfile, xlSheetName, 1274, 8, resFail);
			return false;
		}
	}



	public boolean checkSavingSalesINvoiceVAT2AfterFullBatchConsumedIn1stVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		boolean actual     =checkSavingSalesVoucher2AfterSuspending1stVoucher();
		boolean expected   =Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1275, 6));
		excelReader.setCellData(xlfile, xlSheetName, 1275, 7, Boolean.toString(actual));
		
		System.err.println(actual  +"    "+expected);

		if (actual==expected) 
		{

			System.out.println(" Test PasS: Voucher2 is saved in Sales With Full Consumption  ");
			excelReader.setCellData(xlfile, xlSheetName, 1275, 8, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test FAIL: Voucher is saved in Sales With Full Consumption ");
			excelReader.setCellData(xlfile, xlSheetName, 1275, 8, resFail);
			return false;
		}

	}


	
	
	public boolean checkLoginToUserAllOptionsToAuthoriseSalesVouchers1() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{ 
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());

		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		logoutOption.click();

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt=excelReader.getCellData(xlSheetName, 1276, 5);

		String pawslt =excelReader.getCellData(xlSheetName, 1277, 5);

		boolean qflag=true;

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);
		
		String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}


		Thread.sleep(2000);


		/*String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}

		}*/


		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(5000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();


		Thread.sleep(3999);
		
		click(homePageVoucherArrowBtn);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
		pendingAuthorizationPurchases.click();

		Thread.sleep(2000);

		int voucherGridDocNoCount = voucherGridDocNo.size();

		String actSavedVouchersCount = Integer.toString(voucherGridDocNoCount-1);
		String expSavedVouchersCount = excelReader.getCellData(xlSheetName, 1276, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1276, 7, actSavedVouchersCount);

		ArrayList<String>voucherGridDocNocount=new ArrayList<>();
		for (int j = 0; j < voucherGridDocNoCount; j++) 
		{
			String data=voucherGridDocNo.get(j).getText();
			if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1278, 5)))
			{
				voucherGridCheckBoxList.get(j).click();
			}
		}

		Thread.sleep(3000);

		String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
		String expAuthorizationStatus = excelReader.getCellData(xlSheetName, 1277, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1277, 7, actAuthorizationStatus);

		String actAuthorizationStatus2 = voucherGridRow2AuthorizationStatus.getText();
		String expAuthorizationStatus2= excelReader.getCellData(xlSheetName, 1278, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1278, 7, actAuthorizationStatus2);

		Thread.sleep(2999);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
		authorizeBtn.click();

		Thread.sleep(2999);

		System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndConditionsNotRequiredOption  *********************************");

		System.out.println("AuthorizationStatus       : "+actAuthorizationStatus       +" Value Expected : "+expAuthorizationStatus);
		System.out.println("AuthorizationStatus2       : "+actAuthorizationStatus2       +" Value Expected : "+expAuthorizationStatus2);

		if( actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus) && 
				actAuthorizationStatus2.equalsIgnoreCase(expAuthorizationStatus2))
		{
			System.out.println("Test Pass : Authorized Succesfully");
			excelReader.setCellData(xlfile, xlSheetName, 1276, 8, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Authorized Succesfully");
			excelReader.setCellData(xlfile, xlSheetName, 1276, 8, resFail);
			return false;
		}

	}

	public boolean chechAuthoriseVoucher2AfterAuthorisation1stVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(3000);
		
		click(homePageVoucherArrowBtn);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
		pendingAuthorizationPurchases.click();

		int voucherGridDocNoCount = voucherGridDocNo.size();

		int actSavedVouchersCount = voucherGridDocNoCount-1;
		int expSavedVouchersCount = Integer.parseInt(excelReader.getCellData(xlSheetName, 1279, 6));
		excelReader.setCellData(xlfile, xlSheetName, 1279, 7, Integer.toString(actSavedVouchersCount));

		System.out.println("actSavedVouchersCount : "+actSavedVouchersCount +" Value Exp : "+expSavedVouchersCount);

		Thread.sleep(4999);
		System.out.println(" One Voucher is Authorised and Secound to be selected ");

		ArrayList<String>voucherGridDocNocount=new ArrayList<>();
		for (int j = 0; j < voucherGridDocNoCount; j++) 
		{
			String data=voucherGridDocNo.get(j).getText();
			if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1279, 5)))
			{
				voucherGridCheckBoxList.get(j).click();
			}
		}

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
		authorizeBtn.click();

		Thread.sleep(2000);

		String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
		String expAuthorizationStatus = excelReader.getCellData(xlSheetName, 1280, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1280, 7, actAuthorizationStatus);

		Thread.sleep(2000);

		int actSavedVouchersCountAfterAuthorisation = voucherGridDocNoCount-1;
		int expSavedVouchersCountAfterAuthorisation = Integer.parseInt(excelReader.getCellData(xlSheetName, 1281, 6));
		excelReader.setCellData(xlfile, xlSheetName, 1281, 7, Integer.toString(actSavedVouchersCountAfterAuthorisation));

		System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndConditionsNotRequiredOption  *********************************");

		System.out.println("SavedVouchersCount        : "+actSavedVouchersCount        +" Value Expected : "+expSavedVouchersCount);
		System.out.println("AuthorizationStatus       : "+actAuthorizationStatus       +" Value Expected : "+expAuthorizationStatus);
		System.out.println("AfterAuthorisation        : "+actSavedVouchersCountAfterAuthorisation  +" Value Expected : "+expSavedVouchersCountAfterAuthorisation);

		if(actSavedVouchersCount==expSavedVouchersCount && actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus) 
				&& actSavedVouchersCountAfterAuthorisation==expSavedVouchersCountAfterAuthorisation)
		{
			System.out.println("Test Pass : Voucher Can not be Authorise ");
			excelReader.setCellData(xlfile, xlSheetName, 1279, 8, resPass);

			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Can not be Authorise ");
			excelReader.setCellData(xlfile, xlSheetName, 1279, 8, resFail);
			return false;
		}
	}

	
	
	


	public boolean checkLogintoSuperUseAndSavingSalesInvoice2After1stVoucherAuthorised() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		boolean act  = checkLoginToSuperUserAndSavingSalesInvioceVAT2AfterAuthorisation();
		boolean exp  = Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1282, 6));
		excelReader.setCellData(xlfile, xlSheetName, 1282, 7, Boolean.toString(act));
		
		
		System.err.println(act+"     "+exp);

		if (act==exp) 
		{
			System.err.println(" Test Pass: After Authorisation Batch is not displaying again to consume ");
			excelReader.setCellData(xlfile, xlSheetName, 1282, 8, resPass);
			return true;
		} 
		else 
		{
			System.err.println(" Test FAIL: After Authorisation Batch is  displaying again to consume ");
			excelReader.setCellData(xlfile, xlSheetName, 1282, 8, resFail);
			return false;
		}
	}


	
	
	

	public boolean checkDeletingVoucherInSalesInvoiceWithAuthorisationStatusPending() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1283, 5))) 
			{
				voucherGridCheckBoxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();

		getAlert().accept();

		String ExpMessage=excelReader.getCellData(xlSheetName, 1283, 6);
		String actMessage=checkValidationMessage(ExpMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1283, 7, actMessage);

		if(actMessage.equalsIgnoreCase(ExpMessage) ) 
		{
			System.out.println(" Test PASS: Vocuher deleted successfully from home page ");
			excelReader.setCellData(xlfile, xlSheetName, 1283, 8, resPass);
			return true;
		}
		else
		{
			System.out.println(" Test FAIL: Vocuher deleted successfully from home page ");
			excelReader.setCellData(xlfile, xlSheetName, 1283, 8, resFail);
			return false;
		}
	}
	
	
	


	public boolean checkSuspendingSalesVoucher1AfterAuthorisation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		Thread.sleep(2000);
		
		click(homePageVoucherArrowBtn);
		Thread.sleep(1000);

		homePageAllVouchersView.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
		voucherHomeRow1ChkBox.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		String ExpMessage=excelReader.getCellData(xlSheetName, 1284, 6);
		String actMessage=checkValidationMessage(ExpMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1284, 7, actMessage);

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 1285, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1285, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if (actMessage.equalsIgnoreCase(ExpMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			System.out.println(" Test Pass : Voucher Suspended ");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1284, 8, resPass);
			return true;

		} 
		else 
		{
			System.out.println(" Test Fail : Voucher Suspended ");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1284, 8, resFail);
			return false;
		}
	}

	
	
	

	public boolean checkSavingVoucherInSalesInvoice2AfterSusoendingVocher1() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		boolean act = checkSavingSalesVoucher2AfterSuspending1stVoucher();
		boolean exp = Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1286, 6));
		excelReader.setCellData(xlfile, xlSheetName, 1286, 7, Boolean.toString(act));
		
		System.err.println(act+"    "+exp);

		if (act==exp) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1286, 8, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1286, 8, resFail);
			return false;
		}
	}
	
	
	
	
	

	public boolean checkResavingSalesInvoice1VoucherAfterBatchConsumedinVoucher2() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1287, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1287, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1288, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1287, 7, actMessage);


		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1287, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1288, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1287, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1287, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1287, 8, resFail);
			return false;
		}
	}

	
	
	
	

	public boolean checkDeletingPurchasVatVoucherAfterBatchConsumedinSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		Thread.sleep(2000);
		
		boolean act  =checkDeletingPurchaseVoucherVATAfterBatchConsumedInSalesInvoiceVat();
		boolean exp  =Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1289, 6));
		excelReader.setCellData(xlfile, xlSheetName, 1289, 7, Boolean.toString(act));

		if (act==exp)
		{
			excelReader.setCellData(xlfile, xlSheetName, 1289, 8, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1289, 8, resFail);
			return false;
		}
	}

	
	
	
	
	
	public boolean checkSuspendingPurchasVatVoucherAfterBatchConsumedinSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		Thread.sleep(2000);
		
		boolean act =checkSuspendingVoucherInPurchaseVoucherVAT();
		boolean exp =Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1290, 6));
		excelReader.setCellData(xlfile, xlSheetName, 1290, 7, Boolean.toString(act));

		if (checkSuspendingVoucherInPurchaseVoucherVAT()==true)
		{
			excelReader.setCellData(xlfile, xlSheetName, 1290, 8, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1290, 8, resFail);
			return false;
		}
	}
	
	
	
	
	


	public boolean checkChangingQunatityInPurchaseVoucherAfterConsumed() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		boolean act=checkChangingQuantityInPurchaseVoucherAfterBatchConsumed();
		boolean exp=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1291, 6));
		excelReader.setCellData(xlfile, xlSheetName, 1291, 7, Boolean.toString(act));

		if (act==exp)
		{
			excelReader.setCellData(xlfile, xlSheetName, 1291, 8, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1291, 8, resFail);
			return false;
		}
	}
	
	
	
	


	//Scenarios With Reservations	
	
	

	public boolean checkEraseAllDATA() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException, AWTException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";
		
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
		dataMangementMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
		eraseAll.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
		eraseTranscationsRadio.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
		eraseAllOkBtn.click();

		if(getIsAlertPresent())
		{
			getWaitForAlert();

			getAlert().accept();
		}

		String expValidationMsg=excelReader.getCellData(xlSheetName, 1292, 6);

		String actValidationMsg=checkValidationMessage(expValidationMsg);
		excelReader.setCellData(xlfile, xlSheetName, 1292, 7, actValidationMsg);
		
		System.out.println("************************************* checkEraseAllTransactions  *********************************");
		System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(3000);
		
		Thread.sleep(2000);
		prongHornOn();
		Thread.sleep(10000);

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		Thread.sleep(2000);
		
		String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}


		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(7000);

		String actUserInfo1=userNameDisplay.getText();

		System.out.println("User Info  : "+actUserInfo1);

		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		String getCompanyTxt1=companyName.getText();
		String getLoginCompanyName1=getCompanyTxt1.substring(0, 19);
		System.out.println("company name  :  "+ getLoginCompanyName1);
		companyLogo.click();

		String expUserInfo1           ="SU";
		String expLoginCompanyName1   ="Automation Options ";

		System.out.println("UserInfo1             : "+actUserInfo1            +" Value Expected : "+expUserInfo1);
		System.out.println("LoginCompanyName1     : "+getLoginCompanyName1    +" Value Expected : "+expLoginCompanyName1);

		if (actValidationMsg.equalsIgnoreCase(expValidationMsg) && actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1))
		{
			excelReader.setCellData(xlfile, xlSheetName, 1292, 8, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1292, 8, resFail);
			return false;
		}
	}

	
	
	

	public boolean checkSavingPurchaseVoucherVATForReservation() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		String act  =Boolean.toString(checkSavingPurchaseVoucherVATWithCurrentdate());
		String exp  =excelReader.getCellData(xlSheetName, 1293, 6);
		
		excelReader.setCellData(xlfile, xlSheetName, 1293, 7, act);
		
		Thread.sleep(2000);

		if (act.equalsIgnoreCase(exp)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1293, 8, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1293, 8, resFail);
			return false;
		}
	}
	
	
	



	




	public boolean checkSalesOrderInReservationTypeIsManualAndinputBatchEvenIfStockNoyUpdatedChkbox() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
		settingsBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTab));
		inventoryTab.click();

		Thread.sleep(2000);
		
		click(inventorySettingsBtn);
		Thread.sleep(2000);

		Select s1=new Select(inventoryTabReservationTypeDrpddwn);
		s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 1294, 5));

		Thread.sleep(1999);
		
		click(inventorySettingsBtn);
		
		Thread.sleep(1999);
		
		click(inventoryBatchAndBinsBtn);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputBatchEvenIfStockNoyUpdatedChkbox));

		if (inputBatchEvenIfStockNoyUpdatedChkboxIsSelected.isSelected()==true) 
		{
			inputBatchEvenIfStockNoyUpdatedChkbox.click();
		}

		Thread.sleep(1999);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();

		String expMessage1=excelReader.getCellData(xlSheetName, 1294, 6);
		String actMessage=checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1294, 7, actMessage);
		
		checkLogoutAndLogin();

		if (actMessage.equalsIgnoreCase(expMessage1)) 
		{
			System.out.println(" Test Pass: Setting Updated ");
			Thread.sleep(1999);
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 1294, 8, resPass);
			return true;
		} 
		else
		{
			System.out.println(" Test Fail: Setting Updated ");
			Thread.sleep(1999);
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 1294, 8, resFail);
			return false;
		}
	}
	
	
	



	
	

	
	public boolean checkSalesOrderInReservationTypeIsManual2() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
		settingsBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTab));
		inventoryTab.click();

		Thread.sleep(2000);
		//click(inventorySettingsBtn);
		Thread.sleep(1000);
		
		try {
			if(inventoryTabReservationTypeDrpddwn.isDisplayed()==false)
			{
				click(inventorySettingsBtn);
			}
			
		} catch (Exception e) {
			
		}



 

		Select s1=new Select(inventoryTabReservationTypeDrpddwn);
		s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 1685, 5));

		Thread.sleep(1000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		Thread.sleep(2000);

		String expMessage1=excelReader.getCellData(xlSheetName, 1685, 6);
		String actMessage=checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1685, 7, actMessage);
		
		checkLogoutAndLogin();

		if (actMessage.equalsIgnoreCase(expMessage1)) 
		{
			System.out.println(" Test Pass: Setting Updated ");
			Thread.sleep(1999);
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 1685, 8, resPass);
			return true;
		} 
		else
		{
			System.out.println(" Test Fail: Setting Updated ");
			Thread.sleep(1999);
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 1685, 8, resFail);
			return false;
		}
	}
	
	
	





	public boolean checkVoucherSavingMessage(String docno) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
			String actErrorMessage=errorMessage.getText();
			String expErrorMessage="Voucher saved successfully";
			String expErrorMessage1=": "+docno;

			System.out.println("SavingMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage+" "+expErrorMessage1);

			if(actErrorMessage.startsWith(expErrorMessage) && actErrorMessage.endsWith(expErrorMessage1))
			{
				try
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
					errorMessageCloseBtn.click();

					return  true;
				}
				catch(Exception ee)
				{
					return true;
				}	
			}
			else
			{
				return false;
			}	
		}
		catch(Exception e)
		{
			System.err.println("UNABLE TO COMPARE");
			return false;
		}
	}

	


	public boolean checkSavingSalesOrderVoucher1() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		System.out.println("*****************checkSavingSalesOrderVoucher1******************");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1295, 5)))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1296, 5));
		
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1297, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1298, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher = enter_Quantity.getAttribute("value");

		String expQtyInVoucher = excelReader.getCellData(xlSheetName, 1295, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1295, 7, actQtyInVoucher);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);

		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected

		boolean expstockReservationLabel			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1296, 6));
		boolean expres_LeftPanelWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1297, 6));
		boolean expres_LeftPanelItemCode			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1298, 6));
		boolean expres_LeftPanelItemName			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1299, 6));
		boolean expres_LeftPanelItemQty				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1300, 6));
		boolean expres_LeftPanelDueDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1301, 6));
		boolean expres_LeftPanelBaseUnit			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1302, 6));
		boolean expres_PickBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1303, 6));
		boolean expres_DiscardBtn					=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1304, 6));
		boolean expres_OkBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1305, 6));
		boolean expres_CloseBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1306, 6));

		boolean expbatchRes_BodyQtyToReserve		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1307, 6));
		boolean expbatchRes_BodyBatchNo				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1308, 6));
		boolean expbatchRes_BodyWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1309, 6));
		boolean	expbatchRes_BodyAvailableQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1310, 6));
		boolean expbatchRes_BodyRelesaseQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1311, 6));
		boolean expbatchRes_BodyCurOrdResQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1312, 6));
		boolean expbatchRes_BodyMfgDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1313, 6));
		boolean expbatchRes_BodyExpDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1314, 6));
		boolean expbatchRes_BodyBatchQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1315, 6));

		
		excelReader.setCellData(xlfile, xlSheetName, 1296, 7, Boolean.toString(actstockReservationLabel));
		excelReader.setCellData(xlfile, xlSheetName, 1297, 7, Boolean.toString(actres_LeftPanelWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1298, 7, Boolean.toString(actres_LeftPanelItemCode));
		excelReader.setCellData(xlfile, xlSheetName, 1299, 7, Boolean.toString(actres_LeftPanelItemName));
		excelReader.setCellData(xlfile, xlSheetName, 1300, 7, Boolean.toString(actres_LeftPanelItemQty));
		excelReader.setCellData(xlfile, xlSheetName, 1301, 7, Boolean.toString(actres_LeftPanelDueDate));
		excelReader.setCellData(xlfile, xlSheetName, 1302, 7, Boolean.toString(actres_LeftPanelBaseUnit));
		excelReader.setCellData(xlfile, xlSheetName, 1303, 7, Boolean.toString(actres_PickBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1304, 7, Boolean.toString(actres_DiscardBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1305, 7, Boolean.toString(actres_OkBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1306, 7, Boolean.toString(actres_CloseBtn));
		
		excelReader.setCellData(xlfile, xlSheetName, 1307, 7, Boolean.toString(actbatchRes_BodyQtyToReserve));
		excelReader.setCellData(xlfile, xlSheetName, 1308, 7, Boolean.toString(actbatchRes_BodyBatchNo));
		excelReader.setCellData(xlfile, xlSheetName, 1309, 7, Boolean.toString(actbatchRes_BodyWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1310, 7, Boolean.toString(actbatchRes_BodyAvailableQty));
		excelReader.setCellData(xlfile, xlSheetName, 1311, 7, Boolean.toString(actbatchRes_BodyRelesaseQty));
		excelReader.setCellData(xlfile, xlSheetName, 1312, 7, Boolean.toString(actbatchRes_BodyCurOrdResQty));
		excelReader.setCellData(xlfile, xlSheetName, 1313, 7, Boolean.toString(actbatchRes_BodyMfgDate));
		excelReader.setCellData(xlfile, xlSheetName, 1314, 7, Boolean.toString(actbatchRes_BodyExpDate));
		excelReader.setCellData(xlfile, xlSheetName, 1315, 7, Boolean.toString(actbatchRes_BodyBatchQty));
		

		String expTextres_LeftPanelWareHouseRow1	=excelReader.getCellData(xlSheetName, 1316, 6);
		String expTextres_LeftPanelItemCodeRow1		=excelReader.getCellData(xlSheetName, 1317, 6);
		String expTextres_LeftPanelItemNameRow1		=excelReader.getCellData(xlSheetName, 1318, 6);
		String expTextres_LeftPanelItemQtyRow1		=excelReader.getCellData(xlSheetName, 1319, 6);
		String expTextres_LeftPanelBaseUnitRow1		=excelReader.getCellData(xlSheetName, 1320, 6);


		String expbatchRes_QtyToReserveRow1			=excelReader.getCellData(xlSheetName, 1321, 6);
		String expbatchRes_BatchNoRow1				=excelReader.getCellData(xlSheetName, 1322, 6);
		String expbatchRes_WareHouseRow1			=excelReader.getCellData(xlSheetName, 1323, 6);
		String expbatchRes_AvailableQtyRow1			=excelReader.getCellData(xlSheetName, 1324, 6);
		String expbatchRes_RelesaseQtyRow1			=excelReader.getCellData(xlSheetName, 1325, 6);
		String expbatchRes_CurOrdResQtyRow1			=excelReader.getCellData(xlSheetName, 1326, 6);
		String expbatchRes_BatchQtyRow1				=excelReader.getCellData(xlSheetName, 1327, 6);
		
		

		excelReader.setCellData(xlfile, xlSheetName, 1316, 7, actTextres_LeftPanelWareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1317, 7, actTextres_LeftPanelItemCodeRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1318, 7, actTextres_LeftPanelItemNameRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1319, 7, actTextres_LeftPanelItemQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1320, 7, actTextres_LeftPanelBaseUnitRow1);
		
		excelReader.setCellData(xlfile, xlSheetName, 1321, 7, actbatchRes_QtyToReserveRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1322, 7, actbatchRes_BatchNoRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1323, 7, actbatchRes_WareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1324, 7, actbatchRes_AvailableQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1325, 7, actbatchRes_RelesaseQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1326, 7, actbatchRes_CurOrdResQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1327, 7, actbatchRes_BatchQtyRow1);
		

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1299, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));

		String actReserveColumn	=select1stRow_8thColumn.getText();
		String expReserveColumn	=excelReader.getCellData(xlSheetName, 1328, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1328, 7, actReserveColumn);

		System.out.println("ReserveColumn  : "+actReserveColumn	+" 	Value Expected : "+expReserveColumn);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 3; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("Voucher saved successfully : "+docno);
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");*/
		
		
		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1329, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1330, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1329, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1329, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1330, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1329, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)


				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1) && 
				actReserveColumn.equalsIgnoreCase(expReserveColumn) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))

		{
			excelReader.setCellData(xlfile, xlSheetName, 1295, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1295, 8, resFail);
			return false;
		}
	}

	

	public boolean checkResavingSalesOrderWithGraeterQtyThanInward() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(1999);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkValidationMessage("Voucher Loaded Sucessfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1331, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1332, 5));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);

		//enter_Reserve.click();
		//enter_Reserve.sendKeys(Keys.SPACE);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1333, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));

		String actReserveColumn	=select1stRow_8thColumn.getText();
		String expReserveColumn	=excelReader.getCellData(xlSheetName, 1331, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1331, 7, actReserveColumn);

		System.out.println("ReserveColumn  				: "+actReserveColumn	+" 	Value Expected : "+expReserveColumn);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String actMessage;
		
		HashSet<String> expMsg = new HashSet<String>();

		Thread.sleep(2000);

		if (errorMessage.getText().equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1334, 5))) 
		{
			actMessage = SavingInBackgroundTrial();
			
			expMsg.add(excelReader.getCellData(xlSheetName, 1332, 6));
			//expMsg.add(excelReader.getCellData(xlSheetName, 1333, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1334, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1335, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1332, 7, actMessage);
		}
		else
		{
			actMessage = SavingInBackgroundTrial();

			//expMsg.add(excelReader.getCellData(xlSheetName, 1333, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1335, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1332, 7, actMessage);
		}

		String expMessage = expMsg.toString();
		
		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println(" Test Pass: Sales Order Saved with larger qty ");
			excelReader.setCellData(xlfile, xlSheetName, 1331, 8, resPass);
			return true;
		} 
		else 
		{
			System.out.println(" Test Fail: Sales Order Saved with larger qty ");
			excelReader.setCellData(xlfile, xlSheetName, 1331, 8, resFail);
			return false;
		}
	}


	
	
	public boolean checkDeletingVoucherInsalesOrder() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(2000);
		
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomePAgeHeaderAllChkbox));
		voucherHomePAgeHeaderAllChkbox.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		Thread.sleep(2000);
		
		getWaitForAlert();

		getAlert().accept();

		String expDeleteMessage = excelReader.getCellData(xlSheetName, 1336, 6);
		String actDeleteMessage = checkValidationMessage(expDeleteMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1336, 7, actDeleteMessage);

		if( actDeleteMessage.equalsIgnoreCase(expDeleteMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1336, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1336, 8, resFail);
			return false;
		}
	}



	public boolean checkSavingSalesOrderWithFullConsumptionInward() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		String act  =Boolean.toString(checkSavingSalesOrderVoucher1());
		String exp  =excelReader.getCellData(xlSheetName, 1337, 6);
		
		System.err.println("act        :"+act);
		System.err.println("exp        :"+exp);
		
		excelReader.setCellData(xlfile, xlSheetName, 1337, 7, act);

		if (act.equalsIgnoreCase(exp))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1337, 8, resPass);
			return true;
		} 
		else 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1337, 8, resFail);
			return false;
		}
	}
	
	
	

	public boolean checkReservedPopAfterBatchFullConsumedinSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1338, 5)))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1339, 5)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1340, 5)))
			{
				itemListCount.get(i).click();

				break;
			}
		}

		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1341, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");

		String expQtyInVoucher=excelReader.getCellData(xlSheetName, 1338, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1338, 7, actQtyInVoucher);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		String actbatchRes_BodyQtyToReserve		=Boolean.toString(batchRes_QtyToReserveRow1.getText().isEmpty());

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		String actbatchRes_BodyCurOrdResQty		=Boolean.toString(batchRes_BodyCurOrdResQty.isDisplayed());
		String expbatchRes_BodyQtyToReserve		=excelReader.getCellData(xlSheetName, 1339, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1339, 7, actbatchRes_BodyQtyToReserve);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);

		if (actbatchRes_BodyQtyToReserve.equalsIgnoreCase(expbatchRes_BodyQtyToReserve))
		{
			Thread.sleep(2000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
			//res_CloseBtn.click();
			ClickUsingJs(res_CloseBtn);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1338, 8, resPass);
			
			return true;
		} 
		else
		{
			Thread.sleep(2000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
			//res_CloseBtn.click();
			ClickUsingJs(res_CloseBtn);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1338, 8, resFail);
			
			return false;

		}
	}



	public boolean checkSuspendingVoucherInsalesOrder1() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();


		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1342, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		String expMessage = excelReader.getCellData(xlSheetName, 1342, 6);
		String actMessage = checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1342, 7, actMessage);

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = excelReader.getCellData(xlSheetName, 1343, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1343, 7, actSuspendStatus);

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actMessage.equalsIgnoreCase(expMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1342, 8, resPass);
			
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1342, 8, resFail);
			return false;
		}
	}
	
	
	


	public boolean checkSavingSalesOrder2AfterSuspendingVoucher1() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);

		System.out.println("*****************checkSavingSalesOrderVoucher2******************");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1344, 5)))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1345, 5));
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1346, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1347, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher = enter_Quantity.getAttribute("value");

		String expQtyInVoucher = excelReader.getCellData(xlSheetName, 1344, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1344, 7, actQtyInVoucher);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);

		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected
		boolean expstockReservationLabel			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1345, 6));
		boolean expres_LeftPanelWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1346, 6));
		boolean expres_LeftPanelItemCode			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1347, 6));
		boolean expres_LeftPanelItemName			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1348, 6));
		boolean expres_LeftPanelItemQty				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1349, 6));
		boolean expres_LeftPanelDueDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1350, 6));
		boolean expres_LeftPanelBaseUnit			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1351, 6));
		boolean expres_PickBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1352, 6));
		boolean expres_DiscardBtn					=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1353, 6));
		boolean expres_OkBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1354, 6));
		boolean expres_CloseBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1355, 6));

		boolean expbatchRes_BodyQtyToReserve		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1356, 6));
		boolean expbatchRes_BodyBatchNo				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1357, 6));
		boolean expbatchRes_BodyWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1358, 6));
		boolean	expbatchRes_BodyAvailableQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1359, 6));
		boolean expbatchRes_BodyRelesaseQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1360, 6));
		boolean expbatchRes_BodyCurOrdResQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1361, 6));
		boolean expbatchRes_BodyMfgDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1362, 6));
		boolean expbatchRes_BodyExpDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1363, 6));
		boolean expbatchRes_BodyBatchQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1364, 6));

		
		excelReader.setCellData(xlfile, xlSheetName, 1345, 7, Boolean.toString(actstockReservationLabel));
		excelReader.setCellData(xlfile, xlSheetName, 1346, 7, Boolean.toString(actres_LeftPanelWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1347, 7, Boolean.toString(actres_LeftPanelItemCode));
		excelReader.setCellData(xlfile, xlSheetName, 1348, 7, Boolean.toString(actres_LeftPanelItemName));
		excelReader.setCellData(xlfile, xlSheetName, 1349, 7, Boolean.toString(actres_LeftPanelItemQty));
		excelReader.setCellData(xlfile, xlSheetName, 1350, 7, Boolean.toString(actres_LeftPanelDueDate));
		excelReader.setCellData(xlfile, xlSheetName, 1351, 7, Boolean.toString(actres_LeftPanelBaseUnit));
		excelReader.setCellData(xlfile, xlSheetName, 1352, 7, Boolean.toString(actres_PickBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1353, 7, Boolean.toString(actres_DiscardBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1354, 7, Boolean.toString(actres_OkBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1355, 7, Boolean.toString(actres_CloseBtn));
		
		excelReader.setCellData(xlfile, xlSheetName, 1356, 7, Boolean.toString(actbatchRes_BodyQtyToReserve));
		excelReader.setCellData(xlfile, xlSheetName, 1357, 7, Boolean.toString(actbatchRes_BodyBatchNo));
		excelReader.setCellData(xlfile, xlSheetName, 1358, 7, Boolean.toString(actbatchRes_BodyWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1359, 7, Boolean.toString(actbatchRes_BodyAvailableQty));
		excelReader.setCellData(xlfile, xlSheetName, 1360, 7, Boolean.toString(actbatchRes_BodyRelesaseQty));
		excelReader.setCellData(xlfile, xlSheetName, 1361, 7, Boolean.toString(actbatchRes_BodyCurOrdResQty));
		excelReader.setCellData(xlfile, xlSheetName, 1362, 7, Boolean.toString(actbatchRes_BodyMfgDate));
		excelReader.setCellData(xlfile, xlSheetName, 1363, 7, Boolean.toString(actbatchRes_BodyExpDate));
		excelReader.setCellData(xlfile, xlSheetName, 1364, 7, Boolean.toString(actbatchRes_BodyBatchQty));
		

		String expTextres_LeftPanelWareHouseRow1	=excelReader.getCellData(xlSheetName, 1365, 6);
		String expTextres_LeftPanelItemCodeRow1		=excelReader.getCellData(xlSheetName, 1366, 6);
		String expTextres_LeftPanelItemNameRow1		=excelReader.getCellData(xlSheetName, 1367, 6);
		String expTextres_LeftPanelItemQtyRow1		=excelReader.getCellData(xlSheetName, 1368, 6);
		String expTextres_LeftPanelBaseUnitRow1		=excelReader.getCellData(xlSheetName, 1369, 6);


		String expbatchRes_QtyToReserveRow1			=excelReader.getCellData(xlSheetName, 1370, 6);
		String expbatchRes_BatchNoRow1				=excelReader.getCellData(xlSheetName, 1371, 6);
		String expbatchRes_WareHouseRow1			=excelReader.getCellData(xlSheetName, 1372, 6);
		String expbatchRes_AvailableQtyRow1			=excelReader.getCellData(xlSheetName, 1373, 6);
		String expbatchRes_RelesaseQtyRow1			=excelReader.getCellData(xlSheetName, 1374, 6);
		String expbatchRes_CurOrdResQtyRow1			=excelReader.getCellData(xlSheetName, 1375, 6);
		String expbatchRes_BatchQtyRow1				=excelReader.getCellData(xlSheetName, 1376, 6);
		
		

		excelReader.setCellData(xlfile, xlSheetName, 1365, 7, actTextres_LeftPanelWareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1366, 7, actTextres_LeftPanelItemCodeRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1367, 7, actTextres_LeftPanelItemNameRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1368, 7, actTextres_LeftPanelItemQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1369, 7, actTextres_LeftPanelBaseUnitRow1);
		
		excelReader.setCellData(xlfile, xlSheetName, 1370, 7, actbatchRes_QtyToReserveRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1371, 7, actbatchRes_BatchNoRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1372, 7, actbatchRes_WareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1373, 7, actbatchRes_AvailableQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1374, 7, actbatchRes_RelesaseQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1375, 7, actbatchRes_CurOrdResQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1376, 7, actbatchRes_BatchQtyRow1);

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1348, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));

		String actReserveColumn	=select1stRow_8thColumn.getText();
		String expReserveColumn	=excelReader.getCellData(xlSheetName, 1377, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1377, 7, actReserveColumn);

		System.out.println("ReserveColumn  : "+actReserveColumn	+" 	Value Expected : "+expReserveColumn);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 3; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("Voucher saved successfully : "+docno);
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");*/
		
		
		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1378, 6));
        //expMsg.add(excelReader.getCellData(xlSheetName, 1379, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1380, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1381, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1378, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1380, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1381, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1378, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)


				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1) && 
				actReserveColumn.equalsIgnoreCase(expReserveColumn) && 
				actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))

		{
			excelReader.setCellData(xlfile, xlSheetName, 1344, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1344, 8, resFail);
			return false;
		}

	}

	
	
	
	public boolean checkResavingSalesOrder1AfterSavingVoucher2WithFullBatchConsumption() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		documentNumberTxt.sendKeys(Keys.CONTROL, "a");
		Thread.sleep(1000);
		documentNumberTxt.sendKeys(Keys.BACK_SPACE);
		Thread.sleep(2000);
		enterText(documentNumberTxt, excelReader.getCellData(xlSheetName, 1382, 5));
		Thread.sleep(2000);
		tab(documentNumberTxt);
		
		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		//previousBtn.click();

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(4000);

		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		
		String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet(); 

		expMsg.add(excelReader.getCellData(xlSheetName, 1382, 6));
		//expMsg.add(excelReader.getCellData(xlSheetName, 1383, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 1384, 6));
		expMsg.add(excelReader.getCellData(xlSheetName, 1385, 6));
		String expMessage = expMsg.toString();
		excelReader.setCellData(xlfile, xlSheetName, 1382, 7, actMessage);
		
		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		if (actMessage.equals(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1382, 8, resPass);
			return true;

		} 
		else 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1382, 8, resFail);

			/*Thread.sleep(2000);
			
			checkSuspendingVoucherInsalesOrder1();*/

			return false;
		}
	}




	public boolean checkLinksInSalesInvoiceAfterSavingSalesOrder() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		//Thread.sleep(2000);
		
		//getDriver().navigate().refresh();
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		Thread.sleep(2000);

		checkValidationMessage("Screen opened");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
		Thread.sleep(1000);
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");
		
		Thread.sleep(3000);
		
		int workFlowVoucherNoListCount=workFlowVoucherNoList.size();
        ArrayList<String >workFlowVoucherNoListarray=new ArrayList<>();
        for (int i = 0; i < workFlowVoucherNoListCount; i++) 
        {
            String data=workFlowVoucherNoList.get(i).getText();
            workFlowVoucherNoListarray.add(data);
        }
        
        String actworkFlowVoucherNoList=workFlowVoucherNoListarray.toString();
        String expworkFlowVoucherNoList=excelReader.getCellData(xlSheetName, 1386, 6);
        
        excelReader.setCellData(xlfile, xlSheetName, 1386, 7, actworkFlowVoucherNoList);
        
        System.out.println("actworkFlowVoucherNoList   :"+actworkFlowVoucherNoList);
        System.out.println("expworkFlowVoucherNoList   :"+expworkFlowVoucherNoList);

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();
        
        if (actworkFlowVoucherNoList.equalsIgnoreCase(expworkFlowVoucherNoList)) 
        {
        	excelReader.setCellData(xlfile, xlSheetName, 1386, 8, resPass);
        	return true;
		} 
        else 
        {
        	excelReader.setCellData(xlfile, xlSheetName, 1386, 8, resFail);
        	return false;
		}
	}

	
	
	
	

	public boolean checkSavingPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException, AWTException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);

		checkEraseAllDATA();

		Thread.sleep(2000);
		
		String act  =Boolean.toString(checkSavingPurchaseVoucherVATWithCurrentdate());
		String exp  =excelReader.getCellData(xlSheetName, 1387, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1387, 7, act);

		if (act.equalsIgnoreCase(exp)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1387, 8, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1387, 8, resFail);
			return false;
		}
	}
	
	
	

	

	public boolean checkEnableInputBatchEvenStockIsNotUpdatedOptionInSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
		settingsBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTab));
		inventoryTab.click();

		Thread.sleep(2000);
		//click(inventorySettingsBtn);
		Thread.sleep(1000);
		
		try {
			if(inventoryTabReservationTypeDrpddwn.isDisplayed()==false)
			{
				click(inventorySettingsBtn);
			}
			
		} catch (Exception e) {
			
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTabReservationTypeDrpddwn));
		Select s1=new Select(inventoryTabReservationTypeDrpddwn);
		s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 1388, 5));
		
		Thread.sleep(1000);
		moveToElement(inventoryBatchAndBinsBtn);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputBatchEvenIfStockNoyUpdatedChkbox));
		if (inputBatchEvenIfStockNoyUpdatedChkboxIsSelected.isSelected()==false)
		{
			inputBatchEvenIfStockNoyUpdatedChkbox.click();	
		}

		Thread.sleep(2000);

		String actOptionIsSelected = Boolean.toString(inputBatchEvenIfStockNoyUpdatedChkboxIsSelected.isSelected());
		String expOptionIsSelected = excelReader.getCellData(xlSheetName, 1388, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1388, 7, actOptionIsSelected);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();

		System.out.println("inputBatchEvenIfStockNoyUpdatedChkbox  "+actOptionIsSelected+"  "+expOptionIsSelected);

		String expMessage1=excelReader.getCellData(xlSheetName, 1389, 6);
		String actMessage=checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1389, 7, actMessage);
		
		checkLogoutAndLogin();

		if (actMessage.equalsIgnoreCase(expMessage1)) 
		{
			System.out.println(" Test Pass: Setting Updated ");
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 1388, 8, resPass);
			return true;
		} 
		else
		{
			System.out.println(" Test Fail: Setting Updated ");
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 1388, 8, resFail);
			return false;
		}
	}

	
	
	

	public boolean checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		System.out.println("*****************checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox******************");

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1390, 5)))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1391, 5)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1392, 5)))
			{
				itemListCount.get(i).click();

				break;
			}
		}

		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1393, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");
		String expQtyInVoucher  =excelReader.getCellData(xlSheetName, 1390, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1390, 7, actQtyInVoucher);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1394, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 1391, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1391, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 1392, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1392, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 1393, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1393, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 1394, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1394, 7, actBalance);

		String actBatchPopupTable = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expBatchPopupTable = excelReader.getCellData(xlSheetName, 1395, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 1395, 7, actBatchPopupTable);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 1396, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1396, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 1397, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1397, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		Thread.sleep(2000);
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();



		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);


		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected

		boolean expstockReservationLabel			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1398, 6));
		boolean expres_LeftPanelWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1399, 6));
		boolean expres_LeftPanelItemCode			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1400, 6));
		boolean expres_LeftPanelItemName			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1401, 6));
		boolean expres_LeftPanelItemQty				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1402, 6));
		boolean expres_LeftPanelDueDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1403, 6));
		boolean expres_LeftPanelBaseUnit			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1404, 6));
		boolean expres_PickBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1405, 6));
		boolean expres_DiscardBtn					=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1406, 6));
		boolean expres_OkBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1407, 6));
		boolean expres_CloseBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1408, 6));

		boolean expbatchRes_BodyQtyToReserve		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1409, 6));
		boolean expbatchRes_BodyBatchNo				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1410, 6));
		boolean expbatchRes_BodyWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1411, 6));
		boolean	expbatchRes_BodyAvailableQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1412, 6));
		boolean expbatchRes_BodyRelesaseQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1413, 6));
		boolean expbatchRes_BodyCurOrdResQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1414, 6));
		boolean expbatchRes_BodyMfgDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1415, 6));
		boolean expbatchRes_BodyExpDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1416, 6));
		boolean expbatchRes_BodyBatchQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1417, 6));

		
		excelReader.setCellData(xlfile, xlSheetName, 1398, 7, Boolean.toString(actstockReservationLabel));
		excelReader.setCellData(xlfile, xlSheetName, 1399, 7, Boolean.toString(actres_LeftPanelWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1400, 7, Boolean.toString(actres_LeftPanelItemCode));
		excelReader.setCellData(xlfile, xlSheetName, 1401, 7, Boolean.toString(actres_LeftPanelItemName));
		excelReader.setCellData(xlfile, xlSheetName, 1402, 7, Boolean.toString(actres_LeftPanelItemQty));
		excelReader.setCellData(xlfile, xlSheetName, 1403, 7, Boolean.toString(actres_LeftPanelDueDate));
		excelReader.setCellData(xlfile, xlSheetName, 1404, 7, Boolean.toString(actres_LeftPanelBaseUnit));
		excelReader.setCellData(xlfile, xlSheetName, 1405, 7, Boolean.toString(actres_PickBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1406, 7, Boolean.toString(actres_DiscardBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1407, 7, Boolean.toString(actres_OkBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1408, 7, Boolean.toString(actres_CloseBtn));
		
		excelReader.setCellData(xlfile, xlSheetName, 1409, 7, Boolean.toString(actbatchRes_BodyQtyToReserve));
		excelReader.setCellData(xlfile, xlSheetName, 1410, 7, Boolean.toString(actbatchRes_BodyBatchNo));
		excelReader.setCellData(xlfile, xlSheetName, 1411, 7, Boolean.toString(actbatchRes_BodyWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1412, 7, Boolean.toString(actbatchRes_BodyAvailableQty));
		excelReader.setCellData(xlfile, xlSheetName, 1413, 7, Boolean.toString(actbatchRes_BodyRelesaseQty));
		excelReader.setCellData(xlfile, xlSheetName, 1414, 7, Boolean.toString(actbatchRes_BodyCurOrdResQty));
		excelReader.setCellData(xlfile, xlSheetName, 1415, 7, Boolean.toString(actbatchRes_BodyMfgDate));
		excelReader.setCellData(xlfile, xlSheetName, 1416, 7, Boolean.toString(actbatchRes_BodyExpDate));
		excelReader.setCellData(xlfile, xlSheetName, 1417, 7, Boolean.toString(actbatchRes_BodyBatchQty));
		

		String expTextres_LeftPanelWareHouseRow1	=excelReader.getCellData(xlSheetName, 1418, 6);
		String expTextres_LeftPanelItemCodeRow1		=excelReader.getCellData(xlSheetName, 1419, 6);
		String expTextres_LeftPanelItemNameRow1		=excelReader.getCellData(xlSheetName, 1420, 6);
		String expTextres_LeftPanelItemQtyRow1		=excelReader.getCellData(xlSheetName, 1421, 6);
		String expTextres_LeftPanelBaseUnitRow1		=excelReader.getCellData(xlSheetName, 1422, 6);


		String expbatchRes_QtyToReserveRow1			=excelReader.getCellData(xlSheetName, 1423, 6);
		String expbatchRes_BatchNoRow1				=excelReader.getCellData(xlSheetName, 1424, 6);
		String expbatchRes_WareHouseRow1			=excelReader.getCellData(xlSheetName, 1425, 6);
		String expbatchRes_AvailableQtyRow1			=excelReader.getCellData(xlSheetName, 1426, 6);
		String expbatchRes_RelesaseQtyRow1			=excelReader.getCellData(xlSheetName, 1427, 6);
		String expbatchRes_CurOrdResQtyRow1			=excelReader.getCellData(xlSheetName, 1428, 6);
		String expbatchRes_BatchQtyRow1				=excelReader.getCellData(xlSheetName, 1429, 6);
		
		

		excelReader.setCellData(xlfile, xlSheetName, 1418, 7, actTextres_LeftPanelWareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1419, 7, actTextres_LeftPanelItemCodeRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1420, 7, actTextres_LeftPanelItemNameRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1421, 7, actTextres_LeftPanelItemQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1422, 7, actTextres_LeftPanelBaseUnitRow1);
		
		excelReader.setCellData(xlfile, xlSheetName, 1423, 7, actbatchRes_QtyToReserveRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1424, 7, actbatchRes_BatchNoRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1425, 7, actbatchRes_WareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1426, 7, actbatchRes_AvailableQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1427, 7, actbatchRes_RelesaseQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1428, 7, actbatchRes_CurOrdResQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1429, 7, actbatchRes_BatchQtyRow1);

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

        //String actMessage;
		
		//HashSet<String> expMsg = new HashSet<String>();

		Thread.sleep(2000);

		/*if (errorMessage.getText().equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1395, 5))) 
		{
			actMessage = SavingInBackgroundTrial();
			
			expMsg.add(excelReader.getCellData(xlSheetName, 1430, 6));
			//expMsg.add(excelReader.getCellData(xlSheetName, 1431, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1432, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1433, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1430, 7, actMessage);
		}
		else
		{
			actMessage = SavingInBackgroundTrial();

			//expMsg.add(excelReader.getCellData(xlSheetName, 1431, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1433, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1430, 7, actMessage);
		}

		String expMessage = expMsg.toString();

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1432, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1433, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1430, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
		
		

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)


				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)  && 


				actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable.equalsIgnoreCase(expBatchPopupTable) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)

				)

		{
			System.out.println(" Test Pass: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1390, 8, resPass);

			return true;
		}
		else
		{
			System.out.println(" Test Fail: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1390, 8, resFail);
			return false;
		}
	}
	
	
	public boolean checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox2() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());

		
		System.out.println("*****************checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox******************");

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1686, 5)))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1687, 5)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1688, 5)))
			{
				itemListCount.get(i).click();

				break;
			}
		}

		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1689, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");
		String expQtyInVoucher=excelReader.getCellData(xlSheetName, 1686, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1686, 7, actQtyInVoucher);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1690, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 1687, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1687, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 1688, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1688, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 1689, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1689, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 1690, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1690, 7, actBalance);

		String actBatchPopupTable = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expBatchPopupTable = excelReader.getCellData(xlSheetName, 1691, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 1691, 7, actBatchPopupTable);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 1692, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1692, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 1693, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1693, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		Thread.sleep(2000);
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();



		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);


		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected

		boolean expstockReservationLabel			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1694, 6));
		boolean expres_LeftPanelWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1695, 6));
		boolean expres_LeftPanelItemCode			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1696, 6));
		boolean expres_LeftPanelItemName			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1697, 6));
		boolean expres_LeftPanelItemQty				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1698, 6));
		boolean expres_LeftPanelDueDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1699, 6));
		boolean expres_LeftPanelBaseUnit			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1700, 6));
		boolean expres_PickBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1701, 6));
		boolean expres_DiscardBtn					=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1702, 6));
		boolean expres_OkBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1703, 6));
		boolean expres_CloseBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1704, 6));

		boolean expbatchRes_BodyQtyToReserve		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1705, 6));
		boolean expbatchRes_BodyBatchNo				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1706, 6));
		boolean expbatchRes_BodyWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1707, 6));
		boolean	expbatchRes_BodyAvailableQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1708, 6));
		boolean expbatchRes_BodyRelesaseQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1709, 6));
		boolean expbatchRes_BodyCurOrdResQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1710, 6));
		boolean expbatchRes_BodyMfgDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1711, 6));
		boolean expbatchRes_BodyExpDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1712, 6));
		boolean expbatchRes_BodyBatchQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1713, 6));

		
		excelReader.setCellData(xlfile, xlSheetName, 1694, 7, Boolean.toString(actstockReservationLabel));
		excelReader.setCellData(xlfile, xlSheetName, 1695, 7, Boolean.toString(actres_LeftPanelWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1696, 7, Boolean.toString(actres_LeftPanelItemCode));
		excelReader.setCellData(xlfile, xlSheetName, 1697, 7, Boolean.toString(actres_LeftPanelItemName));
		excelReader.setCellData(xlfile, xlSheetName, 1698, 7, Boolean.toString(actres_LeftPanelItemQty));
		excelReader.setCellData(xlfile, xlSheetName, 1699, 7, Boolean.toString(actres_LeftPanelDueDate));
		excelReader.setCellData(xlfile, xlSheetName, 1700, 7, Boolean.toString(actres_LeftPanelBaseUnit));
		excelReader.setCellData(xlfile, xlSheetName, 1701, 7, Boolean.toString(actres_PickBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1702, 7, Boolean.toString(actres_DiscardBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1703, 7, Boolean.toString(actres_OkBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1704, 7, Boolean.toString(actres_CloseBtn));
		
		excelReader.setCellData(xlfile, xlSheetName, 1705, 7, Boolean.toString(actbatchRes_BodyQtyToReserve));
		excelReader.setCellData(xlfile, xlSheetName, 1706, 7, Boolean.toString(actbatchRes_BodyBatchNo));
		excelReader.setCellData(xlfile, xlSheetName, 1707, 7, Boolean.toString(actbatchRes_BodyWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1708, 7, Boolean.toString(actbatchRes_BodyAvailableQty));
		excelReader.setCellData(xlfile, xlSheetName, 1709, 7, Boolean.toString(actbatchRes_BodyRelesaseQty));
		excelReader.setCellData(xlfile, xlSheetName, 1710, 7, Boolean.toString(actbatchRes_BodyCurOrdResQty));
		excelReader.setCellData(xlfile, xlSheetName, 1711, 7, Boolean.toString(actbatchRes_BodyMfgDate));
		excelReader.setCellData(xlfile, xlSheetName, 1712, 7, Boolean.toString(actbatchRes_BodyExpDate));
		excelReader.setCellData(xlfile, xlSheetName, 1713, 7, Boolean.toString(actbatchRes_BodyBatchQty));
		

		String expTextres_LeftPanelWareHouseRow1	=excelReader.getCellData(xlSheetName, 1714, 6);
		String expTextres_LeftPanelItemCodeRow1		=excelReader.getCellData(xlSheetName, 1715, 6);
		String expTextres_LeftPanelItemNameRow1		=excelReader.getCellData(xlSheetName, 1716, 6);
		String expTextres_LeftPanelItemQtyRow1		=excelReader.getCellData(xlSheetName, 1717, 6);
		String expTextres_LeftPanelBaseUnitRow1		=excelReader.getCellData(xlSheetName, 1718, 6);


		String expbatchRes_QtyToReserveRow1			=excelReader.getCellData(xlSheetName, 1719, 6);
		String expbatchRes_BatchNoRow1				=excelReader.getCellData(xlSheetName, 1720, 6);
		String expbatchRes_WareHouseRow1			=excelReader.getCellData(xlSheetName, 1721, 6);
		String expbatchRes_AvailableQtyRow1			=excelReader.getCellData(xlSheetName, 1722, 6);
		String expbatchRes_RelesaseQtyRow1			=excelReader.getCellData(xlSheetName, 1723, 6);
		String expbatchRes_CurOrdResQtyRow1			=excelReader.getCellData(xlSheetName, 1724, 6);
		String expbatchRes_BatchQtyRow1				=excelReader.getCellData(xlSheetName, 1725, 6);
		
		

		excelReader.setCellData(xlfile, xlSheetName, 1714, 7, actTextres_LeftPanelWareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1715, 7, actTextres_LeftPanelItemCodeRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1716, 7, actTextres_LeftPanelItemNameRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1717, 7, actTextres_LeftPanelItemQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1718, 7, actTextres_LeftPanelBaseUnitRow1);
		
		excelReader.setCellData(xlfile, xlSheetName, 1719, 7, actbatchRes_QtyToReserveRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1720, 7, actbatchRes_BatchNoRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1721, 7, actbatchRes_WareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1722, 7, actbatchRes_AvailableQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1723, 7, actbatchRes_RelesaseQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1724, 7, actbatchRes_CurOrdResQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1725, 7, actbatchRes_BatchQtyRow1);

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

        String actMessage;
		
		HashSet<String> expMsg = new HashSet<String>();

		Thread.sleep(2000);

		if (errorMessage.getText().equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1691, 5))) 
		{
			actMessage = SavingInBackgroundTrial();
			
			expMsg.add(excelReader.getCellData(xlSheetName, 1726, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1727, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1728, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1729, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1726, 7, actMessage);
		}
		else
		{
			actMessage = SavingInBackgroundTrial();

			expMsg.add(excelReader.getCellData(xlSheetName, 1727, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1729, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1726, 7, actMessage);
		}

		String expMessage = expMsg.toString();

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage) && actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)


				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)  && 


				actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable.equalsIgnoreCase(expBatchPopupTable) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)

				)

		{
			System.out.println(" Test Pass: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1686, 8, resPass);

			return true;
		}
		else
		{
			System.out.println(" Test Fail: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1686, 8, resFail);
			return false;
		}
	}
	
	public boolean checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox3() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		System.out.println("*****************checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox******************");

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1785, 5)))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1786, 5)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1787, 5)))
			{
				itemListCount.get(i).click();

				break;
			}
		}

		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1788, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");
		String expQtyInVoucher=excelReader.getCellData(xlSheetName, 1785, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1785, 7, actQtyInVoucher);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1789, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 1786, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1786, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 1787, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1787, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 1788, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1788, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 1789, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1789, 7, actBalance);

		String actBatchPopupTable = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expBatchPopupTable = excelReader.getCellData(xlSheetName, 1790, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 1790, 7, actBatchPopupTable);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 1791, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1791, 7, actTotalQuantity);
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 1792, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1792, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		Thread.sleep(2000);
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();



		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);


		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected

		boolean expstockReservationLabel			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1793, 6));
		boolean expres_LeftPanelWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1794, 6));
		boolean expres_LeftPanelItemCode			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1795, 6));
		boolean expres_LeftPanelItemName			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1796, 6));
		boolean expres_LeftPanelItemQty				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1797, 6));
		boolean expres_LeftPanelDueDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1798, 6));
		boolean expres_LeftPanelBaseUnit			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1799, 6));
		boolean expres_PickBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1800, 6));
		boolean expres_DiscardBtn					=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1801, 6));
		boolean expres_OkBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1802, 6));
		boolean expres_CloseBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1803, 6));

		boolean expbatchRes_BodyQtyToReserve		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1804, 6));
		boolean expbatchRes_BodyBatchNo				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1805, 6));
		boolean expbatchRes_BodyWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1806, 6));
		boolean	expbatchRes_BodyAvailableQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1807, 6));
		boolean expbatchRes_BodyRelesaseQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1808, 6));
		boolean expbatchRes_BodyCurOrdResQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1809, 6));
		boolean expbatchRes_BodyMfgDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1810, 6));
		boolean expbatchRes_BodyExpDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1811, 6));
		boolean expbatchRes_BodyBatchQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1812, 6));

		
		excelReader.setCellData(xlfile, xlSheetName, 1793, 7, Boolean.toString(actstockReservationLabel));
		excelReader.setCellData(xlfile, xlSheetName, 1794, 7, Boolean.toString(actres_LeftPanelWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1795, 7, Boolean.toString(actres_LeftPanelItemCode));
		excelReader.setCellData(xlfile, xlSheetName, 1796, 7, Boolean.toString(actres_LeftPanelItemName));
		excelReader.setCellData(xlfile, xlSheetName, 1797, 7, Boolean.toString(actres_LeftPanelItemQty));
		excelReader.setCellData(xlfile, xlSheetName, 1798, 7, Boolean.toString(actres_LeftPanelDueDate));
		excelReader.setCellData(xlfile, xlSheetName, 1799, 7, Boolean.toString(actres_LeftPanelBaseUnit));
		excelReader.setCellData(xlfile, xlSheetName, 1800, 7, Boolean.toString(actres_PickBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1801, 7, Boolean.toString(actres_DiscardBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1802, 7, Boolean.toString(actres_OkBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1803, 7, Boolean.toString(actres_CloseBtn));
		
		excelReader.setCellData(xlfile, xlSheetName, 1804, 7, Boolean.toString(actbatchRes_BodyQtyToReserve));
		excelReader.setCellData(xlfile, xlSheetName, 1805, 7, Boolean.toString(actbatchRes_BodyBatchNo));
		excelReader.setCellData(xlfile, xlSheetName, 1806, 7, Boolean.toString(actbatchRes_BodyWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1807, 7, Boolean.toString(actbatchRes_BodyAvailableQty));
		excelReader.setCellData(xlfile, xlSheetName, 1808, 7, Boolean.toString(actbatchRes_BodyRelesaseQty));
		excelReader.setCellData(xlfile, xlSheetName, 1809, 7, Boolean.toString(actbatchRes_BodyCurOrdResQty));
		excelReader.setCellData(xlfile, xlSheetName, 1810, 7, Boolean.toString(actbatchRes_BodyMfgDate));
		excelReader.setCellData(xlfile, xlSheetName, 1811, 7, Boolean.toString(actbatchRes_BodyExpDate));
		excelReader.setCellData(xlfile, xlSheetName, 1812, 7, Boolean.toString(actbatchRes_BodyBatchQty));
		

		String expTextres_LeftPanelWareHouseRow1	=excelReader.getCellData(xlSheetName, 1813, 6);
		String expTextres_LeftPanelItemCodeRow1		=excelReader.getCellData(xlSheetName, 1814, 6);
		String expTextres_LeftPanelItemNameRow1		=excelReader.getCellData(xlSheetName, 1815, 6);
		String expTextres_LeftPanelItemQtyRow1		=excelReader.getCellData(xlSheetName, 1816, 6);
		String expTextres_LeftPanelBaseUnitRow1		=excelReader.getCellData(xlSheetName, 1817, 6);


		String expbatchRes_QtyToReserveRow1			=excelReader.getCellData(xlSheetName, 1818, 6);
		String expbatchRes_BatchNoRow1				=excelReader.getCellData(xlSheetName, 1819, 6);
		String expbatchRes_WareHouseRow1			=excelReader.getCellData(xlSheetName, 1820, 6);
		String expbatchRes_AvailableQtyRow1			=excelReader.getCellData(xlSheetName, 1821, 6);
		String expbatchRes_RelesaseQtyRow1			=excelReader.getCellData(xlSheetName, 1822, 6);
		String expbatchRes_CurOrdResQtyRow1			=excelReader.getCellData(xlSheetName, 1823, 6);
		String expbatchRes_BatchQtyRow1				=excelReader.getCellData(xlSheetName, 1824, 6);
		
		

		excelReader.setCellData(xlfile, xlSheetName, 1813, 7, actTextres_LeftPanelWareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1814, 7, actTextres_LeftPanelItemCodeRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1815, 7, actTextres_LeftPanelItemNameRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1816, 7, actTextres_LeftPanelItemQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1817, 7, actTextres_LeftPanelBaseUnitRow1);
		
		excelReader.setCellData(xlfile, xlSheetName, 1818, 7, actbatchRes_QtyToReserveRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1819, 7, actbatchRes_BatchNoRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1820, 7, actbatchRes_WareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1821, 7, actbatchRes_AvailableQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1822, 7, actbatchRes_RelesaseQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1823, 7, actbatchRes_CurOrdResQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1824, 7, actbatchRes_BatchQtyRow1);

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

        /*String actMessage;
		
		HashSet<String> expMsg = new HashSet<String>();

		Thread.sleep(2000);

		if (errorMessage.getText().equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1790, 5))) 
		{
			actMessage = SavingInBackgroundTrial();
			
			expMsg.add(excelReader.getCellData(xlSheetName, 1825, 6));
			//expMsg.add(excelReader.getCellData(xlSheetName, 1826, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1827, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1828, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1825, 7, actMessage);
		}
		else
		{
			actMessage = SavingInBackgroundTrial();

			//expMsg.add(excelReader.getCellData(xlSheetName, 1826, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1828, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1825, 7, actMessage);
		}

		String expMessage = expMsg.toString();

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1827, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1828, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1825, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)


				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)  && 


				actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable.equalsIgnoreCase(expBatchPopupTable)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)

				)

		{
			System.out.println(" Test Pass: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1785, 8, resPass);

			return true;
		}
		else
		{
			System.out.println(" Test Fail: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1785, 8, resFail);
			return false;
		}
	}
	
	

	
	
	
	
	public boolean checkSavingSalesOrdervoucher2AfterConsumedBatchInVoucher1() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		System.out.println("*****************checkSavingSalesOrdervoucher2AfterConsumedBatchInVoucher1******************");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1434, 5)))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1435, 5)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1436, 5)))
			{
				itemListCount.get(i).click();

				break;
			}
		}

		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1437, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");
		String expQtyInVoucher=excelReader.getCellData(xlSheetName, 1434, 6);
		System.err.println("actQtyInVoucher :  "+actQtyInVoucher +" Value Exp : "+expQtyInVoucher);
		excelReader.setCellData(xlfile, xlSheetName, 1434, 7, actQtyInVoucher);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1438, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		String actBatchPopupTable = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expBatchPopupTable = excelReader.getCellData(xlSheetName, 1435, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 1435, 7, actBatchPopupTable);

		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);

		Thread.sleep(2000);
		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		//batchCancelIcon.click();
		ClickUsingJs(batchCancelIcon);
		
		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		String actbatchRes_QtyToReserveRow1			=Boolean.toString(batchRes_QtyToReserveRow1.getText().isEmpty());

		// Expected

		String  expbatchRes_QtyToReserveRow1			=excelReader.getCellData(xlSheetName, 1436, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1436, 7, actbatchRes_QtyToReserveRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
		res_CloseBtn.click();

		Thread.sleep(3000);

		if(actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1) && 
				actBatchPopupTable.equalsIgnoreCase(expBatchPopupTable))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1434, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1434, 8, resFail);
			return false;
		}
	}

	
	
	

	public boolean checkSuspendingSalesVou1AfterEnablingOptions() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		String act  =Boolean.toString(checkSuspendingVoucherInsalesOrder1());
		String exp  =excelReader.getCellData(xlSheetName, 1439, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1439, 7, act);
		
		
		if (act.equalsIgnoreCase(exp))
		{
			System.err.println(" Test Pass: Voucher Suspended Successfully  ");
			excelReader.setCellData(xlfile, xlSheetName, 1439, 8, resPass);
			return true;
		}
		else 
		{
			System.err.println(" Test Fail: Voucher Suspended Successfully  ");
			excelReader.setCellData(xlfile, xlSheetName, 1439, 8, resFail);
			return false;
		}
	}

	
	
	
	
	public boolean checkSavingSalesVou2AfterSuspendingVou1() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);

		System.out.println("*****************checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox******************");

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1440, 5)))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1441, 5)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1442, 5)))
			{
				itemListCount.get(i).click();

				break;
			}
		}

		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1443, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");
		String expQtyInVoucher=excelReader.getCellData(xlSheetName, 1440, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1440, 7, actQtyInVoucher);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1444, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 1441, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1441, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 1442, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1442, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 1443, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1443, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 1444, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1444, 7, actBalance);

		String actBatchPopupTable = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expBatchPopupTable = excelReader.getCellData(xlSheetName, 1445, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 1445, 7, actBatchPopupTable);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 1446, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1446, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 1447, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1447, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		Thread.sleep(2000);
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();



		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);


		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected

		boolean expstockReservationLabel			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1448, 6));
		boolean expres_LeftPanelWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1449, 6));
		boolean expres_LeftPanelItemCode			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1450, 6));
		boolean expres_LeftPanelItemName			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1451, 6));
		boolean expres_LeftPanelItemQty				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1452, 6));
		boolean expres_LeftPanelDueDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1453, 6));
		boolean expres_LeftPanelBaseUnit			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1454, 6));
		boolean expres_PickBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1455, 6));
		boolean expres_DiscardBtn					=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1456, 6));
		boolean expres_OkBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1457, 6));
		boolean expres_CloseBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1458, 6));

		boolean expbatchRes_BodyQtyToReserve		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1459, 6));
		boolean expbatchRes_BodyBatchNo				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1460, 6));
		boolean expbatchRes_BodyWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1461, 6));
		boolean	expbatchRes_BodyAvailableQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1462, 6));
		boolean expbatchRes_BodyRelesaseQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1463, 6));
		boolean expbatchRes_BodyCurOrdResQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1464, 6));
		boolean expbatchRes_BodyMfgDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1465, 6));
		boolean expbatchRes_BodyExpDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1466, 6));
		boolean expbatchRes_BodyBatchQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1467, 6));

		
		excelReader.setCellData(xlfile, xlSheetName, 1448, 7, Boolean.toString(actstockReservationLabel));
		excelReader.setCellData(xlfile, xlSheetName, 1449, 7, Boolean.toString(actres_LeftPanelWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1450, 7, Boolean.toString(actres_LeftPanelItemCode));
		excelReader.setCellData(xlfile, xlSheetName, 1451, 7, Boolean.toString(actres_LeftPanelItemName));
		excelReader.setCellData(xlfile, xlSheetName, 1452, 7, Boolean.toString(actres_LeftPanelItemQty));
		excelReader.setCellData(xlfile, xlSheetName, 1453, 7, Boolean.toString(actres_LeftPanelDueDate));
		excelReader.setCellData(xlfile, xlSheetName, 1454, 7, Boolean.toString(actres_LeftPanelBaseUnit));
		excelReader.setCellData(xlfile, xlSheetName, 1455, 7, Boolean.toString(actres_PickBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1456, 7, Boolean.toString(actres_DiscardBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1457, 7, Boolean.toString(actres_OkBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1458, 7, Boolean.toString(actres_CloseBtn));
		
		excelReader.setCellData(xlfile, xlSheetName, 1459, 7, Boolean.toString(actbatchRes_BodyQtyToReserve));
		excelReader.setCellData(xlfile, xlSheetName, 1460, 7, Boolean.toString(actbatchRes_BodyBatchNo));
		excelReader.setCellData(xlfile, xlSheetName, 1461, 7, Boolean.toString(actbatchRes_BodyWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1462, 7, Boolean.toString(actbatchRes_BodyAvailableQty));
		excelReader.setCellData(xlfile, xlSheetName, 1463, 7, Boolean.toString(actbatchRes_BodyRelesaseQty));
		excelReader.setCellData(xlfile, xlSheetName, 1464, 7, Boolean.toString(actbatchRes_BodyCurOrdResQty));
		excelReader.setCellData(xlfile, xlSheetName, 1465, 7, Boolean.toString(actbatchRes_BodyMfgDate));
		excelReader.setCellData(xlfile, xlSheetName, 1466, 7, Boolean.toString(actbatchRes_BodyExpDate));
		excelReader.setCellData(xlfile, xlSheetName, 1467, 7, Boolean.toString(actbatchRes_BodyBatchQty));
		

		String expTextres_LeftPanelWareHouseRow1	=excelReader.getCellData(xlSheetName, 1468, 6);
		String expTextres_LeftPanelItemCodeRow1		=excelReader.getCellData(xlSheetName, 1469, 6);
		String expTextres_LeftPanelItemNameRow1		=excelReader.getCellData(xlSheetName, 1470, 6);
		String expTextres_LeftPanelItemQtyRow1		=excelReader.getCellData(xlSheetName, 1471, 6);
		String expTextres_LeftPanelBaseUnitRow1		=excelReader.getCellData(xlSheetName, 1472, 6);


		String expbatchRes_QtyToReserveRow1			=excelReader.getCellData(xlSheetName, 1473, 6);
		String expbatchRes_BatchNoRow1				=excelReader.getCellData(xlSheetName, 1474, 6);
		String expbatchRes_WareHouseRow1			=excelReader.getCellData(xlSheetName, 1475, 6);
		String expbatchRes_AvailableQtyRow1			=excelReader.getCellData(xlSheetName, 1476, 6);
		String expbatchRes_RelesaseQtyRow1			=excelReader.getCellData(xlSheetName, 1477, 6);
		String expbatchRes_CurOrdResQtyRow1			=excelReader.getCellData(xlSheetName, 1478, 6);
		String expbatchRes_BatchQtyRow1				=excelReader.getCellData(xlSheetName, 1479, 6);
		
		

		excelReader.setCellData(xlfile, xlSheetName, 1468, 7, actTextres_LeftPanelWareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1469, 7, actTextres_LeftPanelItemCodeRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1470, 7, actTextres_LeftPanelItemNameRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1471, 7, actTextres_LeftPanelItemQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1472, 7, actTextres_LeftPanelBaseUnitRow1);
		
		excelReader.setCellData(xlfile, xlSheetName, 1473, 7, actbatchRes_QtyToReserveRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1474, 7, actbatchRes_BatchNoRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1475, 7, actbatchRes_WareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1476, 7, actbatchRes_AvailableQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1477, 7, actbatchRes_RelesaseQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1478, 7, actbatchRes_CurOrdResQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1479, 7, actbatchRes_BatchQtyRow1);

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

        /*String actMessage;
		
		HashSet<String> expMsg = new HashSet<String>();

		Thread.sleep(2000);

		if (errorMessage.getText().equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1445, 5))) 
		{
			actMessage = SavingInBackgroundTrial();
			
			expMsg.add(excelReader.getCellData(xlSheetName, 1480, 6));
			//expMsg.add(excelReader.getCellData(xlSheetName, 1481, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1482, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1483, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1480, 7, actMessage);
		}
		else
		{
			actMessage = SavingInBackgroundTrial();

			//expMsg.add(excelReader.getCellData(xlSheetName, 1481, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1483, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1480, 7, actMessage);
		}

		String expMessage = expMsg.toString();

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1482, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1483, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1480, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
		
		

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)


				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)  && 


				actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable.equalsIgnoreCase(expBatchPopupTable) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)

				)

		{
			System.out.println(" Test Pass: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1440, 8, resPass);

			return true;
		}
		else
		{
			System.out.println(" Test Fail: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1440, 8, resFail);
			return false;
		}
	
	}
	
	
	
	
	

	public boolean checkResavingSalesOrderVou1AfterVou2Saved() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1484, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				getAction().doubleClick(grid_CheckBoxList.get(i)).click().build().perform();

				break;
			}
		}

		Thread.sleep(2999);

		checkValidationMessage("Voucher loaded successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*HashSet<String> actMessage = new HashSet<String>();
		HashSet<String> expMessage = new HashSet<String>();

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			for (int i = 0; i < 4; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Saving in background.");
			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Voucher saved successfully : 1");
		}
		else
		{
			for (int i = 0; i < 2; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("Voucher saved successfully : 1");
			expMessage.add("Saving in background.");
		}

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		
        String actMessage;
		
		HashSet<String> expMsg = new HashSet<String>();

			Thread.sleep(2000);

		if (errorMessage.getText().equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1485, 5))) 
		{
			actMessage = SavingInBackgroundTrial();

			expMsg.add(excelReader.getCellData(xlSheetName, 1484, 6));
			//expMsg.add(excelReader.getCellData(xlSheetName, 1485, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1486, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1487, 6));
			
			excelReader.setCellData(xlfile, xlSheetName, 1484, 7, actMessage);
		}
		else
		{
			actMessage = SavingInBackgroundTrial();

			expMsg.add(excelReader.getCellData(xlSheetName, 1484, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1487, 6));
			
			excelReader.setCellData(xlfile, xlSheetName, 1484, 7, actMessage);
		}

		String expMessage = expMsg.toString();
		
		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		if (actMessage.equals(expMessage))
		{
			excelReader.setCellData(xlfile, xlSheetName, 1484, 8, resPass);
			return true;
		} 
		else
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 1484, 8, resFail);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			Thread.sleep(2000);
			
			//checkSuspendingVoucherInsalesOrder1();

			return false;
		}
	}

	
	
	

	public boolean checkSavingSalesInvoiceVoucherWithLinks() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1488, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 1489, 5));
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();

		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();

		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 1488, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1488, 7, actBatchNo);

		Thread.sleep(1999);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2999);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(1999);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 2; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("Voucher saved successfully : 1");
		expMessage.add("Saving in background.");*/
		
		
		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1489, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1490, 6));
        
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1489, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1489, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1490, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1489, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actBatchNo.equalsIgnoreCase(expBatchNo)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1488, 8, resPass);
			return true;
		}
		else
		{
			//errorMessageCloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1488, 8, resFail);
			return false;
		}
	}


	
	

	public boolean checkSavingPurchaseVoucherVATWithQty20() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException, AWTException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		String actdata=Boolean.toString(checkEraseAllDATA());
		String expdata=excelReader.getCellData(xlSheetName, 1491, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1491, 7, actdata);

		System.err.println(" Erase All data : "+actdata +" Value Expected : "+expdata);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 1491, 5));
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1492, 5));
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1493, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1494, 5));
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 1495, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1496, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 1497, 5));
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo=excelReader.getCellData(xlSheetName, 1492, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1492, 7, actBatchNo);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1493, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1494, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1493, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1493, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1494, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1493, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actdata.equalsIgnoreCase(expdata)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1491, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1491, 8, resFail);
			return false;
		}
	}


	
	
	
	public boolean checkSavingSalesOrderWithConsumingHalfQtyFromPurVouVat() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		System.out.println("*****************checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox******************");

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1498, 5)))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1499, 5)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1500, 5)))
			{
				itemListCount.get(i).click();

				break;
			}
		}

		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1501, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");
		String expQtyInVoucher=excelReader.getCellData(xlSheetName, 1498, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1498, 7, actQtyInVoucher);
		System.err.println("actQtyInVoucher :  "+actQtyInVoucher +" Value Exp : "+expQtyInVoucher);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1502, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 1499, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1499, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 1500, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1500, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 1501, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1501, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 1502, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1502, 7, actBalance);

		String actBatchPopupTable = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expBatchPopupTable = excelReader.getCellData(xlSheetName, 1503, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 1503, 7, actBatchPopupTable);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 1504, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1504, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 1505, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1505, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();



		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);


		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected

		boolean expstockReservationLabel			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1506, 6));
		boolean expres_LeftPanelWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1507, 6));
		boolean expres_LeftPanelItemCode			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1508, 6));
		boolean expres_LeftPanelItemName			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1509, 6));
		boolean expres_LeftPanelItemQty				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1510, 6));
		boolean expres_LeftPanelDueDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1511, 6));
		boolean expres_LeftPanelBaseUnit			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1512, 6));
		boolean expres_PickBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1513, 6));
		boolean expres_DiscardBtn					=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1514, 6));
		boolean expres_OkBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1515, 6));
		boolean expres_CloseBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1516, 6));

		boolean expbatchRes_BodyQtyToReserve		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1517, 6));
		boolean expbatchRes_BodyBatchNo				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1518, 6));
		boolean expbatchRes_BodyWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1519, 6));
		boolean	expbatchRes_BodyAvailableQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1520, 6));
		boolean expbatchRes_BodyRelesaseQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1521, 6));
		boolean expbatchRes_BodyCurOrdResQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1522, 6));
		boolean expbatchRes_BodyMfgDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1523, 6));
		boolean expbatchRes_BodyExpDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1524, 6));
		boolean expbatchRes_BodyBatchQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1525, 6));

		
		excelReader.setCellData(xlfile, xlSheetName, 1506, 7, Boolean.toString(actstockReservationLabel));
		excelReader.setCellData(xlfile, xlSheetName, 1507, 7, Boolean.toString(actres_LeftPanelWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1508, 7, Boolean.toString(actres_LeftPanelItemCode));
		excelReader.setCellData(xlfile, xlSheetName, 1509, 7, Boolean.toString(actres_LeftPanelItemName));
		excelReader.setCellData(xlfile, xlSheetName, 1510, 7, Boolean.toString(actres_LeftPanelItemQty));
		excelReader.setCellData(xlfile, xlSheetName, 1511, 7, Boolean.toString(actres_LeftPanelDueDate));
		excelReader.setCellData(xlfile, xlSheetName, 1512, 7, Boolean.toString(actres_LeftPanelBaseUnit));
		excelReader.setCellData(xlfile, xlSheetName, 1513, 7, Boolean.toString(actres_PickBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1514, 7, Boolean.toString(actres_DiscardBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1515, 7, Boolean.toString(actres_OkBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1516, 7, Boolean.toString(actres_CloseBtn));
		
		excelReader.setCellData(xlfile, xlSheetName, 1517, 7, Boolean.toString(actbatchRes_BodyQtyToReserve));
		excelReader.setCellData(xlfile, xlSheetName, 1518, 7, Boolean.toString(actbatchRes_BodyBatchNo));
		excelReader.setCellData(xlfile, xlSheetName, 1519, 7, Boolean.toString(actbatchRes_BodyWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1520, 7, Boolean.toString(actbatchRes_BodyAvailableQty));
		excelReader.setCellData(xlfile, xlSheetName, 1521, 7, Boolean.toString(actbatchRes_BodyRelesaseQty));
		excelReader.setCellData(xlfile, xlSheetName, 1522, 7, Boolean.toString(actbatchRes_BodyCurOrdResQty));
		excelReader.setCellData(xlfile, xlSheetName, 1523, 7, Boolean.toString(actbatchRes_BodyMfgDate));
		excelReader.setCellData(xlfile, xlSheetName, 1524, 7, Boolean.toString(actbatchRes_BodyExpDate));
		excelReader.setCellData(xlfile, xlSheetName, 1525, 7, Boolean.toString(actbatchRes_BodyBatchQty));
		

		String expTextres_LeftPanelWareHouseRow1	=excelReader.getCellData(xlSheetName, 1526, 6);
		String expTextres_LeftPanelItemCodeRow1		=excelReader.getCellData(xlSheetName, 1527, 6);
		String expTextres_LeftPanelItemNameRow1		=excelReader.getCellData(xlSheetName, 1528, 6);
		String expTextres_LeftPanelItemQtyRow1		=excelReader.getCellData(xlSheetName, 1529, 6);
		String expTextres_LeftPanelBaseUnitRow1		=excelReader.getCellData(xlSheetName, 1530, 6);


		String expbatchRes_QtyToReserveRow1			=excelReader.getCellData(xlSheetName, 1531, 6);
		String expbatchRes_BatchNoRow1				=excelReader.getCellData(xlSheetName, 1532, 6);
		String expbatchRes_WareHouseRow1			=excelReader.getCellData(xlSheetName, 1533, 6);
		String expbatchRes_AvailableQtyRow1			=excelReader.getCellData(xlSheetName, 1534, 6);
		String expbatchRes_RelesaseQtyRow1			=excelReader.getCellData(xlSheetName, 1535, 6);
		String expbatchRes_CurOrdResQtyRow1			=excelReader.getCellData(xlSheetName, 1536, 6);
		String expbatchRes_BatchQtyRow1				=excelReader.getCellData(xlSheetName, 1537, 6);
		
		

		excelReader.setCellData(xlfile, xlSheetName, 1526, 7, actTextres_LeftPanelWareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1527, 7, actTextres_LeftPanelItemCodeRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1528, 7, actTextres_LeftPanelItemNameRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1529, 7, actTextres_LeftPanelItemQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1530, 7, actTextres_LeftPanelBaseUnitRow1);
		
		excelReader.setCellData(xlfile, xlSheetName, 1531, 7, actbatchRes_QtyToReserveRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1532, 7, actbatchRes_BatchNoRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1533, 7, actbatchRes_WareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1534, 7, actbatchRes_AvailableQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1535, 7, actbatchRes_RelesaseQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1536, 7, actbatchRes_CurOrdResQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1537, 7, actbatchRes_BatchQtyRow1);

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1538, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1539, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1538, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1538, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1539, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1538, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)

				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)  && 

				actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable.equalsIgnoreCase(expBatchPopupTable) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted))
		{
			System.out.println(" Test Pass: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1498, 8, resPass);
			return true;
		}
		else
		{
			System.out.println(" Test Fail: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1498, 8, resFail);
			return false;
		}
	}

	
	
	
	
	
	
	public boolean checkChangingQtyInPurVouVATAfterSavingSalesOrder() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{ 
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		Thread.sleep(2000);
		
		String act  =Boolean.toString(checkChangingQuantityInPurchaseVoucherAfterBatchConsumed());
		String exp  =excelReader.getCellData(xlSheetName, 1540, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1540, 7, act);
		
		System.err.println("actual value       :"+act);
		System.err.println("expcted value       :"+exp);

		if (act.equalsIgnoreCase(exp))
		{
			excelReader.setCellData(xlfile, xlSheetName, 1540, 8, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1540, 8, resFail);
			return false;
		}
	}


	
	
	
	
	public boolean checkSuspendingVoucherInSalesOrder() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		Thread.sleep(2000);
		
		String act =Boolean.toString(checkSuspendingVoucherInsalesOrder1());
		String exp =excelReader.getCellData(xlSheetName, 1541, 6);
        excelReader.setCellData(xlfile, xlSheetName, 1541, 7, act);
		
		System.err.println("actual value       :"+act);
		System.err.println("expcted value       :"+exp);


		if (act.equalsIgnoreCase(exp))
		{
			excelReader.setCellData(xlfile, xlSheetName, 1541, 8, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1541, 8, resFail);
			return false;
		}
	}
	
	
	
	

	public boolean checkChangingQtyinPurVoucherAfterSalesOrderVouSuspended() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		String act   =Boolean.toString(checkChangingQuantityInPurchaseVoucherAfterBatchConsumed());
				
		String exp  =excelReader.getCellData(xlSheetName, 1542, 6);		
	    excelReader.setCellData(xlfile, xlSheetName, 1542, 7, act);
			
			System.err.println("actual value       :"+act);
			System.err.println("expcted value       :"+exp);

		if (act.equalsIgnoreCase(exp))
		{
			excelReader.setCellData(xlfile, xlSheetName, 1542, 8, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1542, 8, resFail);
			return false;
		}
	}

	
	
	
	public boolean checkReSavingSalesOrder() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);


		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1543, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				getAction().doubleClick(grid_CheckBoxList.get(i)).click().build().perform();

				break;
			}
		}

		Thread.sleep(1999);

		checkValidationMessage("Voucher loaded successfully");

		Thread.sleep(1999);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*String actMessage =SavingInBackgroundTrial();

        HashSet<String> expMsg = new HashSet();

        expMsg.add(excelReader.getCellData(xlSheetName, 1543, 6));
        expMsg.add(excelReader.getCellData(xlSheetName, 1544, 6));                
        String expMessage = expMsg.toString();
        excelReader.setCellData(xlfile, xlSheetName, 1543, 7, actMessage);

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1543, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1544, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1543, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			System.err.println(" Test Pass: Voucher  saved ");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1543, 8, resPass);
			return true;
		} 
		else
		{
			System.err.println(" Test Fail: Voucher  Not saved ");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1543, 8, resFail);
			return false;
		}
	}

	
	
	
	

	public boolean checkSavingPurchaseVoucherVATWithChangingItemAfterBatchConsumed() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getDriver().navigate().refresh();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1545, 5))) 
			{

				getAction().doubleClick(grid_CheckBoxList.get(i)).click().build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1546, 5));
		Thread.sleep(2999);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END,Keys.SHIFT);
		enter_Quantity.sendKeys(Keys.HOME);
		Thread.sleep(1000);
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 1547, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.END,Keys.SHIFT);
		enter_Rate.sendKeys(Keys.HOME);
		Thread.sleep(1000);
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1548, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1=excelReader.getCellData(xlSheetName, 1545, 6);
		String actMessage=checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1545, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage );

		if(actMessage.equalsIgnoreCase(expMessage1)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1545, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1545, 8, resFail);
			return false;
		}
	}



	
	
	
	public boolean checkChangingBatchInPurchaseVoucherVATAfterAfterBatchConsumed() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1549, 5))) 
			{

				getAction().doubleClick(grid_CheckBoxList.get(i)).click().build().perform();
				break;
			}
		}


		checkValidationMessage("Voucher Loaded Successfully");


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.click();
		enter_Batch.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		enter_Batch.sendKeys(excelReader.getCellData(xlSheetName, 1550, 5));
		Thread.sleep(2000);
		enter_Batch.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1=excelReader.getCellData(xlSheetName, 1549, 6);
		String actMessage=checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1549, 7, actMessage);


		System.out.println("******** Error Message : "+actMessage );

		if(actMessage.equalsIgnoreCase(expMessage1) ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			getWaitForAlert();
			getAlert().accept();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1549, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1549, 8, resFail);
			return false;
		}
	}


	
	
	
	public boolean checkSuspendingVoucherInSalesOrderAndChangingBatchNameInPurchaseVouVAT() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		String actSuspend=Boolean.toString(checkSuspendingVoucherInsalesOrder1());
		String expSuspend=excelReader.getCellData(xlSheetName, 1551, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1551, 7, actSuspend);

		System.err.println(" Suspended Sales Order Doc  :"+actSuspend +" Value Exp : "+expSuspend);

		String actBatch=Boolean.toString(checkChangingBatchInPurchaseVoucherVATAfterAfterBatchConsumed());
		String expbatch=excelReader.getCellData(xlSheetName, 1552, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1552, 7, actBatch);

		System.err.println(" Changing Batch Name in PV:"+actSuspend +" Value Exp : "+expSuspend);

		if (actBatch.equalsIgnoreCase(expbatch) && actSuspend.equalsIgnoreCase(expSuspend)) 
		{
			System.out.println(" Test Pass: Batch Name is not changed even after Consumed Sales Order Suspended ");
			excelReader.setCellData(xlfile, xlSheetName, 1551, 8, resPass);
			return true;
		} 
		else 
		{
			System.out.println(" Test Fail: Batch Name is not changed even after Consumed Sales Order Suspended ");
			excelReader.setCellData(xlfile, xlSheetName, 1551, 8, resFail);
			return true;
		}
	}
	
	
	


	public boolean checkSavingPVWithChangingWareHouseAfterVoucherConsumed() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1553, 5))) 
			{

				getAction().doubleClick(grid_CheckBoxList.get(i)).click().build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		enter_WarehouseTxt.sendKeys(excelReader.getCellData(xlSheetName, 1554, 5));
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1=excelReader.getCellData(xlSheetName, 1553, 6);
		String actMessage=checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1553, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage );

		if(actMessage.equalsIgnoreCase(expMessage1) ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			getWaitForAlert();
			getAlert().accept();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1553, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1553, 8, resFail);
			return false;
		}

	}


	public boolean checkEraseAllAndSavingPVVATWithBatchT() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException, AWTException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);

		boolean erase=checkEraseAllDATA();
		boolean expErase=true;
		System.err.println(" Earse All : "+erase +" Value Expectred  : "+expErase);

		Thread.sleep(2000);

		boolean SavingPurchaseVoucher=checkSavingPurchaseVoucherVATWithCurrentdate();
		boolean expSavingPurchaseVoucher=true;
		System.err.println(" SavingPurchaseVoucher : "+SavingPurchaseVoucher +" Value Expectred  : "+expSavingPurchaseVoucher);

		if (SavingPurchaseVoucher==expSavingPurchaseVoucher && erase==expErase)
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
	
	
	
	
	




	public boolean checkDefineAuthorizationWithoutKeepunpostingOptionOnInventoryDocumentInSalesOrder() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
		SettingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
		transactionAuthorizationBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
		documentNameDropdown.sendKeys(" ");
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrderBtn));
		salesOrderBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 1555, 5));

		Thread.sleep(3000);

		nameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addLevelBtn));
		addLevelBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(descriptionTxt));
		descriptionTxt.click();
		descriptionTxt.sendKeys(excelReader.getCellData(xlSheetName, 1556, 5));
		Thread.sleep(1000);
		descriptionTxt.sendKeys(Keys.TAB);


		Thread.sleep(2000);

		if(conditionNotRequiredChkBox.isSelected()==false)
		{
			conditionNotRequiredChkBox.click();
		}

		String actConditionNotRequiredIsSelected = Boolean.toString(conditionNotRequiredChkBox.isSelected());
		String expConditionNotRequiredIsSelected = excelReader.getCellData(xlSheetName, 1555, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1555, 7, actConditionNotRequiredIsSelected);

		System.out.println("Condition Not Required IsSelected  : "+actConditionNotRequiredIsSelected+" Value Expected "+expConditionNotRequiredIsSelected);

		ScrollToElement(keepUnpostedInventoryChkBox);
		Thread.sleep(2000);

		if(keepUnpostedInventoryChkBox.isSelected()==true)
		{
			//keepUnpostedInventoryChkBox.click();
			ClickUsingJs(keepUnpostedInventoryChkBox);
		}

		String actkeepUnpostedInventoryChkBox = Boolean.toString(keepUnpostedInventoryChkBox.isSelected());
		String expkeepUnpostedInventoryChkBox = excelReader.getCellData(xlSheetName, 1556, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1556, 7, actkeepUnpostedInventoryChkBox);

		System.out.println("keepUnpostedInventoryChkBox  : "+actkeepUnpostedInventoryChkBox+" Value Expected "+expkeepUnpostedInventoryChkBox);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userSelectionTab));
		userSelectionTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userrow1));
		userrow1.click();
		Select user = new Select(userDropdown);
		user.selectByVisibleText(excelReader.getCellData(xlSheetName, 1557, 5));

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
		definitionOkBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
		tranAuthSaveBtn.click();

		String expValidationMsg = excelReader.getCellData(xlSheetName, 1557, 6);
		String actValidationMsg = checkValidationMessage(expValidationMsg);
		excelReader.setCellData(xlfile, xlSheetName, 1557, 7, actValidationMsg);

		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+"True");

		if(actConditionNotRequiredIsSelected.equalsIgnoreCase(expConditionNotRequiredIsSelected) && actValidationMsg.equalsIgnoreCase(expValidationMsg) &&
				actkeepUnpostedInventoryChkBox.equalsIgnoreCase(expkeepUnpostedInventoryChkBox))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1555, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1555, 8, resFail);
			return false;
		}
	}
	
	
	

	public boolean checkSavingSalOrdVou1AfterAuthorisation() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException, AWTException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);

		String delete=Boolean.toString(checkEraseAllDATA());
		String expdelete=excelReader.getCellData(xlSheetName, 1558, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1558, 7, delete);

		System.err.println(" DELETE  "+delete +" Value   :"+expdelete);

		Thread.sleep(2000);

		String savingPurchase=Boolean.toString(checkSavingPurchaseVoucherVATWithCurrentdate());
		String expsavingPurchase=excelReader.getCellData(xlSheetName, 1559, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1559, 7, savingPurchase);

		System.err.println(" savingPurchase  "+savingPurchase +" Value   :"+expsavingPurchase);

		/*Thread.sleep(2000);

		String manual   =Boolean.toString(checkSalesOrderInReservationTypeIsManual2());
		String expManual=excelReader.getCellData(xlSheetName, 1560, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1560, 7, manual);
		
		
		System.err.println(" manual  "+manual +" Value   :"+expManual);*/

		Thread.sleep(2000);

		String saving=Boolean.toString(checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox());
		String expSaving=excelReader.getCellData(xlSheetName, 1561, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1561, 7, saving);

		System.err.println(" saving  "+saving +" Value   :"+expSaving);

		Thread.sleep(2000);

		if (saving.equalsIgnoreCase(expSaving) && delete.equalsIgnoreCase(expdelete) && 
				savingPurchase.equalsIgnoreCase(expsavingPurchase) /*&& manual.equalsIgnoreCase(expManual)*/)
		{
			excelReader.setCellData(xlfile, xlSheetName, 1558, 8, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1558, 8, resFail);
			return false;
		}
	}
	
	
	
	
	

	public boolean checkSavingVoucherInsalesOrderafterBatchConsumed() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);

		String saving=Boolean.toString(checkSavingSalesOrdervoucher2AfterConsumedBatchInVoucher1());
		String expSaving=excelReader.getCellData(xlSheetName, 1562, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1562, 7, saving);

		System.err.println(" saving  "+saving +" Value   :"+expSaving);

		if (saving.equalsIgnoreCase(expSaving)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1562, 8, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1562, 8, resFail);
			return false;
		}
	}
	
	
	
	
	

	public boolean checkSavingSalesInvoiceWithLoadingLinks() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		String act   =Boolean.toString(checkSavingSalesInvoiceVoucherWithLinks());
		String exp   =excelReader.getCellData(xlSheetName, 1563, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1563, 7, act);
		
		System.err.println("Actual value          :"+act);
		System.err.println("expected value        :"+exp);

		if (act.equalsIgnoreCase(exp))
		{
			excelReader.setCellData(xlfile, xlSheetName, 1563, 8, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1563, 8, resFail);
			return false;
		}
	}
	
	
	
	


	public boolean checkEditingQtyInPVVATAfterSavingSalesInvoiceVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		String act  =Boolean.toString(checkEditingAndSavingPurchaseVoucherVATVoucher1WithQuantityBelowConsumedQuantityInSalesInvoiceVoucher1());
		String exp  =excelReader.getCellData(xlSheetName, 1564, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1564, 7, act);
		
		System.err.println("actual value     :"+act);
		System.err.println("expected value   :"+exp);

		if (act.equalsIgnoreCase(exp)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1564, 8, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1564, 8, resFail);
			return false;
		}
	}
	
	
	
	

	public boolean checkChangingItemInPvVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getDriver().navigate().refresh();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1565, 5))) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).click().build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(excelReader.getCellData(xlSheetName, 1566, 5));
		Thread.sleep(2999);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END,Keys.SHIFT);
		enter_Quantity.sendKeys(Keys.HOME);
		enter_Quantity.sendKeys(excelReader.getCellData(xlSheetName, 1567, 5));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.END,Keys.SHIFT);
		enter_Rate.sendKeys(Keys.HOME);
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1568, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1=excelReader.getCellData(xlSheetName, 1565, 6);
		String actMessage=checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1565, 7, actMessage);

		System.out.println("******** Error Message : "+actMessage );

		if(actMessage.equalsIgnoreCase(expMessage1)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1565, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1565, 8, resFail);
			return false;
		}
	}

	
	
	
	

	public boolean checkChangingBatchNameInPVVATAfterBatchConsumed() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		String act  =Boolean.toString(checkChangingBatchInPurchaseVoucherVATAfterAfterBatchConsumed());
		String exp  =excelReader.getCellData(xlSheetName, 1569, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1569, 7, act);
		
		System.err.println("actual value    :"+act);
		System.err.println("expected value    :"+exp);

		if (act.equalsIgnoreCase(exp))
		{
			excelReader.setCellData(xlfile, xlSheetName, 1569, 8, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1569, 8, resFail);
			return false;
		}
	}
	
	
	
	


	public boolean checkChangingWarehouseInPVVATAfterAfterBatchConsumed() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);

		String  act=Boolean.toString(checkChangingBatchInPurchaseVoucherVATAfterAfterBatchConsumed());
		String  exp=excelReader.getCellData(xlSheetName, 1570, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1570, 7, act);
		
		System.err.println("actual value     :"+act);
		System.err.println("expected value   :"+exp);
		
		if (act.equalsIgnoreCase(exp))
		{
			excelReader.setCellData(xlfile, xlSheetName, 1570, 8, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1570, 8, resFail);
			return false;
		}
	}
	
	
	
	
	


	public boolean checkDeletingVoucherInSIAndSuspendingVoucherInSO() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		getDriver().navigate().refresh();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);
		
		click(homePageVoucherArrowBtn);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomePAgeHeaderAllChkbox));
		voucherHomePAgeHeaderAllChkbox.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		Thread.sleep(2000);;
		getWaitForAlert();

		getAlert().accept();

		String expDeleteMessage = excelReader.getCellData(xlSheetName, 1571, 6);
		String actDeleteMessage = checkValidationMessage(expDeleteMessage);
		excelReader.setCellData(xlfile, xlSheetName, 1571, 7, actDeleteMessage);

		if( actDeleteMessage.equalsIgnoreCase(expDeleteMessage) ) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1571, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1571, 8, resFail);
			return false;
		}
	}




	


	public boolean checkSavingVoucherInSO2AfterSuspendingVoucherSO1() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);

		String suspended=Boolean.toString(checkSuspendingVoucherInsalesOrder1());
		String expsuspend=excelReader.getCellData(xlSheetName, 1572, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1572, 7, suspended);

		System.out.println("suspended  "+suspended +" Value  "+expsuspend);

		Thread.sleep(2000);
		

		//excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		System.out.println("*****************checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox******************");

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1572, 5)))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1573, 5)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1574, 5)))
			{
				itemListCount.get(i).click();

				break;
			}
		}

		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1575, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");
		String expQtyInVoucher  =excelReader.getCellData(xlSheetName, 1573, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1573, 7, actQtyInVoucher);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1576, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 1574, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1574, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 1575, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1575, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 1576, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1576, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 1577, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1577, 7, actBalance);

		String actBatchPopupTable = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expBatchPopupTable = excelReader.getCellData(xlSheetName, 1578, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 1578, 7, actBatchPopupTable);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 1579, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1579, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 1580, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1580, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		Thread.sleep(2000);
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();



		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);


		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected

		boolean expstockReservationLabel			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1581, 6));
		boolean expres_LeftPanelWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1582, 6));
		boolean expres_LeftPanelItemCode			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1583, 6));
		boolean expres_LeftPanelItemName			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1584, 6));
		boolean expres_LeftPanelItemQty				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1585, 6));
		boolean expres_LeftPanelDueDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1586, 6));
		boolean expres_LeftPanelBaseUnit			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1587, 6));
		boolean expres_PickBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1588, 6));
		boolean expres_DiscardBtn					=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1589, 6));
		boolean expres_OkBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1590, 6));
		boolean expres_CloseBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1591, 6));

		boolean expbatchRes_BodyQtyToReserve		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1592, 6));
		boolean expbatchRes_BodyBatchNo				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1593, 6));
		boolean expbatchRes_BodyWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1594, 6));
		boolean	expbatchRes_BodyAvailableQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1595, 6));
		boolean expbatchRes_BodyRelesaseQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1596, 6));
		boolean expbatchRes_BodyCurOrdResQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1597, 6));
		boolean expbatchRes_BodyMfgDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1598, 6));
		boolean expbatchRes_BodyExpDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1599, 6));
		boolean expbatchRes_BodyBatchQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1600, 6));

		
		excelReader.setCellData(xlfile, xlSheetName, 1581, 7, Boolean.toString(actstockReservationLabel));
		excelReader.setCellData(xlfile, xlSheetName, 1582, 7, Boolean.toString(actres_LeftPanelWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1583, 7, Boolean.toString(actres_LeftPanelItemCode));
		excelReader.setCellData(xlfile, xlSheetName, 1584, 7, Boolean.toString(actres_LeftPanelItemName));
		excelReader.setCellData(xlfile, xlSheetName, 1585, 7, Boolean.toString(actres_LeftPanelItemQty));
		excelReader.setCellData(xlfile, xlSheetName, 1586, 7, Boolean.toString(actres_LeftPanelDueDate));
		excelReader.setCellData(xlfile, xlSheetName, 1587, 7, Boolean.toString(actres_LeftPanelBaseUnit));
		excelReader.setCellData(xlfile, xlSheetName, 1588, 7, Boolean.toString(actres_PickBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1589, 7, Boolean.toString(actres_DiscardBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1590, 7, Boolean.toString(actres_OkBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1591, 7, Boolean.toString(actres_CloseBtn));
		
		excelReader.setCellData(xlfile, xlSheetName, 1592, 7, Boolean.toString(actbatchRes_BodyQtyToReserve));
		excelReader.setCellData(xlfile, xlSheetName, 1593, 7, Boolean.toString(actbatchRes_BodyBatchNo));
		excelReader.setCellData(xlfile, xlSheetName, 1594, 7, Boolean.toString(actbatchRes_BodyWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1595, 7, Boolean.toString(actbatchRes_BodyAvailableQty));
		excelReader.setCellData(xlfile, xlSheetName, 1596, 7, Boolean.toString(actbatchRes_BodyRelesaseQty));
		excelReader.setCellData(xlfile, xlSheetName, 1597, 7, Boolean.toString(actbatchRes_BodyCurOrdResQty));
		excelReader.setCellData(xlfile, xlSheetName, 1598, 7, Boolean.toString(actbatchRes_BodyMfgDate));
		excelReader.setCellData(xlfile, xlSheetName, 1599, 7, Boolean.toString(actbatchRes_BodyExpDate));
		excelReader.setCellData(xlfile, xlSheetName, 1600, 7, Boolean.toString(actbatchRes_BodyBatchQty));
		

		String expTextres_LeftPanelWareHouseRow1	=excelReader.getCellData(xlSheetName, 1601, 6);
		String expTextres_LeftPanelItemCodeRow1		=excelReader.getCellData(xlSheetName, 1602, 6);
		String expTextres_LeftPanelItemNameRow1		=excelReader.getCellData(xlSheetName, 1603, 6);
		String expTextres_LeftPanelItemQtyRow1		=excelReader.getCellData(xlSheetName, 1604, 6);
		String expTextres_LeftPanelBaseUnitRow1		=excelReader.getCellData(xlSheetName, 1605, 6);


		String expbatchRes_QtyToReserveRow1			=excelReader.getCellData(xlSheetName, 1606, 6);
		String expbatchRes_BatchNoRow1				=excelReader.getCellData(xlSheetName, 1607, 6);
		String expbatchRes_WareHouseRow1			=excelReader.getCellData(xlSheetName, 1608, 6);
		String expbatchRes_AvailableQtyRow1			=excelReader.getCellData(xlSheetName, 1609, 6);
		String expbatchRes_RelesaseQtyRow1			=excelReader.getCellData(xlSheetName, 1610, 6);
		String expbatchRes_CurOrdResQtyRow1			=excelReader.getCellData(xlSheetName, 1611, 6);
		String expbatchRes_BatchQtyRow1				=excelReader.getCellData(xlSheetName, 1612, 6);
		
		

		excelReader.setCellData(xlfile, xlSheetName, 1601, 7, actTextres_LeftPanelWareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1602, 7, actTextres_LeftPanelItemCodeRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1603, 7, actTextres_LeftPanelItemNameRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1604, 7, actTextres_LeftPanelItemQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1605, 7, actTextres_LeftPanelBaseUnitRow1);
		
		excelReader.setCellData(xlfile, xlSheetName, 1606, 7, actbatchRes_QtyToReserveRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1607, 7, actbatchRes_BatchNoRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1608, 7, actbatchRes_WareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1609, 7, actbatchRes_AvailableQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1610, 7, actbatchRes_RelesaseQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1611, 7, actbatchRes_CurOrdResQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1612, 7, actbatchRes_BatchQtyRow1);

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

        /*String actMessage;
		
		HashSet<String> expMsg = new HashSet<String>();

		Thread.sleep(2000);

		if (errorMessage.getText().equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1577, 5))) 
		{
			actMessage = SavingInBackgroundTrial();
			
			expMsg.add(excelReader.getCellData(xlSheetName, 1613, 6));
			//expMsg.add(excelReader.getCellData(xlSheetName, 1614, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1615, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1616, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1613, 7, actMessage);
		}
		else
		{
			actMessage = SavingInBackgroundTrial();

			//expMsg.add(excelReader.getCellData(xlSheetName, 1614, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1616, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1613, 7, actMessage);
		}

		String expMessage = expMsg.toString();

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1615, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1616, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1613, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)


				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)  && 


				actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable.equalsIgnoreCase(expBatchPopupTable) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted) &&
				suspended.equalsIgnoreCase(expsuspend)

				)

		{
			System.out.println(" Test Pass: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1572, 8, resPass);

			return true;
		}
		else
		{
			System.out.println(" Test Fail: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1572, 8, resFail);
			return false;
		}
	

		/*boolean saving=checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox();
		boolean expSaving=true;

		System.err.println("SAVING ; "+saving +" VAlue Exp: "+expSaving);

		Thread.sleep(2000);

		if (saving==expSaving && 
				suspended==expsuspend)
		{
			return true;
		} 
		else 
		{
			return false;
		}	*/	
	}







	public boolean checkResavingSalesOrd1AfterSavingSalesOrd2() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1617, 5))) 
			{
				grid_CheckBoxList.get(i).click();
				getAction().doubleClick(grid_CheckBoxList.get(i)).click().build().perform();

				break;
			}
		}

		Thread.sleep(2999);

		checkValidationMessage("Voucher loaded successfully");


		String docno=documentNumberTxt.getAttribute("value");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*HashSet<String> actMessage = new HashSet<String>();
		HashSet<String> expMessage = new HashSet<String>();

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			for (int i = 0; i < 4; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Saving in background.");
			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Voucher saved successfully : 1");
		}
		else
		{
			for (int i = 0; i < 2; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("Voucher saved successfully : 1");
			expMessage.add("Saving in background.");
		}

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		
        /*String actMessage;
		
		HashSet<String> expMsg = new HashSet<String>();

			Thread.sleep(2000);

		if (errorMessage.getText().equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1618, 5))) 
		{
			actMessage = SavingInBackgroundTrial();

			expMsg.add(excelReader.getCellData(xlSheetName, 1617, 6));
			//expMsg.add(excelReader.getCellData(xlSheetName, 1618, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1619, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1620, 6));
			
			excelReader.setCellData(xlfile, xlSheetName, 1617, 7, actMessage);
		}
		else
		{
			actMessage = SavingInBackgroundTrial();

			//expMsg.add(excelReader.getCellData(xlSheetName, 1618, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1620, 6));
			
			excelReader.setCellData(xlfile, xlSheetName, 1617, 7, actMessage);
		}

		String expMessage = expMsg.toString();
		
		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1619, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1620, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1619, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if (actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			System.err.println(" Test Pass: Voucher  saved ");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1617, 8, resPass);
			return true;
		} 
		else
		{
			System.err.println(" Test Fail: Voucher  Not saved ");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1617, 8, resPass);
			
			return false;
		}

	}


	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr/td[7]")
	private static List<WebElement> workFlowVoucherNoList;


	public boolean checkSavingSIWithLoadingLinks() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		Thread.sleep(2000);
		
		int workFlowVoucherNoListCount=workFlowVoucherNoList.size();
		ArrayList<String >workFlowVoucherNoListarray=new ArrayList<>();
		for (int i = 0; i < workFlowVoucherNoListCount; i++) 
		{
			String data=workFlowVoucherNoList.get(i).getText();
			workFlowVoucherNoListarray.add(data);
		}

		String actworkFlowVoucherNoList=workFlowVoucherNoListarray.toString();
		String expworkFlowVoucherNoList=excelReader.getCellData(xlSheetName, 1621, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1621, 7, actworkFlowVoucherNoList);

		System.out.println(" workFlowVoucherNoList : "+actworkFlowVoucherNoList +" Value Exp : "+expworkFlowVoucherNoList);

		if (actworkFlowVoucherNoList.equalsIgnoreCase(expworkFlowVoucherNoList))
		{
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
			workFlowHeaderChkBoxCL.click();

			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1621, 5));
			Thread.sleep(2000);
			departmentTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 1622, 5));
			Thread.sleep(3000);
			salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			Thread.sleep(2000);
			pvWarehouseTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();

			enter_AQ.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();

			enter_Rate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();

			Thread.sleep(2000);


			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();

			Thread.sleep(2000);


			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actBatchNo=select1stRow_19thColumn.getText();
			String expBatchNo=excelReader.getCellData(xlSheetName, 1622, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1622, 7, actBatchNo);
			
			System.err.println("actual batch no      :"+actBatchNo );
			System.err.println("exp batch no         :"+expBatchNo );

			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

			Thread.sleep(2999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();

			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();

			/*String actMessage =SavingInBackgroundTrial();

            HashSet<String> expMsg = new HashSet();

            expMsg.add(excelReader.getCellData(xlSheetName, 1623, 6));
            expMsg.add(excelReader.getCellData(xlSheetName, 1624, 6));                
            String expMessage = expMsg.toString();
            excelReader.setCellData(xlfile, xlSheetName, 1623, 7, actMessage);

			System.out.println("Actual Message    : "+actMessage);
			System.out.println("Expected Message  : "+expMessage);*/
			
			String expMessage1= excelReader.getCellData(xlSheetName, 1623, 6);
			String expMessage2= excelReader.getCellData(xlSheetName, 1624, 6);
			
			String actMessage = checkValidationMessage(expMessage1);
			excelReader.setCellData(xlfile, xlSheetName, 1623, 7, actMessage);
			
		   
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

			System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actBatchNo.equalsIgnoreCase(expBatchNo)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1621, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1621, 8, resFail);
				return false;
			}
		}

		else
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1621, 8, resFail);
			return false;
		}
	}


	
	
	
	
	public boolean checkDefineAuthorizationOnSalesOrderDocumentWithKeepUnpostingReservationsOption() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException, AWTException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());

		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));

		String erase=Boolean.toString(checkEraseAllDATA());
		String experase=excelReader.getCellData(xlSheetName, 1625, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1625, 7, erase);

		System.err.println(" ERASE : "+erase +" VALUE  : "+experase);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
		SettingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
		transactionAuthorizationBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
		documentNameDropdown.sendKeys(" ");
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrderBtn1));
		salesOrderBtn1.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 1625, 5));

		Thread.sleep(3000);

		nameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
        getAction().doubleClick(Level1editBtn).build().perform();

		Thread.sleep(2000);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(descriptionTxt));
		descriptionTxt.click();
		descriptionTxt.sendKeys(excelReader.getCellData(xlSheetName, 1626, 5));
		Thread.sleep(1000);
		descriptionTxt.sendKeys(Keys.TAB);


		Thread.sleep(2000);

		if(conditionNotRequiredChkBox.isSelected()==false)
		{
			conditionNotRequiredChkBox.click();
		}

		String actConditionNotRequiredIsSelected = Boolean.toString(conditionNotRequiredChkBox.isSelected());
		String expConditionNotRequiredIsSelected = excelReader.getCellData(xlSheetName, 1626, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1626, 7, actConditionNotRequiredIsSelected);

		System.out.println("Condition Not Required IsSelected  : "+actConditionNotRequiredIsSelected+" Value Expected "+expConditionNotRequiredIsSelected);


		Thread.sleep(2000);
		
		ScrollToElement(keepUnpostedResevationChkBox);

		if(keepUnpostedResevationChkBox.isSelected()==false)
		{
			//keepUnpostedInventoryChkBox.click();
			ClickUsingJs(keepUnpostedResevationChkBox);
		}

		String actkeepUnpostedResevationChkBox = Boolean.toString(keepUnpostedResevationChkBox.isSelected());
		String expkeepUnpostedResevationChkBox = excelReader.getCellData(xlSheetName, 1627, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1627, 7, actkeepUnpostedResevationChkBox);

		System.out.println("keepUnpostedInventoryChkBox  : "+actkeepUnpostedResevationChkBox+" Value Expected "+expkeepUnpostedResevationChkBox);


		Thread.sleep(2000);
		
		/*ScrollToElement(keepUnpostedInventoryChkBox);

		if(keepUnpostedInventoryChkBox.isSelected()==false)
		{
			//keepUnpostedInventoryChkBox.click();
			ClickUsingJs(keepUnpostedInventoryChkBox);
		}

		String actkeepUnpostedInventoryChkBox = Boolean.toString(keepUnpostedInventoryChkBox.isSelected());
		String expkeepUnpostedInventoryChkBox = excelReader.getCellData(xlSheetName, 1627, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1627, 7, actkeepUnpostedInventoryChkBox);

		System.out.println("keepUnpostedInventoryChkBox  : "+actkeepUnpostedInventoryChkBox+" Value Expected "+expkeepUnpostedInventoryChkBox);


		Thread.sleep(2000);*/


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
		definitionOkBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
		tranAuthSaveBtn.click();

		String expValidationMsg = excelReader.getCellData(xlSheetName, 1628, 6);
		String actValidationMsg = checkValidationMessage(expValidationMsg);
		excelReader.setCellData(xlfile, xlSheetName, 1628, 7, actValidationMsg);

		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+"True");

		if(actConditionNotRequiredIsSelected.equalsIgnoreCase(expConditionNotRequiredIsSelected) && actValidationMsg.equalsIgnoreCase(expValidationMsg) &&
				actkeepUnpostedResevationChkBox.equalsIgnoreCase(expkeepUnpostedResevationChkBox))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1625, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1625, 8, resFail);
			return false;
		}
	}



	public boolean checkSavingPVVATAndSOVoucherAfterAuthorisation() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);

		String savingPV=Boolean.toString(checkSavingPurchaseVoucherVATWithCurrentdate());
		String expSaving=excelReader.getCellData(xlSheetName, 1629, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1629, 7, savingPV);

		System.out.println(" saving : "+savingPV +" VALUE  : "+expSaving);
		Thread.sleep(2000);

		/*String settingOption=Boolean.toString(checkEnableInputBatchEvenStockIsNotUpdatedOptionInSalesOrder());
		String expSettingOption=excelReader.getCellData(xlSheetName, 1630, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1630, 7, settingOption);


		System.out.println(" Setting Option  : "+settingOption +" Value  : "+expSettingOption);

		Thread.sleep(2000);
		
		String savingsalesOrder=Boolean.toString(checkEnableInputBatchEvenStockIsNotUpdatedOptionInSalesOrder());
		String expSalesOrder   =excelReader.getCellData(xlSheetName, 1631, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1631, 7, savingsalesOrder);

		System.out.println(" Saving Sales Order  : "+savingsalesOrder +" Value  : "+expSalesOrder);*/

		if ( savingPV.equalsIgnoreCase(expSaving)/* && settingOption.equalsIgnoreCase(expSettingOption)*/ /*&& savingsalesOrder.equalsIgnoreCase(expSalesOrder)*/)
		{
			System.out.println(" Test Pass : Data Erased and saved ");
			excelReader.setCellData(xlfile, xlSheetName, 1629, 8, resPass);
			return true;
		}
		else
		{
			System.out.println(" Test FAIL : Data Erased and saved ");
			excelReader.setCellData(xlfile, xlSheetName, 1629, 8, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean checkSavingSO1AfterChangingInAuthorisation() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		String act   =Boolean.toString(checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox());
		String exp   =excelReader.getCellData(xlSheetName, 1632, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1632, 7, act);
		
		System.err.println("actual value       :"+act);
		System.err.println("expected value     :"+exp);
		

		if (act.equalsIgnoreCase(exp)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1632, 8, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1632, 8, resFail);
			return false;
		}
	}
	
	
	
	
	
	

	public boolean checkSavingSO2AfterChangingInAuthorisation() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		

		System.out.println("*****************checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox******************");

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1633, 5)))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1634, 5)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1635, 5)))
			{
				itemListCount.get(i).click();

				break;
			}
		}

		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1636, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		if (errorMessage.getText().isEmpty()==false) 
        {
                checkValidationMessage("This transaction will make stock negative.");
        }
		
		/*if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}*/
		
		Thread.sleep(1500);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");
		String expQtyInVoucher=excelReader.getCellData(xlSheetName, 1633, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1633, 7, actQtyInVoucher);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1637, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 1634, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1634, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 1635, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1635, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 1636, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1636, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 1637, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1637, 7, actBalance);

		String actBatchPopupTable = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expBatchPopupTable = excelReader.getCellData(xlSheetName, 1638, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 1638, 7, actBatchPopupTable);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 1639, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1639, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 1640, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1640, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		Thread.sleep(2000);
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();



		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);


		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected

		boolean expstockReservationLabel			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1641, 6));
		boolean expres_LeftPanelWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1642, 6));
		boolean expres_LeftPanelItemCode			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1643, 6));
		boolean expres_LeftPanelItemName			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1644, 6));
		boolean expres_LeftPanelItemQty				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1645, 6));
		boolean expres_LeftPanelDueDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1646, 6));
		boolean expres_LeftPanelBaseUnit			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1647, 6));
		boolean expres_PickBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1648, 6));
		boolean expres_DiscardBtn					=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1649, 6));
		boolean expres_OkBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1650, 6));
		boolean expres_CloseBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1651, 6));

		boolean expbatchRes_BodyQtyToReserve		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1652, 6));
		boolean expbatchRes_BodyBatchNo				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1653, 6));
		boolean expbatchRes_BodyWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1654, 6));
		boolean	expbatchRes_BodyAvailableQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1655, 6));
		boolean expbatchRes_BodyRelesaseQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1656, 6));
		boolean expbatchRes_BodyCurOrdResQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1657, 6));
		boolean expbatchRes_BodyMfgDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1658, 6));
		boolean expbatchRes_BodyExpDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1659, 6));
		boolean expbatchRes_BodyBatchQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1660, 6));

		
		excelReader.setCellData(xlfile, xlSheetName, 1641, 7, Boolean.toString(actstockReservationLabel));
		excelReader.setCellData(xlfile, xlSheetName, 1642, 7, Boolean.toString(actres_LeftPanelWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1643, 7, Boolean.toString(actres_LeftPanelItemCode));
		excelReader.setCellData(xlfile, xlSheetName, 1644, 7, Boolean.toString(actres_LeftPanelItemName));
		excelReader.setCellData(xlfile, xlSheetName, 1645, 7, Boolean.toString(actres_LeftPanelItemQty));
		excelReader.setCellData(xlfile, xlSheetName, 1646, 7, Boolean.toString(actres_LeftPanelDueDate));
		excelReader.setCellData(xlfile, xlSheetName, 1647, 7, Boolean.toString(actres_LeftPanelBaseUnit));
		excelReader.setCellData(xlfile, xlSheetName, 1648, 7, Boolean.toString(actres_PickBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1649, 7, Boolean.toString(actres_DiscardBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1650, 7, Boolean.toString(actres_OkBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1651, 7, Boolean.toString(actres_CloseBtn));
		
		excelReader.setCellData(xlfile, xlSheetName, 1652, 7, Boolean.toString(actbatchRes_BodyQtyToReserve));
		excelReader.setCellData(xlfile, xlSheetName, 1653, 7, Boolean.toString(actbatchRes_BodyBatchNo));
		excelReader.setCellData(xlfile, xlSheetName, 1654, 7, Boolean.toString(actbatchRes_BodyWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1655, 7, Boolean.toString(actbatchRes_BodyAvailableQty));
		excelReader.setCellData(xlfile, xlSheetName, 1656, 7, Boolean.toString(actbatchRes_BodyRelesaseQty));
		excelReader.setCellData(xlfile, xlSheetName, 1657, 7, Boolean.toString(actbatchRes_BodyCurOrdResQty));
		excelReader.setCellData(xlfile, xlSheetName, 1658, 7, Boolean.toString(actbatchRes_BodyMfgDate));
		excelReader.setCellData(xlfile, xlSheetName, 1659, 7, Boolean.toString(actbatchRes_BodyExpDate));
		excelReader.setCellData(xlfile, xlSheetName, 1660, 7, Boolean.toString(actbatchRes_BodyBatchQty));
		

		String expTextres_LeftPanelWareHouseRow1	=excelReader.getCellData(xlSheetName, 1661, 6);
		String expTextres_LeftPanelItemCodeRow1		=excelReader.getCellData(xlSheetName, 1662, 6);
		String expTextres_LeftPanelItemNameRow1		=excelReader.getCellData(xlSheetName, 1663, 6);
		String expTextres_LeftPanelItemQtyRow1		=excelReader.getCellData(xlSheetName, 1664, 6);
		String expTextres_LeftPanelBaseUnitRow1		=excelReader.getCellData(xlSheetName, 1665, 6);


		String expbatchRes_QtyToReserveRow1			=excelReader.getCellData(xlSheetName, 1666, 6);
		String expbatchRes_BatchNoRow1				=excelReader.getCellData(xlSheetName, 1667, 6);
		String expbatchRes_WareHouseRow1			=excelReader.getCellData(xlSheetName, 1668, 6);
		String expbatchRes_AvailableQtyRow1			=excelReader.getCellData(xlSheetName, 1669, 6);
		String expbatchRes_RelesaseQtyRow1			=excelReader.getCellData(xlSheetName, 1670, 6);
		String expbatchRes_CurOrdResQtyRow1			=excelReader.getCellData(xlSheetName, 1671, 6);
		String expbatchRes_BatchQtyRow1				=excelReader.getCellData(xlSheetName, 1672, 6);
		
		

		excelReader.setCellData(xlfile, xlSheetName, 1661, 7, actTextres_LeftPanelWareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1662, 7, actTextres_LeftPanelItemCodeRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1663, 7, actTextres_LeftPanelItemNameRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1664, 7, actTextres_LeftPanelItemQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1665, 7, actTextres_LeftPanelBaseUnitRow1);
		
		excelReader.setCellData(xlfile, xlSheetName, 1666, 7, actbatchRes_QtyToReserveRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1667, 7, actbatchRes_BatchNoRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1668, 7, actbatchRes_WareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1669, 7, actbatchRes_AvailableQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1670, 7, actbatchRes_RelesaseQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1671, 7, actbatchRes_CurOrdResQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1672, 7, actbatchRes_BatchQtyRow1);

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

        /*String actMessage;
		
		HashSet<String> expMsg = new HashSet<String>();

		Thread.sleep(2000);

		if (errorMessage.getText().equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1638, 5))) 
		{
			actMessage = SavingInBackgroundTrial();
			
			expMsg.add(excelReader.getCellData(xlSheetName, 1673, 6));
			//expMsg.add(excelReader.getCellData(xlSheetName, 1674, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1675, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1676, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1673, 7, actMessage);
		}
		else
		{
			actMessage = SavingInBackgroundTrial();

			//expMsg.add(excelReader.getCellData(xlSheetName, 1674, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1676, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1673, 7, actMessage);
		}

		String expMessage = expMsg.toString();

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		Thread.sleep(2000);
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1675, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1676, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1673, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
		
		

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)


				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)  && 


				actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable.equalsIgnoreCase(expBatchPopupTable) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)

				)

		{
			System.out.println(" Test Pass: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1633, 8, resPass);

			return true;
		}
		else
		{
			System.out.println(" Test Fail: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1633, 8, resFail);
			return false;
		}
	

		/*if (checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox()==true) 
		{
			return true;

		} else {

			return false;
		}*/
	}






	public boolean checkSavingSalesInvoiceVATWihLoadingLinks() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);
		
		click(homePageVoucherArrowBtn);
		
		Thread.sleep(2000);
		
		click(pendingSalesOrder);
		Thread.sleep(2000);
		
		boolean actVoucherBodyText  =voucherBodyGrid.getText().isEmpty();
		//boolean actVoucherBody=voucherBodyGrid.getText().isEmpty();
		boolean expVoucherBodyText=true;
		
		//boolean actVoucherBody = false;
		System.err.println("actVoucherBodyText    :" +actVoucherBodyText);
		System.err.println("expVoucherBodyText    :" +expVoucherBodyText);
		
		if (actVoucherBodyText==expVoucherBodyText) {
			
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			 voucherhomeCloseBtn.click();
			 return true;
			
		}
		
		else
		{
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
		
}	

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		//workFlowExpandBtn.click();

		Thread.sleep(2000);
		int workFlowVoucherNoListCount=workFlowVoucherNoList.size();
		ArrayList<String >workFlowVoucherNoListarray=new ArrayList<>();
		for (int i = 0; i < workFlowVoucherNoListCount; i++) 
		{
			String data=workFlowVoucherNoList.get(i).getText();
			workFlowVoucherNoListarray.add(data);

		}

		String actworkFlowVoucherNoList=workFlowVoucherNoListarray.toString();
		String expworkFlowVoucherNoList=excelReader.getCellData(xlSheetName, 1677, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1677, 7, actworkFlowVoucherNoList);

		System.out.println(" workFlowVoucherNoList : "+actworkFlowVoucherNoList +" Value Exp : "+expworkFlowVoucherNoList);

		if (actworkFlowVoucherNoList.equalsIgnoreCase(expworkFlowVoucherNoList))
		{
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
			workFlowHeaderChkBoxCL.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.sendKeys(excelReader.getCellData(xlSheetName, 1677, 5));
			Thread.sleep(2000);
			departmentTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys(excelReader.getCellData(xlSheetName, 1678, 5));
			Thread.sleep(3000);
			salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			Thread.sleep(2000);
			pvWarehouseTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();

			enter_AQ.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();

			enter_Rate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actBatchNo=select1stRow_19thColumn.getText();
			String expBatchNo=excelReader.getCellData(xlSheetName, 1678, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1678, 7, actBatchNo);

			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			Thread.sleep(2000);
			pvWarehouseTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
			select2ndRow_8thColumn.click();

			enter_AQ.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
			select2ndRow_14thColumn.click();

			enter_Rate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
			String actBatchNo2=select2ndRow_19thColumn.getText();
			String expBatchNo2=excelReader.getCellData(xlSheetName, 1679, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1679, 7, actBatchNo2);


			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();Thread.sleep(2000);click(billRefNewReferenceTxt);

			Thread.sleep(2999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();

			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			Thread.sleep(8000);

			HashSet<String> actMessage = new HashSet<String>();
			HashSet<String> expMessage = new HashSet<String>();

			if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
			{
				for (int i = 0; i < 4; i++) 
				{
					String data = checkValidationMessage("");
					actMessage.add(data);
				}

				expMessage.add("This Transaction will make the Stock Negative");
				expMessage.add("Saving in background.");
				expMessage.add("This Transaction will make the Stock Negative");
				expMessage.add("Voucher saved successfully : 1");
			}
			else
			{
				for (int i = 0; i < 2; i++) 
				{
					String data = checkValidationMessage("");
					actMessage.add(data);
				}

				expMessage.add("Voucher saved successfully : 1");
				expMessage.add("Saving in background.");
			}

			System.out.println("Actual Message    : "+actMessage);
			System.out.println("Expected Message  : "+expMessage);
			
			
			
			
			String actMessage;
			
			HashSet<String> expMsg = new HashSet<String>();

				Thread.sleep(2000);

			if (errorMessage.getText().equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1679, 5))) 
			{
				actMessage = SavingInBackgroundTrial();

				expMsg.add(excelReader.getCellData(xlSheetName, 1680, 6));
				//expMsg.add(excelReader.getCellData(xlSheetName, 1681, 6));
				expMsg.add(excelReader.getCellData(xlSheetName, 1682, 6));
				expMsg.add(excelReader.getCellData(xlSheetName, 1683, 6));
				excelReader.setCellData(xlfile, xlSheetName, 1680, 7, actMessage);
			}
			else
			{
				actMessage = SavingInBackgroundTrial();

				//expMsg.add(excelReader.getCellData(xlSheetName, 1681, 6));
				expMsg.add(excelReader.getCellData(xlSheetName, 1683, 6));
				excelReader.setCellData(xlfile, xlSheetName, 1680, 7, actMessage);
			}

			String expMessage = expMsg.toString();
			
			System.out.println("Actual Message    : "+actMessage);
			System.out.println("Expected Message  : "+expMessage);
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
			System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
			
			
			
			
			 String actMessage =SavingInBackgroundTrial();

	         HashSet<String> expMsg = new HashSet(); 

	         expMsg.add(excelReader.getCellData(xlSheetName, 1680, 6));
	         //expMsg.add(excelReader.getCellData(xlSheetName, 139, 6));
	         //expMsg.add(excelReader.getCellData(xlSheetName, 1682, 6));
	         expMsg.add(excelReader.getCellData(xlSheetName, 1683, 6));  
	         String expMessage = expMsg.toString(); 
	         
	         excelReader.setCellData(xlfile, xlSheetName, 1680, 7, actMessage);

			System.out.println("Actual Message    : "+actMessage);
			System.out.println("Expected Message  : "+expMessage);

			System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);
			System.out.println("2nd Row Batch No : "+actBatchNo2 +"  value expected  "+expBatchNo2);

			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actBatchNo2.equalsIgnoreCase(expBatchNo2)
					&& actBatchNo.equalsIgnoreCase(expBatchNo)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1677, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1677, 8, resFail);
				return false;
			}
		}

		else
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1677, 8, resFail);
			return false;
		}
	}*/


	
	
	public boolean checksavingPVVATAndSavingSalesOrder() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException, AWTException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		getDriver().navigate().refresh();

		Thread.sleep(2000);
		
		String act  =Boolean.toString(checkSavingSalOrdVou1AfterAuthorisation());
		String exp  =excelReader.getCellData(xlSheetName, 1684, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1684, 7, act);
		
		System.err.println("act value       :"+act);
		System.err.println("exp value       :"+exp);

		//Method executes erase and Saving Pv and sao Ord 1

		if (act.equalsIgnoreCase(exp))
		{
			excelReader.setCellData(xlfile, xlSheetName, 1684, 8, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1684, 8, resFail);
			return false;
		}
	}
	
	
	
	
	


	public boolean checkAuthorisationStatusOfSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
		String expAuthorizationStatus = "Pending";

		System.out.println(" AuthorizationStatus : "+actAuthorizationStatus +" VAlue Exp :"+expAuthorizationStatus);

		if (actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			logoutOption.click();

			return true;
		}
		else 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			logoutOption.click();
			
			return false;
		}
	}


	
	

	public boolean checkSavingSalesOrderVopucher2() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		

		System.out.println("*****************checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox******************");

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1730, 5)))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1731, 5)))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1732, 5)))
			{
				itemListCount.get(i).click();

				break;
			}
		}

		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(excelReader.getCellData(xlSheetName, 1733, 5));
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		if (errorMessage.getText().isEmpty()==false) 
        {
                checkValidationMessage("This transaction will make stock negative.");
        }

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");
		String expQtyInVoucher=excelReader.getCellData(xlSheetName, 1730, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1730, 7, actQtyInVoucher);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(excelReader.getCellData(xlSheetName, 1734, 5));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 1731, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1731, 7, actItemName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader=excelReader.getCellData(xlSheetName, 1732, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1732, 7, actTotalQuantityInHeader);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity=excelReader.getCellData(xlSheetName, 1733, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1733, 7, actAdjustQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance=excelReader.getCellData(xlSheetName, 1734, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1734, 7, actBalance);

		String actBatchPopupTable = Boolean.toString(batchPopupTable.getText().isEmpty());
		String expBatchPopupTable = excelReader.getCellData(xlSheetName, 1735, 6); 
		excelReader.setCellData(xlfile, xlSheetName, 1735, 7, actBatchPopupTable);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = excelReader.getCellData(xlSheetName, 1736, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1736, 7, actTotalQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = excelReader.getCellData(xlSheetName, 1737, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1737, 7, actTotalQuantityAdjusted);

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		Thread.sleep(2000);
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();



		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);


		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected

		boolean expstockReservationLabel			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1738, 6));
		boolean expres_LeftPanelWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1739, 6));
		boolean expres_LeftPanelItemCode			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1740, 6));
		boolean expres_LeftPanelItemName			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1741, 6));
		boolean expres_LeftPanelItemQty				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1742, 6));
		boolean expres_LeftPanelDueDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1743, 6));
		boolean expres_LeftPanelBaseUnit			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1744, 6));
		boolean expres_PickBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1745, 6));
		boolean expres_DiscardBtn					=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1746, 6));
		boolean expres_OkBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1747, 6));
		boolean expres_CloseBtn						=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1748, 6));

		boolean expbatchRes_BodyQtyToReserve		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1749, 6));
		boolean expbatchRes_BodyBatchNo				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1750, 6));
		boolean expbatchRes_BodyWareHouse			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1751, 6));
		boolean	expbatchRes_BodyAvailableQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1752, 6));
		boolean expbatchRes_BodyRelesaseQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1753, 6));
		boolean expbatchRes_BodyCurOrdResQty		=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1754, 6));
		boolean expbatchRes_BodyMfgDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1755, 6));
		boolean expbatchRes_BodyExpDate				=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1756, 6));
		boolean expbatchRes_BodyBatchQty			=Boolean.parseBoolean(excelReader.getCellData(xlSheetName, 1757, 6));

		
		excelReader.setCellData(xlfile, xlSheetName, 1738, 7, Boolean.toString(actstockReservationLabel));
		excelReader.setCellData(xlfile, xlSheetName, 1739, 7, Boolean.toString(actres_LeftPanelWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1740, 7, Boolean.toString(actres_LeftPanelItemCode));
		excelReader.setCellData(xlfile, xlSheetName, 1741, 7, Boolean.toString(actres_LeftPanelItemName));
		excelReader.setCellData(xlfile, xlSheetName, 1742, 7, Boolean.toString(actres_LeftPanelItemQty));
		excelReader.setCellData(xlfile, xlSheetName, 1743, 7, Boolean.toString(actres_LeftPanelDueDate));
		excelReader.setCellData(xlfile, xlSheetName, 1744, 7, Boolean.toString(actres_LeftPanelBaseUnit));
		excelReader.setCellData(xlfile, xlSheetName, 1745, 7, Boolean.toString(actres_PickBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1746, 7, Boolean.toString(actres_DiscardBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1747, 7, Boolean.toString(actres_OkBtn));
		excelReader.setCellData(xlfile, xlSheetName, 1748, 7, Boolean.toString(actres_CloseBtn));
		
		excelReader.setCellData(xlfile, xlSheetName, 1749, 7, Boolean.toString(actbatchRes_BodyQtyToReserve));
		excelReader.setCellData(xlfile, xlSheetName, 1750, 7, Boolean.toString(actbatchRes_BodyBatchNo));
		excelReader.setCellData(xlfile, xlSheetName, 1751, 7, Boolean.toString(actbatchRes_BodyWareHouse));
		excelReader.setCellData(xlfile, xlSheetName, 1752, 7, Boolean.toString(actbatchRes_BodyAvailableQty));
		excelReader.setCellData(xlfile, xlSheetName, 1753, 7, Boolean.toString(actbatchRes_BodyRelesaseQty));
		excelReader.setCellData(xlfile, xlSheetName, 1754, 7, Boolean.toString(actbatchRes_BodyCurOrdResQty));
		excelReader.setCellData(xlfile, xlSheetName, 1755, 7, Boolean.toString(actbatchRes_BodyMfgDate));
		excelReader.setCellData(xlfile, xlSheetName, 1756, 7, Boolean.toString(actbatchRes_BodyExpDate));
		excelReader.setCellData(xlfile, xlSheetName, 1757, 7, Boolean.toString(actbatchRes_BodyBatchQty));
		

		String expTextres_LeftPanelWareHouseRow1	=excelReader.getCellData(xlSheetName, 1758, 6);
		String expTextres_LeftPanelItemCodeRow1		=excelReader.getCellData(xlSheetName, 1759, 6);
		String expTextres_LeftPanelItemNameRow1		=excelReader.getCellData(xlSheetName, 1760, 6);
		String expTextres_LeftPanelItemQtyRow1		=excelReader.getCellData(xlSheetName, 1761, 6);
		String expTextres_LeftPanelBaseUnitRow1		=excelReader.getCellData(xlSheetName, 1762, 6);


		String expbatchRes_QtyToReserveRow1			=excelReader.getCellData(xlSheetName, 1763, 6);
		String expbatchRes_BatchNoRow1				=excelReader.getCellData(xlSheetName, 1764, 6);
		String expbatchRes_WareHouseRow1			=excelReader.getCellData(xlSheetName, 1765, 6);
		String expbatchRes_AvailableQtyRow1			=excelReader.getCellData(xlSheetName, 1766, 6);
		String expbatchRes_RelesaseQtyRow1			=excelReader.getCellData(xlSheetName, 1767, 6);
		String expbatchRes_CurOrdResQtyRow1			=excelReader.getCellData(xlSheetName, 1768, 6);
		String expbatchRes_BatchQtyRow1				=excelReader.getCellData(xlSheetName, 1769, 6);
		
		

		excelReader.setCellData(xlfile, xlSheetName, 1758, 7, actTextres_LeftPanelWareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1759, 7, actTextres_LeftPanelItemCodeRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1760, 7, actTextres_LeftPanelItemNameRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1761, 7, actTextres_LeftPanelItemQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1762, 7, actTextres_LeftPanelBaseUnitRow1);
		
		excelReader.setCellData(xlfile, xlSheetName, 1763, 7, actbatchRes_QtyToReserveRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1764, 7, actbatchRes_BatchNoRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1765, 7, actbatchRes_WareHouseRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1766, 7, actbatchRes_AvailableQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1767, 7, actbatchRes_RelesaseQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1768, 7, actbatchRes_CurOrdResQtyRow1);
		excelReader.setCellData(xlfile, xlSheetName, 1769, 7, actbatchRes_BatchQtyRow1);

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);

       /* String actMessage;
		
		HashSet<String> expMsg = new HashSet<String>();

		Thread.sleep(2000);

		if (errorMessage.getText().equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1735, 5))) 
		{
			actMessage = SavingInBackgroundTrial();
			
			expMsg.add(excelReader.getCellData(xlSheetName, 1770, 6));
			//expMsg.add(excelReader.getCellData(xlSheetName, 1771, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1772, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1773, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1770, 7, actMessage);
		}
		else
		{
			actMessage = SavingInBackgroundTrial();

			//expMsg.add(excelReader.getCellData(xlSheetName, 1771, 6));
			expMsg.add(excelReader.getCellData(xlSheetName, 1773, 6));
			excelReader.setCellData(xlfile, xlSheetName, 1770, 7, actMessage);
		}

		String expMessage = expMsg.toString();

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().isEmpty()==false) 
        {
                checkValidationMessage("This transaction will make stock negative.");
        }
		
		String expMessage1= excelReader.getCellData(xlSheetName, 1772, 6);
		String expMessage2= excelReader.getCellData(xlSheetName, 1773, 6);
		
		String actMessage = checkValidationMessage(expMessage1);
		excelReader.setCellData(xlfile, xlSheetName, 1770, 7, actMessage);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)


				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)  && 


				actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable.equalsIgnoreCase(expBatchPopupTable) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)

				)

		{
			System.out.println(" Test Pass: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1730, 8, resPass);

			return true;
		}
		else
		{
			System.out.println(" Test Fail: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1730, 8, resFail);
			return false;
		}
	
		
		/*if (checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox()==true)
		{
			return  true;
		} 
		else 
		{
			return false;
		}*/
	}
	
	
	
	
	

	public boolean checkLoginToUserForAuthorisationINSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		logoutOption.click();

		Thread.sleep(3000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt=excelReader.getCellData(xlSheetName, 1774, 5);

		String pawslt=excelReader.getCellData(xlSheetName, 1775, 5);

		boolean qflag=true;

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);
		
		String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}


		Thread.sleep(2000);


		/*String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}*/

		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(4999);

		int voucherGridDocNoCount = voucherGridDocNo.size();

		String actSavedVouchersCount = Integer.toString(voucherGridDocNoCount-1);
		String expSavedVouchersCount = excelReader.getCellData(xlSheetName, 1774, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1774, 7, actSavedVouchersCount);


		String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
		String expAuthorizationStatus = excelReader.getCellData(xlSheetName, 1775, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1775, 7, actAuthorizationStatus);

		Thread.sleep(2000);
		
		click(homePageVoucherArrowBtn);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
		pendingAuthorizationPurchases.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
		voucherHomeRow1ChkBox.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
		authorizeBtn.click();

		Thread.sleep(2000);
		
		click(homePageVoucherArrowBtn);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
		pendingAuthorizationPurchases.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
		voucherHomeRow1ChkBox.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
		authorizeBtn.click();


		System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndConditionsNotRequiredOption  *********************************");

		System.out.println("SavedVouchersCount        : "+actSavedVouchersCount        +" Value Expected : "+expSavedVouchersCount);
		System.out.println("AuthorizationStatus       : "+actAuthorizationStatus       +" Value Expected : "+expAuthorizationStatus);


		if(actSavedVouchersCount.equalsIgnoreCase(expSavedVouchersCount) && actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus))
		{
			System.out.println("Test Pass : Authorized Succesfully");
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1774, 8, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Authorized Succesfully");
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1774, 8, resFail);

			return false;
		}

	}






	public boolean checkAuthorisedVoucherInSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		logoutOption.click();

		Thread.sleep(2000);
		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt=excelReader.getCellData(xlSheetName, 1776, 5);

		String pawslt=excelReader.getCellData(xlSheetName, 1777, 5);

		boolean qflag=true;

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);


		/*String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}*/

		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(5000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(4999);

		int voucherGridDocNoCount = voucherGridDocNo.size();

		String actSavedVouchersCount = Integer.toString(voucherGridDocNoCount-1);
		String expSavedVouchersCount = excelReader.getCellData(xlSheetName, 1776, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1776, 7, actSavedVouchersCount);


		String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
		String expAuthorizationStatus = excelReader.getCellData(xlSheetName, 1777, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1777, 7, actAuthorizationStatus);


		System.out.println("AuthorizationStatus : "+actAuthorizationStatus +" Value Exp : "+expAuthorizationStatus);

		String actAuthorizationStatus2 = voucherGridRow2AuthorizationStatus.getText();
		String expAuthorizationStatus2 = excelReader.getCellData(xlSheetName, 1778, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1778, 7, actAuthorizationStatus2);

		System.out.println("AuthorizationStatus1 : "+actAuthorizationStatus2 +" Value Exp : "+expAuthorizationStatus2);

		if (actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus) && 
				actAuthorizationStatus2.equalsIgnoreCase(expAuthorizationStatus2))
		{
			excelReader.setCellData(xlfile, xlSheetName, 1776, 8, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1776, 8, resFail);
			return false;
		}	
	}
	
	
	public boolean checkSavingSalesInvoiceVATWihLoadingLinks2() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);
		/*click(pendingSalesOrder);
		Thread.sleep(2000);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();*/

		Thread.sleep(1500);
		int workFlowVoucherNoListCount=workFlowVoucherNoList.size();
		ArrayList<String >workFlowVoucherNoListarray=new ArrayList<>();
		for (int i = 0; i < workFlowVoucherNoListCount; i++) 
		{
			String data=workFlowVoucherNoList.get(i).getText();
			workFlowVoucherNoListarray.add(data);

		}

		String actworkFlowVoucherNoList=workFlowVoucherNoListarray.toString();
		String expworkFlowVoucherNoList="[SalOrd:2]";

		System.out.println(" workFlowVoucherNoList : "+actworkFlowVoucherNoList +" Value Exp : "+expworkFlowVoucherNoList);

		if (actworkFlowVoucherNoList.equalsIgnoreCase(expworkFlowVoucherNoList))
		{
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
			workFlowHeaderChkBoxCL.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.sendKeys("DUBAI");
			Thread.sleep(2000);
			departmentTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			Thread.sleep(3000);
			salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			Thread.sleep(2000);
			pvWarehouseTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();

			enter_AQ.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();

			enter_Rate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actBatchNo=select1stRow_19thColumn.getText();
			String expBatchNo="BATCHAUTHORISE";

			/*Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			Thread.sleep(2000);
			pvWarehouseTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
			select2ndRow_8thColumn.click();

			enter_AQ.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
			select2ndRow_14thColumn.click();

			enter_Rate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
			String actBatchNo2=select2ndRow_19thColumn.getText();
			String expBatchNo2="BATCHAUTHORISE";*/


			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();

			Thread.sleep(2000);
			
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();

			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();

			/*HashSet<String> actMessage = new HashSet<String>();
			HashSet<String> expMessage = new HashSet<String>();

			if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
			{
				for (int i = 0; i < 4; i++) 
				{
					String data = checkValidationMessage("");
					actMessage.add(data);
				}

				expMessage.add("This Transaction will make the Stock Negative");
				expMessage.add("Saving in background.");
				expMessage.add("This Transaction will make the Stock Negative");
				expMessage.add("Voucher saved successfully : 1");
			}
			else
			{
				for (int i = 0; i < 2; i++) 
				{
					String data = checkValidationMessage("");
					actMessage.add(data);
				}

				expMessage.add("Voucher saved successfully : 1");
				expMessage.add("Saving in background.");
			}

			System.out.println("Actual Message    : "+actMessage);
			System.out.println("Expected Message  : "+expMessage);*/
			
			if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
			{
				errorMessageCloseBtn.click();
				}
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);

			System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);	

			System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);
			/*System.out.println("2nd Row Batch No : "+actBatchNo2 +" value expected  "+expBatchNo2); */
		
		
			/*boolean actVoucherBodyText  =voucherBodyGrid.getText().isEmpty();
			//boolean actVoucherBody=voucherBodyGrid.getText().isEmpty();
			boolean expVoucherBodyText=true;
			
			//boolean actVoucherBody = false;
			System.err.println("actVoucherBodyText    :" +actVoucherBodyText);
			System.err.println("expVoucherBodyText    :" +expVoucherBodyText);
			
			if (actVoucherBodyText==expVoucherBodyText) {
				
				
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				 voucherhomeCloseBtn.click();
				 return true;
				
			}
			
			else
			{
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				return false;
			}
			
			
			
			if (voucherBodyGrid.getText().isEmpty() || voucherBodyGrid.equalsIgnoreCase("") || voucherBodyGrid.equalsIgnoreCase(" ")) {
				
				 actVoucherBody=true;
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				 voucherhomeCloseBtn.click();
				 return true;
				
			}
			
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				return false;
			}*/
			
		

			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)
					&& actBatchNo.equalsIgnoreCase(expBatchNo)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				return false;
			}
		}

		else
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;  
			
		}
	}
	
	
	
	

	public boolean checksavingsalesInvoiceVATAfterTwoVouchersAuthorised() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		String act   =Boolean.toString(checkSavingSalesInvoiceVATWihLoadingLinks2());
		String exp   =excelReader.getCellData(xlSheetName, 1779, 6);  
		excelReader.setCellData(xlfile, xlSheetName, 1779, 7, act);
		
		System.err.println("actual value       :"+act);
		System.err.println("expected value     :"+exp);

		if (act.equalsIgnoreCase(exp)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1779, 8, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1779, 8, resFail);
			return false;
		}
	}

	
	
	
	
	

	public boolean checkSavingPVVatAndSO() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException, AWTException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);

		String delete=Boolean.toString(checkEraseAllDATA());
		
		String expdelete=excelReader.getCellData(xlSheetName, 1780, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1780, 7, delete);

		System.err.println(" DELETE  "+delete +" Value   :"+expdelete);

		Thread.sleep(2000);

		String savingPurchase=Boolean.toString(checkSavingPurchaseVoucherVATWithCurrentdate());
		String expsavingPurchase=excelReader.getCellData(xlSheetName, 1781, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1781, 7, savingPurchase);

		System.err.println(" savingPurchase  "+savingPurchase +" Value   :"+expsavingPurchase);

		Thread.sleep(2000);
		
		/*String manual=Boolean.toString(checkSalesOrderInReservationTypeIsManual2());
		String expManual=excelReader.getCellData(xlSheetName, 1782, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1782, 7, manual);

		System.err.println(" manual  "+manual +" Value   :"+expManual);

		Thread.sleep(2000);

		String saving=Boolean.toString(checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox());
		String expSaving=excelReader.getCellData(xlSheetName, 1783, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1783, 7, saving);

		System.err.println(" saving  "+saving +" Value   :"+expSaving);*/

		Thread.sleep(2000);

		if (/*saving.equalsIgnoreCase(expSaving) && */delete.equalsIgnoreCase(expdelete) && savingPurchase.equalsIgnoreCase(expsavingPurchase) 
				/*&& manual.equalsIgnoreCase(expManual)delete==expdelete && savingPurchase==expsavingPurchase*/)
		{
			excelReader.setCellData(xlfile, xlSheetName, 1780, 8, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1780, 8, resFail);
			return false;
		}
	}
	
	
	
	
	



	public boolean checkLoginToUserallOptionsForAuthoriseSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		logoutOption.click();
		
		
		Thread.sleep(3000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt=excelReader.getCellData(xlSheetName, 1829, 5);

		String pawslt=excelReader.getCellData(xlSheetName, 1830, 5);

		//boolean qflag=true;

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);
		
		String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}


		Thread.sleep(2000);

		/*String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}*/

		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(4999);

		int voucherGridDocNoCount = voucherGridDocNo.size();

		String actSavedVouchersCount = Integer.toString(voucherGridDocNoCount-1);
		String expSavedVouchersCount = excelReader.getCellData(xlSheetName, 1829, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1829, 7, actSavedVouchersCount);
		
		System.err.println("actSavedVouchersCount     :"+actSavedVouchersCount);
		System.err.println("expSavedVouchersCount     :"+expSavedVouchersCount);


		String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
		String expAuthorizationStatus = excelReader.getCellData(xlSheetName, 1830, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1830, 7, actAuthorizationStatus);
		
		System.err.println("actAuthorizationStatus     :"+actAuthorizationStatus);
		System.err.println("expAuthorizationStatus     :"+expAuthorizationStatus);

		Thread.sleep(2000);
		
		click(homePageVoucherArrowBtn);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
		pendingAuthorizationPurchases.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
		voucherHomeRow1ChkBox.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
		authorizeBtn.click();
		
		Thread.sleep(1000);

		System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndConditionsNotRequiredOption  *********************************");

		System.out.println("SavedVouchersCount        : "+actSavedVouchersCount        +" Value Expected : "+expSavedVouchersCount);
		System.out.println("AuthorizationStatus       : "+actAuthorizationStatus       +" Value Expected : "+expAuthorizationStatus);

		if(actSavedVouchersCount.equalsIgnoreCase(expSavedVouchersCount) && actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus))
		{
			System.out.println("Test Pass : Authorized Succesfully");
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1829, 8, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Authorized Succesfully");
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1829, 8, resFail);

			return false;
		}
	}


	
	
	
	
	public boolean checkSavingVou2AfterAuthorisationInsalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		logoutOption.click();

		Thread.sleep(3000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt=excelReader.getCellData(xlSheetName, 1831, 5);

		String pawslt=excelReader.getCellData(xlSheetName, 1832, 5);

		//boolean qflag=true;

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);


		/*String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}

		}*/

		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(5000);

		String saving=Boolean.toString(checkSavingSalesOrdervoucher2AfterConsumedBatchInVoucher1());
		String expSaving=excelReader.getCellData(xlSheetName, 1831, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1831, 7, saving);
		
		Thread.sleep(2000);

		System.out.println(" SAVING VOUCHER : "+saving +" Value Exp: "+expSaving);

		if (saving.equalsIgnoreCase(expSaving))
		{
			excelReader.setCellData(xlfile, xlSheetName, 1831, 8, resPass);
			return true; 
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1831, 8, resFail);
			return false;
		}
	}
	
	
	
	
	
	

	public boolean checkChangingItemAndBatchAndWareHouseInConsumedPVVAT() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		Thread.sleep(2000);
		
		String item=Boolean.toString(checkSavingPurchaseVoucherVATWithChangingItemAfterBatchConsumed());
		String expItem=excelReader.getCellData(xlSheetName, 1833, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1833, 7, item);

		System.err.println(" Changing ITEM : "+item +" Value Exp: "+expItem);

		Thread.sleep(2000);
		
		String batch=Boolean.toString(checkChangingBatchInPurchaseVoucherVATAfterAfterBatchConsumed());
		String expbatch=excelReader.getCellData(xlSheetName, 1834, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1834, 7, batch);

		System.err.println(" Changing BATCH : "+batch +" Value Exp: "+expbatch);

		Thread.sleep(2000);
		
		String warehouse=Boolean.toString(checkChangingBatchInPurchaseVoucherVATAfterAfterBatchConsumed());
		String expWarehouse=excelReader.getCellData(xlSheetName, 1835, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1835, 7, warehouse);

		System.err.println(" Changing WAREHOUSE : "+warehouse +" Value Exp: "+expWarehouse);

		if (warehouse.equalsIgnoreCase(expWarehouse) && batch.equalsIgnoreCase(expbatch) && item.equalsIgnoreCase(expItem)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1833, 8, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1833, 8, resFail);
			return false;
		}
	}
	
	
	public boolean checkLogout()
			throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(2000);

		System.out.println("Logout  Successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		boolean actUserName = username.isDisplayed();
		boolean expUserName = true;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		boolean actPassword = password.isDisplayed();
		boolean expPassword = true;

		System.out.println("*************************CheckLogout***************************");

		System.out.println("UserName is Displaying : " + actUserName + "  Value Expected  " + expUserName);
		System.out.println("Password is Displaying : " + actPassword + "  Value Expected  " + expPassword);

		if (actUserName == expUserName && actPassword == expPassword) {
			return true;
		} else {
			return false;
		}
	}






	public BatchNegativeTestingOptionsPage(WebDriver driver)
	{
		PageFactory.initElements(driver, this);
	}
	
	
	
	// BATCH NEGATIVE ELEMENTS
	
	// Elements 

			@FindBy(xpath="//*[@id='txtUsername']")
			public static WebElement username;

			@FindBy(id="txtPassword")
			public static WebElement password;

			@FindBy(id="ddlCompany")
			public static WebElement companyDropDownList;

			@FindBy(id="btnSignin")
			public static WebElement signIn;

			@FindBy(xpath="//i[@title='Create Company']")
			public static WebElement companyCreateBtn;		

			@FindBy(xpath="//i[@title='Keyboard ']")
			public static WebElement keyboardBtn;

			@FindBy(xpath="//i[@title='Refresh']")
			public static WebElement refreshBtn;

			@FindBy(xpath="//input[@id='chkRememberMe']/following-sibling::span")
			public static WebElement rememberMeChk;

			@FindBy(xpath="//input[@id='chkRememberPwd']/following-sibling::span")
			public static WebElement rememberPwdChk;

			@FindBy(id="frgtPwd")
			public static WebElement frgtPwdLnk;

			@FindBy(xpath="//span[contains(@class,'icon-ok icon-font6')]")
			public static WebElement okButtonInCreateCompany;

			@FindBy(xpath="//span[contains(@class,'icon-close icon-font6')]")
			public static WebElement cancelButtonInCreateCompany;

			@FindBy(xpath="//div[@id='Layout_Popup']//input[2]")
			public static WebElement noIn;

			@FindBy(linkText="Create Company")
			public static WebElement createCompanyScreen;

			@FindBy(xpath="//*[@id='errmsgDiv']")
			public static WebElement mandatoryMsgs;

			//Fields of Company su Home Page
			@FindBy(xpath="//*[@id='companyLogo']/parent::a/following-sibling::ul/li[1]")
			public static WebElement companyName;

			@FindBy(xpath="//*[@id='mainHeader_MainLayout']/a/img")
			public static WebElement focusLogo;

			@FindBy(xpath="//*[@id='id_focus8_wrapper_default']/aside/section")
			public static WebElement menuBar;

			@FindBy(xpath="//*[@id='dashName']")
			public static WebElement dashboardName;

			@FindBy(xpath="//*[@id='dashIcons']")
			public static WebElement dashboardIcons;

			@FindBy(xpath="(//li[@class='nav-item pt-md-2']/a)[2]")      //div[@id='id_mainlayoutmenu']/ul[2]/li[7]/a  with pronghron
			public static WebElement userNameDisplay;

			@FindBy(xpath="//div[@class='adminprofile']") 
			public static WebElement userNameDisplayLogo;
			
			@FindBy(xpath = "//*[@id='idGlobalError']/div/div[2]")
			public static List<WebElement> errorMessageList;
			
			@FindBy(xpath = "//*[@id='idGlobalError']/div/div/button")
			public static List<WebElement> errorMessageCloseBtnList;

			/*@FindBy(xpath="//*[@id='mainHeader_MainLayout']/nav/div/ul/li[7]/a/span")
				public static WebElement userNameDisplay;*/

			//div[@id='id_mainlayoutmenu']/ul[2]/li[7]
			@FindBy(xpath="//*[@id='companyLogo']")
			public static WebElement companyLogo;

			@FindBy(xpath="//*[@id='id_user_profile_icons']/li[1]/a")    //div[@id='id_mainlayoutmenu']/ul[2]/li[6]//ul/li[1]
			public static WebElement changePassword; 

			@FindBy(xpath="//*[@id='id_languageoptions']")
			public static WebElement languageDropdownInLogout;

			@FindBy(xpath="//a[contains(text(),'Logout')]")
			public static WebElement logoutOption;

			/*@FindBy(xpath="//*[@id='dashName']")
			public static WebElement dashboard;*/
			
			@FindBy(xpath="//a[text()='Dashboard']")
			public static WebElement dashboard;

			@FindBy(xpath="//ul[@id='ulCompanyDetails_HomePage']")
			public static WebElement companydetails;

			//Dash board Page
			@FindBy(xpath="//*[@id='Dashboard_ddlList']//a")
			public static WebElement labelDashboard ;

			@FindBy(xpath="//*[@id='Select_dash']")
			public static WebElement selectDashboard ;

			@FindBy(xpath="//*[@id='Dashboard_AddDash']")
			public static WebElement newAddDashBoard;

			@FindBy(xpath="//*[@id='Dashboard_Dash_Config']")
			public static WebElement dashboardCustomizationSettings;

			
			@FindBy(xpath="//div[@id='login_div']/div[1]//ul/li[5]//i")
			public static WebElement  loginPageSecurityProtectedCompanyBtn;

			@FindBy(xpath="//input[@id='donotshow']")
			public static WebElement doNotShowCheckbox;

			@FindBy(xpath="//span[@class='pull-right']")
			public static WebElement closeBtnInDemoPopupScreen;

			//Financial Menu
			@FindBy (xpath="//span[@class='icon-financial icon-font1']")
			public static WebElement financialMenu;

			//Fixed Assets Menu
			@FindBy (xpath="//span[@class='icon-assets icon-font1']")
			public static WebElement fixedAssetsMenu;

			//Production Menu
			@FindBy (xpath="//span[@class='icon-production icon-font1']")
			public static WebElement productionMenu;

			//Point Of Sale Menu
			@FindBy (xpath="//div[contains(text(),'Point of Sale')]")
			public static WebElement pointOfSaleMenu;

			//Quality Of Control Menu
			@FindBy (xpath="//span[@class='icon-quotationanalysis icon-font1']")
			public static WebElement qualityControlMenu;

			//Settings Menu
			@FindBy (xpath="//span[@class='icon-settings icon-font1']")
			public static WebElement SettingsMenu;

			//Inventory Menu and Sub Menus		
			@FindBy(xpath="//*[@id='135']")
			public static WebElement  inventoryMenu; 

			@FindBy(xpath = "//div[@id='id_left_mainmenu']/ul/li/a")
			public static List<WebElement> menusList;

			@FindBy(xpath = "//*[@id='mainHeader_MainLayout']/nav/div/ul/li")
			public static List<WebElement> navbarList;

			@FindBy (xpath="//a[@id='dropdown03']")
			public static WebElement aboutQuickAcessMenu;

			@FindBy (xpath="//input[@id='id_ai_search_input']")
			public static WebElement aiSearchTextBox;

			@FindBy (xpath="(//div[@id='mainHeader_MainLayout']//div/input)[3]")
			public static WebElement searchTxtBox;

			@FindBy (xpath="//div[@id='id_mainlayoutmenu']/ul[2]/li[1]/a")
			public static WebElement productTour;

			@FindBy (xpath="//div[@id='id_mainlayoutmenu']/ul[2]/li[3]/a")
			public static WebElement alertsOptions;

			@FindBy (xpath="//div[@id='id_mainlayoutmenu']/ul[2]/li[2]/a")
			public static WebElement recentMenus;




			// AccountsPage

			@FindBy (xpath="//a[@id='1']")
			public static WebElement homeMenu;

			//Masters Menu	
			@FindBy (xpath="//a[@id='1000'][contains(text(),'Masters')]")
			public static WebElement mastersMenu;

			//Accounts 
			@FindBy (xpath="//a[@id='1104']//span[contains(text(),'Account')]")
			public static WebElement accounts;


			//Master Main Header Fields		
			@FindBy(xpath="//a[@id='btnNew']/i")
			public static WebElement masterNewBtn;

			@FindBy(xpath="//a[@id='btnAddGroup']/i")
			public static WebElement masterAddGroupBtn; 

			@FindBy(xpath="//a[@id='btnMasterEdit']/i")
			public static WebElement masterEditBtn; 

			@FindBy(xpath="//a[@id='btnClone']/i")
			public static WebElement masterCloneBtn; 

			@FindBy(xpath="//a[@id='btnProperties']/i")
			public static WebElement masterPropertiesBtn; 

			@FindBy(xpath="//a[@id='btnDelete']/i")
			public static WebElement masterDeleteBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-group']")
			public static WebElement masterGroupBtn; 

			@FindBy(xpath="//*[@id='toggle_ribbon']")
			public static WebElement masterRibbonToExpandOptions; 

			@FindBy(xpath="//i[@class='icon-font6 icon-delete-all']")
			public static WebElement masterDeleteAllBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-closed-account']")
			public static WebElement masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity; 

			@FindBy(xpath="//i[@class='icon-font6 icon-open-close-account']")
			public static WebElement masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState; 

			@FindBy(xpath="//i[@class='icon-font6 icon-import']")
			public static WebElement masterAdvanceMasterImportORExportBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-info']")
			public static WebElement masterAuthorInfoBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-up-arrow']")
			public static WebElement masterMoveUpBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-down-arrow']")
			public static WebElement masterMoveDownBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-sort']")
			public static WebElement masterSortBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-mass-update']")
			public static WebElement masterMassUpdateBtn; 

			@FindBy(xpath="//a[@class='lSNext']")
			public static WebElement masterRibbonControlNextBtn; 

			@FindBy(xpath="//*[@id='btnXMLImport']")
			public static WebElement masterImportFromXmlBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-xmlexport']")
			public static WebElement masterExportFormatToXmlBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-custamize']")
			public static WebElement masterCustamizemasterBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-options']")
			public static WebElement masterCustamizeViewBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-tree']")
			public static WebElement mastercustamizeTreeBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-stock-ledger']")
			public static WebElement masterLedgerBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-financial-1']")
			public static WebElement masterManageCreditBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-department-appropriation']")
			public static WebElement masterDepartmentAppropriationBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-budget']")
			public static WebElement masterBudgetBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-backtrack']")
			public static WebElement masterBackTrackBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-transfer']")
			public static WebElement masterTranferBtn; 

			@FindBy(xpath="//*[@id='btnNewSets']")
			public static WebElement masterNewSetBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-modifier']")
			public static WebElement masterModifierBtn; 

			@FindBy(xpath="//*[@id='btnSetType']")
			public static WebElement masterSetTypeBtn; 

			@FindBy(xpath="//i[@class='icon-convert icon-font6']")
			public static WebElement masterUnitConversionBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-alternate-product-1']")
			public static WebElement masterAlternateItemBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-related-product']")
			public static WebElement masterRelatedItemBtn; 

			@FindBy(xpath="//i[@class='icon-font6 icon-stock-ledger']")
			public static WebElement masterStockLedgerBtn; 



			@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[11]")
			public static List<WebElement> masterAccountsList;

			//New General Elements
			//Name
			
			//AccountType	
			@FindBy(xpath="//select[@id='iAccountType']")
			public static WebElement accountTypeDropdown;


			//CreditLimit
			@FindBy(xpath="//input[@id='fCreditLimit']")
			public static WebElement creditLimitTxt;

			//CreditDays
			@FindBy(xpath="//input[@id='iCreditDays']")
			public static WebElement creditdaysTxt;


			//ChequeDiscountLimit
			@FindBy(xpath="//input[@id='fChequeDiscountLimit']")
			public static WebElement chequeDiscountLimitTxt;


			//Rate Of Interest
			@FindBy(xpath="//input[@id='fRateofinterest']")
			public static WebElement rateofinterestTxt;


			//BankAccount
			@FindBy(xpath="//input[@id='iBankAc']")
			public static WebElement bankAccountTxt;

			@FindBy(xpath="//*[@id='iBankAc_input_image']/span")
			public static WebElement bankAccount_ExpansionBtn;

			@FindBy(xpath="//*[@id='iBankAc_input_settings']/span")
			public static WebElement bankAccount_SettingBtn;


			

			@FindBy(xpath="//div[@id='idGlobalError']")
			public static WebElement validationConfirmationMessage;



			@FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
			public static WebElement masterCloseBtn;


			@FindBy(xpath="//*[@id='LandingGridBody']/tr[1]/td[11]")
			public static WebElement accountCreation;



			@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/ol[1]/li[4]/span[1]")
			public static WebElement clickOnVendorGroup;

			@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[2]/form[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[1]/div[1]/input[1]")
			public static WebElement getVendorGroupName;

			@FindBy(xpath="//button[@class='btn-link theme_icon-color btnGenerateMasterclose closeMasterPartial clsMasterSaveClose']//i[@class='icon-font6 icon-close']")
			public static WebElement closeAccountCreationScreen;

			@FindBy(xpath="//input[@id='chkRetainSelection']")
			public static WebElement accountMasterRetain;

			@FindBy(xpath="//input[@id='liSelectAllMasters']")
			public static WebElement accountMasterSelect;

			@FindBy(xpath="(//label[@id='lblnchecked']/input)[1]")
			public static WebElement accountFirstCheckBox;

			@FindBy(xpath="(//label[@id='lblnchecked']/input)[2]")
			public static WebElement accountSecondCheckBox;

			@FindBy(xpath="//button[@class='btn-link theme_icon-color btnGenerateMasterclose closeMasterPartial clsMasterSaveClose']")
			public static WebElement closeAccMasterCreationScreen;


			@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/div[1]/ul[1]/li[2]/button[5]/i[1]")
			public static WebElement closeMaster;


			@FindBy(xpath="//div[@id='innerDivDeleteMasterModal']/div[2]/div[1]//label")
			public static WebElement getMsgOnDelete;

			@FindBy(xpath="//button[@id='btnOkForDelete']")
			public static WebElement clickOnOkInDelete;

			@FindBy(xpath="//button[@id='btnCancelForDelete']")
			public static WebElement clickOnCancelInDelete;

			
			@FindBy(xpath="//*[@id='LandingGridBody']/tr/td[8]//input")
			public static List<WebElement> masterGridBodyChkbox;

			@FindBy(xpath="//*[@id='LandingGridBody']/tr/td[11]")
			public static List<WebElement> masterGridBodyName;

			@FindBy (xpath="//span[@id='spnHeaderText']")
			public static WebElement accountsTitle;
			
			@FindBy (xpath="//input[@id='txtSearchMenu_MainLayout']")
			public static WebElement getSearch;
			
			// Restore

			@FindBy(xpath="//i[@class='icon-restore-1 icon-font4']")
			public static WebElement  loginPageRestoreBtn;

			//User Name and password in Credentials
			@FindBy(xpath="//*[@id='txtAdminUsername']")
			public static WebElement adminName;

			@FindBy(xpath="//*[@id='txtAdminPassword']")
			public static WebElement adminPassword;

			@FindBy(xpath="/html/body/section/div[8]/div/div/div[4]/button[1]")
			public static WebElement loginButton;

			@FindBy(xpath="/html/body/section/div[8]/div/div/div[4]/button[2]")
			public static WebElement cancelButton;

			//Restore Screen Options
			@FindBy(xpath="//div[contains(text(),'Restore Company')]")
			public static WebElement restoreCompanyBtnOfLoginPage;

			@FindBy(xpath="//input[@id='txtRestoreFile']")
			public static WebElement restoreInputTxt;

			@FindBy(xpath="//button[@class='btn Fbutton']")
			public static WebElement restoreBrowseBtn;

			



			// Item Page

			@FindBy(xpath="//*[@id='LandingGridBody']/tr/td[12]")
			public static List<WebElement> masterItemGridBodyName;

			@FindBy(xpath="//*[@id='iTreeId']")
			public static WebElement masterTreeIdDropdown; 

			@FindBy(xpath="//*[@id='spnhiererchy']/div/div[1]/div/div/button/span")
			public static WebElement masterTreeIDToggleBtn; 

			@FindBy(xpath="//*[@id='spnhiererchy']/div/div[1]/div/div/ul/li[1]/a")
			public static WebElement masterTreeIDToggle_CreateTreeBtn; 


			@FindBy(xpath="//*[@id='spnhiererchy']/div/div[1]/div/div/ul/li[2]")
			public static WebElement masterTreeIDToggle_EditBtn; 

			@FindBy(xpath="//*[@id='spnhiererchy']/div/div[1]/div/div/ul/li[3]")
			public static WebElement masterTreeIDToggle_DeleteBtn; 

			@FindBy(xpath="//*[@id='spnhiererchy']/div/div[1]/div/div/ul/li[4]")
			public static WebElement masterTreeIDToggle_setDefaultBtn;

			@FindBy(xpath="//*[@id='221']")
			public static WebElement  homeMasterItemMenu;

			@FindBy(xpath="//*[@id='1105']")
			public static WebElement  homeMasterItem_ItemMenu;



			// Units Test

			@FindBy (xpath="//a[@id='1114']")
			public static WebElement unitsMenu;

			@FindBy(xpath="//input[@id='iNoOfDecimals']")
			public static WebElement noOfDecimalsTxt;

			@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[10]")
			public static List<WebElement> masterItemUnitsList;


			// Currency Test

			@FindBy(xpath="//a[@id='220'][contains(text(),'Currency')]")
			public static WebElement currencyMenu;

			@FindBy(xpath="//span[contains(text(),'Currency Master')]")
			public static WebElement currencyMasterMenu;

			@FindBy(xpath="//a[@id='71']/span[contains(text(),'Exchange Rate')]")
			public static WebElement exchangeRateMenu;

			@FindBy(xpath="//span[contains(text(),'Exchange Rate History')]")
			public static WebElement exchangeRateHistoryMenu;

			@FindBy(xpath="//*[@id='btnSave']")
			public static WebElement saveIcon;

			@FindBy(xpath="//input[@id='CoinsName']")
			public static WebElement coinsNameTxt;

			@FindBy(xpath="//li[@id='btnClose']")
			public static WebElement currencyMasterCancelBtn;

			@FindBy(xpath="//*[@id='ISOCurrencyCode']")
			public static WebElement ISOCurrencyCodeTxt;




			// Exchange Rate and Exchange Rate History

			@FindBy(xpath="//*[@id='navbarSupportedContent2']//li[4]")
			public static WebElement exchangeRateDefinitionSaveIcon;

			@FindBy(xpath="//*[@id='navbarSupportedContent2']//li[2]")
			public static WebElement exchnageRateDeleteOption;

			@FindBy(xpath="//input[@id='id_option']")
			public static WebElement baseCurrencyInExchangeRateHistory;

			@FindBy(xpath="//input[@id='ShowData']")
			public static WebElement loadIcon;

			@FindBy(xpath="//*[@id='id_option_table_body']/tr/td[2]")
			public static List<WebElement> baseCurrencyListCount;


			@FindBy(xpath="//input[@id='id_option']")
			public static WebElement baseCurrencyTxt;

			@FindBy(xpath="//input[@id='EffectiveDate']")
			public static WebElement withEffectiveDateTxt;


			@FindBy(xpath="//input[@id='ExchangeTable_DefinedAs']")
			public static WebElement gridDefineAsTxt;

			@FindBy(xpath="//input[@id='ExchangeTable_Rate']")
			public static WebElement gridRateTxt;

			@FindBy(xpath="//input[@id='ExchangeTable_CurrencyName']")
			public static WebElement gridcurrencyName1Txt;

			@FindBy(xpath="//li[@id='closeExchangeRate']")
			public static WebElement exchangeRateDefinitionPageCloseIcon;

			@FindBy(xpath="//i[@class='icon-font6 icon-close']")
			public static WebElement exchangeRateHistoryCloseIcon;

			@FindBy(xpath="//tbody[@id='HistoryTableBody']/tr[2]/td[3]")
			public static WebElement valueUSD;

			@FindBy(xpath="//tbody[@id='HistoryTableBody']/tr[2]/td[4]")
			public static WebElement valueAED;

			@FindBy(xpath="//td[@id='ExchangeTable_col_1-2']")
			public static WebElement selCurrencyOne;

			@FindBy(xpath="//td[@id='ExchangeTable_col_2-2']")
			public static WebElement selCurrecnyTwo;

			@FindBy(xpath="//td[@id='ExchangeTable_col_1-3']")
			public static WebElement defCurrecnyOne;

			@FindBy(xpath="//td[@id='ExchangeTable_col_2-3']")
			public static WebElement defCurrecnyTwo;



			// Departments Test

			@FindBy (xpath="//a[@id='1106']//span[contains(text(),'Department')]")
			public static WebElement departmentMenu;

			@FindBy(xpath="//*[@id='LandingGridBody']/tr/td[10]")
			public static List<WebElement> masterDepartmentGridBodyName;


			// Bins Test

			@FindBy (xpath="//a[@id='1115']/span")
			public static WebElement binsMenu;

			@FindBy(xpath="//*[@id='navigation_menu']/li[1]/ul/li[4]/ul/li")
			public static List<WebElement> masterSubMenusList;

			@FindBy(xpath="//input[@id='iColNo']")
			public static WebElement binColNoTxt;

			@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[8]/div[1]/label/input")
			public static List<WebElement> masterItemUnitsChkboxList;


			// Unit Conversion Test

			@FindBy(xpath="//a[@id='72']/span")
			public static WebElement  homeMasterItem_UnitConversionMenu;

			@FindBy(xpath="//input[@id='optionBaseUnit']")
			public static WebElement unitConversionBaseUnitTxt;

			@FindBy(xpath="//input[@id='optionProduct']")
			public static WebElement unitConversionItemTxt;

			@FindBy(xpath="//td[@id='myTagsTable_col_1-2']")
			public static WebElement unitConversionTableRow1Col1;

			@FindBy(xpath="//td[@id='myTagsTable_col_1-3']")
			public static WebElement unitConversionTableRow1Col2;

			@FindBy(xpath="//td[@id='myTagsTable_col_1-4']")
			public static WebElement unitConversionTableRow1Col3;

			@FindBy(xpath="//td[@id='myTagsTable_col_1-5']")
			public static WebElement unitConversionTableRow1Col4;

			@FindBy(xpath="//td[@id='myTagsTable_col_1-6']")
			public static WebElement unitConversionTableRow1Col5;

			@FindBy(xpath="//input[@id='myTagsTable_UnitName']")
			public static WebElement unitConversion_EnterUnitNameTxt;

			@FindBy(xpath="//input[@id='myTagsTable_XFactor']")
			public static WebElement unitConversion_EnterXFactorTxt;

			@FindBy(xpath="//*[@id='ucCancel']/span")
			public static WebElement unitConversionCancelBtn;

			@FindBy(xpath="//*[@id='btnDeleteUnitConversion']/span")
			public static WebElement unitConversionDeleteBtn;
			
			
			// Configure Masters Test
			
			

			@FindBy(xpath="//*[@id='19']/span[text() = 'Configure Masters']")
			public static WebElement settingsConfigureMasters;

			@FindBy(xpath="//*[@id='navigation_menu']/li[8]/ul/li")
			public static List<WebElement> settingsSubMenusList;
			
			@FindBy(xpath="//div[@id='myNavbar']/ul/li/a")
			public static List<WebElement> configMastersRibbonControl;

			@FindBy(xpath="//*[@id='MasterTabs']/li[2]/a")
			public static WebElement customizationTab;

			@FindBy(xpath="//select[@id='ddlModule']")
			public static WebElement moduleDropdown;

			@FindBy(xpath="//input[@id='txtMasterName']")
			public static WebElement nameComboBox;

			@FindBy(xpath="//tbody[@id='txtMasterName_table_body']/tr/td[2]")
			public static List<WebElement> nameComboBoxList;

			@FindBy(xpath="//input[@id='txtMasterCaption']")
			public static WebElement captionTxt;

			@FindBy(xpath="//input[@id='rdoSearchByName_master']")
			public static WebElement searchByNameRadioBtn;

			@FindBy(xpath="//input[@id='rdoSearchByCode_master']")
			public static WebElement searchByCodeRadioBtn;

			@FindBy(xpath="//input[@id='chkAllowRivisions']")
			public static WebElement allowReservationChkBox;

			@FindBy(xpath="//*[@id='chkIsDefault']")
			public static WebElement defaultChkBox;

			@FindBy(xpath="//input[@id='chkGroupMandatory']")
			public static WebElement groupMandatoryChkBox;

			@FindBy(xpath="//input[@id='chkPickCode']")
			public static WebElement pickCodeChkBox;

			@FindBy(xpath="//*[@id='divDependency_Master']/table/thead/tr/td")
			public static List<WebElement> showDependencyHeader;

			@FindBy(xpath="//a[contains(text(),'Dependent')]")
			public static WebElement dependentTab;

			@FindBy(xpath="//a[contains(text(),'Used')]")
			public static WebElement usedTab;

			@FindBy(xpath="//div[@class='msTreeMenuContainer']//div//span[@class='icon-left-and-right-panel-icon icon-font3 clsMenus pull-right']")
			public static WebElement menuMinimizeBtn;

			@FindBy(xpath="//span[@id='altMenu_Icon']")
			public static WebElement menuExpansionBtn;

			@FindBy(xpath="//div[@id='masterTreeMenu']//ul//li//a//span")
			public static List<WebElement> menuList;

			@FindBy(xpath="//div[@id='masterTreeMenu']/ul//li/a/i")
			public static List<WebElement> menuPlus;

			@FindBy(xpath="//div[contains(text(),'Save')]")
			public static WebElement cmSaveBtn;

			@FindBy(xpath="//*[@id='btnClose_ConfigureMasters']/div[1]/span")
			public static WebElement cmCloseBtn;
			
			@FindBy(xpath="//a[contains(@class,'menu-selected theme_color-inverse')]//span[@class='Flabel'][contains(text(),'Masters')]")
			public static WebElement cmMastermenu;
			
			@FindBy(xpath="//div[@class='col-sm-12 btnMain_header_img']//span[@class='icon-delete icon-font7']")
			public static WebElement cmDeleteBtn;

			@FindBy(xpath="//label[@id='lblMessage_Modal']")
			public static WebElement cmGetMgsonDelete;

			@FindBy(xpath="//button[@id='btnDeleteMaster_Ok']")
			public static WebElement cmclickOnOkInDelete;
			
			@FindBy(xpath="//*[@id='1182']/span")
			public static WebElement ConfigMasterInMastersList;

			@FindBy(xpath="//*[@id='sName']")
			public static WebElement NameTxt; 

			@FindBy(xpath="//*[@id='sCode']")
			public static WebElement codeTxt; 
			
			@FindBy(xpath="//*[@id='MasterMenus_div']/div/div[3]/button[1]")
			public static WebElement addGroupBtnInconfigureMaster;

			@FindBy(xpath="//*[@id='MasterMenus_div']/div/div[3]/button[2]")
			public static WebElement deleteGroupBtnInconfigureMaster;

			@FindBy(xpath="//*[@id='txtNewGroupName']")
			public static WebElement groupNameTxt;

			@FindBy(xpath="//*[@id='btnAddGroup_Ok']")
			public static WebElement okBtnInAddgroupPopup;

			@FindBy(xpath="//li[@id='mMenu1']/a/i")
			public static WebElement homeMenuExpandBtn;

			@FindBy(xpath="//li[@id='mMenu1000']/a/i")
			public static WebElement masterMenuExpandBtn;

			@FindBy(xpath="//li[@id='mMenu1000']/a/span")
			public static WebElement masterMenuBtn;

			@FindBy(xpath="//span[text()='GroupMaster']")
			public static WebElement GroupMasterMenuBtn;

			@FindBy(xpath="(//span[text()='GroupMaster'])[2]")
			public static WebElement GroupMasterBtn;

			@FindBy(xpath="//span[text()='GroupMasterToDelete']")
			public static WebElement GroupMasterToDeleteMenuBtn;
			
			
			
			// Seller Price book Test
			
			@FindBy(xpath="//*[@id='80']/span")
			public static WebElement  homeMasterItem_buyerPriceBookMenu;

			@FindBy(xpath="//*[@id='76']/span")
			public static WebElement  homeMasterItem_sellerPriceBookMenu;

			@FindBy(xpath="//*[@id='ctrlOptionProPriceBookH']")
			public static WebElement buyerPriceBook_PriceBook;


			//First Row

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[1]/td[2]")
			public static WebElement itemFirstCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[1]/td[4]")
			public static WebElement wareHouseFirstCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[1]/td[5]")
			public static WebElement startingDateFirstCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[1]/td[6]")
			public static WebElement endingDateFirstCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[1]/td[7]")
			public static WebElement vendorFirstCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[1]/td[8]")
			public static WebElement currencyFirstCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[1]/td[9]")
			public static WebElement minQtyFirstCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[1]/td[10]")
			public static WebElement maxQtyFirstCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[1]/td[11]")
			public static WebElement unitFirstCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[1]/td[12]")
			public static WebElement rateFirstCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[1]/td[13]")
			public static WebElement PoFirstCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[1]/td[14]")
			public static WebElement PtFirstCellSelect; 	


			//Second Row
			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[2]/td[2]")
			public static WebElement itemSecondCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[2]/td[4]")
			public static WebElement wareHouseSecondCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[2]/td[5]")
			public static WebElement satrtingDateSecondCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[2]/td[6]")
			public static WebElement endingDateSecondCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[2]/td[7]")
			public static WebElement vendorSecondCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[2]/td[8]")
			public static WebElement currencySecondCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[2]/td[9]")
			public static WebElement minQtySecondCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[2]/td[10]")
			public static WebElement maxQtySecondCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[2]/td[11]")
			public static WebElement unitSecondCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[2]/td[12]")
			public static WebElement rateSecondCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[2]/td[13]")
			public static WebElement PoSecondCellSelect; 	

			@FindBy(xpath="//*[@id='PriceBookWebGrid_body']/tr[2]/td[14]")
			public static WebElement PtSecondCellSelect; 


			//Third Row
			@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-1']")
			public static WebElement itemThirdCellSelect; 	

			@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-3']")
			public static WebElement wareHouseThirdCellSelect; 	

			@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-4']")
			public static WebElement satrtingDateThirdCellSelect; 	

			@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-5']")
			public static WebElement endingDateThirdCellSelect; 	

			@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-6']")
			public static WebElement vendorThirdCellSelect; 	

			@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-7']")
			public static WebElement currencyThirdCellSelect; 	

			@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-8']")
			public static WebElement minQtyThirdCellSelect; 	

			@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-9']")
			public static WebElement maxQtyThirdCellSelect; 	

			@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-10']")
			public static WebElement unitThirdCellSelect; 	

			@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-11']")
			public static WebElement rateThirdCellSelect; 	

			@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-12']")
			public static WebElement PoThirdCellSelect; 	

			@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-13']")
			public static WebElement PtThirdCellSelect; 	


			//To get Value From Cell

			@FindBy(xpath="//input[@id='PriceBookWebGrid_option_2']")
			public static WebElement itemValue; 	

			@FindBy(xpath="//input[@id='PriceBookWebGrid_option_4']")
			public static WebElement wareHouseValue; 	

			@FindBy(xpath="//input[@id='PriceBookWebGrid_option_StartingDate']")
			public static WebElement startingDateValue; 	

			@FindBy(xpath="//input[@id='PriceBookWebGrid_option_EndingDate']")
			public static WebElement endingDateValue; 	

			@FindBy(xpath="//input[@id='PriceBookWebGrid_option_1']")
			public static WebElement vendorValue; 	

			@FindBy(xpath="//input[@id='Currency_option']")
			public static WebElement currencyOptionValue; 	

			@FindBy(xpath="//input[@id='PriceBookWebGrid_minqty']")
			public static WebElement minQtyValue; 	

			@FindBy(xpath="//input[@id='PriceBookWebGrid_maxqty']")
			public static WebElement maxQtyValue; 	

			@FindBy(xpath="//input[@id='PriceBookWebGrid_option_11']")
			public static WebElement unitValue; 	

			@FindBy(xpath="//input[@id='PriceBookWebGrid_val0']")
			public static WebElement rateValue; 	

			@FindBy(xpath="//input[@id='PriceBookWebGrid_val1']")
			public static WebElement PoValue; 	

			@FindBy(xpath="//input[@id='PriceBookWebGrid_val2']")
			public static WebElement PtValue; 	

			@FindBy(xpath="//*[@id='chkDateRange']")
			public static WebElement buyerPriceBook_CustamizeDateRangeCheckBox;

			@FindBy(xpath="//*[@id='chkCustomer']")
			public static WebElement buyerPriceBook_CustomizeVendorCheckBox;

			@FindBy(xpath="//*[@id='chkDepartment']")
			public static WebElement buyerPriceBook_WarehouseCheckBox;

			@FindBy(xpath="//*[@id='chkQtyRange']")
			public static WebElement buyerPriceBook_QualityRangeCheckBox;

			@FindBy(xpath="//*[@id='chkCurrency']")
			public static WebElement buyerPriceBook_CurrencyCheckBox;

			@FindBy(xpath="//*[@id='chkUnit']")
			public static WebElement buyerPriceBook_UnitCheckBox;

			@FindBy(xpath="//*[@id='txtAbbreviation']")
			public static WebElement buyerPriceBook_AbbreviationBtn;

			@FindBy(xpath="//*[@id='PriceBookContainer']/div[2]/nav/div/div[1]/a/div/span[2]")
			public static WebElement buyerPriceBookLabel;

			@FindBy(xpath="//*[@id='btnClear']")
			public static WebElement buyerPriceBookClearBtn;

			@FindBy(xpath="//*[@id='btnPaste']")
			public static WebElement buyerPriceBookPasteBtn;

			@FindBy(xpath="//*[@id='btnCopy']")
			public static WebElement buyerPriceBookCopyBtn;

			@FindBy(xpath="//*[@id='btnSelectAll']")
			public static WebElement buyerPriceBookSelectAllBtn;

			@FindBy(xpath="//*[@id='btnClose']")
			public static WebElement buyerPriceBookCloseBtn;

			@FindBy(xpath="//*[@id='btnSave']")
			public static WebElement buyerPriceBookSaveBtn;

			@FindBy(xpath="//*[@id='ctrlOptionProPriceBookH_table_body']/tr/td[2]")
			public static List<WebElement> pricebookComboBoxList;

			@FindBy(xpath="//*[@id='PriceBookWebGrid_option_2_table_body']/tr/td[2]")
			public static List<WebElement> itemComboBoxList;

			@FindBy(xpath="//*[@id='PriceBookWebGrid_option_4_table_body']/tr/td[2]")
			public static List<WebElement> warehouseComboBoxList;

			@FindBy(xpath="//*[@id='PriceBookWebGrid_option_1_table_body']/tr/td[2]")
			public static List<WebElement> vendorComboBoxList;

			@FindBy(xpath="//*[@id='Currency_option_table_body']/tr/td[2]")
			public static List<WebElement> currencyComboBoxList;

			@FindBy(xpath="//*[@id='PriceBookWebGrid_option_11_table_body']/tr/td[2]")
			public static List<WebElement> unitComboBoxList;

			@FindBy(xpath="//input[@id='btnLoad']")
			public static WebElement priceBookFilterAndLoadBtn;


			
			@FindBy (xpath="//form[@id='formLoadDataXML']//button[@id='btnExporttoExcel']")
			public static WebElement priceBookExportToExcel;

			@FindBy(xpath="//button[@id='btnPBImportFromExcel']")
			public static WebElement buyerPriceBook_ImportFromExcel;

			@FindBy(xpath="//button[@id='btnImportData']")
			public static WebElement importButton;

			@FindBy(xpath="//button[@id='btnCloseImport']")
			public static WebElement closeButtonInImport;

			@FindBy(xpath="//span[@class='btn btn-sm theme_background-color fileUpload theme_color']")
			public static WebElement browseButton;

			@FindBy(xpath="//input[@id='rdoFilterName']")
			public static WebElement nameRadioButton;

			@FindBy(xpath="//input[@id='rdoFilterCode']")
			public static WebElement codeRadioButton;

			@FindBy(xpath="//input[@id='rdoFilterBoth']")
			public static WebElement bothRadioButton;


			@FindBy(xpath="//input[@id='chkOverride']")
			public static WebElement overrideCheckbox;


			@FindBy(xpath="//span[contains(text(),'Select Sheet')]")
			public static WebElement sheetTitle;

			@FindBy(xpath="//li[@class='clsSheetName']")
			public static WebElement sheetName;

			@FindBy(xpath="//button[@id='btnSheetOk']")
			public static WebElement sheetOkButton;

			@FindBy(xpath="//button[@id='btnSheetClose']")
			public static WebElement sheetCloseButton;


			@FindBy(xpath="//div[@id='myModalImportFromExcel']//tr[1]//td[3]")
			public static WebElement sheetItemHeading;

			@FindBy(xpath="//select[@id='ddlImportFromExcelItemList0']")
			public static WebElement sheetItem;

			@FindBy(xpath="//div[@id='myModalImportFromExcel']//tr[2]//td[3]")
			public static WebElement sheetAccountHeading;

			@FindBy(xpath="//select[@id='ddlImportFromExcelItemList1']")
			public static WebElement sheetAccount;

			@FindBy(xpath="(//div[@id='myModalImportFromExcel']//tr[3]//td[3])[2]")
			public static WebElement sheetTagHeading;

			@FindBy(xpath="//select[@id='ddlImportFromExcelItemList2']")
			public static WebElement sheetTag;

			@FindBy(xpath="//div[@id='myModalImportFromExcel']//tr[4]//td[3]")
			public static WebElement sheetCurrencyHeading;

			@FindBy(xpath="//select[@id='ddlImportFromExcelItemList3']")
			public static WebElement sheetCurrency;

			@FindBy(xpath="//div[@id='myModalImportFromExcel']//tr[5]//td[3]")
			public static WebElement sheetStartDateHeading;

			@FindBy(xpath="//select[@id='ddlImportFromExcelItemList4']")
			public static WebElement sheetStartDate;

			@FindBy(xpath="//div[@id='myModalImportFromExcel']//tr[6]//td[3]")
			public static WebElement sheetEndDateHeading;

			@FindBy(xpath="//select[@id='ddlImportFromExcelItemList5']")
			public static WebElement sheetEndDate;

			@FindBy(xpath="//div[@id='myModalImportFromExcel']//tr[7]//td[3]")
			public static WebElement sheetMinQtyHeading;

			@FindBy(xpath="//select[@id='ddlImportFromExcelItemList6']")
			public static WebElement sheetMinQty;

			@FindBy(xpath="//div[@id='myModalImportFromExcel']//tr[8]//td[3]")
			public static WebElement sheetMaxQtyHeading;

			@FindBy(xpath="//select[@id='ddlImportFromExcelItemList7']")
			public static WebElement sheetMaxQty;

			@FindBy(xpath="//div[@id='myModalImportFromExcel']//tr[9]//td[3]")
			public static WebElement sheetUnitHeading;

			@FindBy(xpath="//select[@id='ddlImportFromExcelItemList8']")
			public static WebElement sheetUnitQty;

			@FindBy(xpath="//div[@id='myModalImportFromExcel']//tr[10]//td[3]")
			public static WebElement sheetRateHeading;

			@FindBy(xpath="//select[@id='ddlImportFromExcelItemList9']")
			public static WebElement sheetRate;

			@FindBy(xpath="//div[@id='myModalImportFromExcel']//tr[11]//td[3]")
			public static WebElement sheetPOHeading;

			@FindBy(xpath="//select[@id='ddlImportFromExcelItemList10']")
			public static WebElement sheetPO;

			@FindBy(xpath="//div[@id='myModalImportFromExcel']//tr[12]//td[3]")
			public static WebElement sheetPTHeading;

			@FindBy(xpath="//div[@id='myModalImportFromExcel']//tr[13]//td[3]")
			public static WebElement sheetHeading;

			@FindBy(xpath="//select[@id='ddlImportFromExcelItemList11']")
			public static WebElement sheetPT;

			@FindBy(xpath="//select[@id='ddlImportFromExcelItemList12']")
			public static WebElement sheetP;

			@FindBy(xpath="//*[@id='toggleDropDown']/i")
			public static WebElement buyerPriceBook_CustamizeSettingBtn;

			@FindBy (xpath="//ul[@id='ddlMenu']/li/label/input")
			public static List<WebElement> buyerPriceBook_CustomizeCheckBoxList;

			@FindBy (xpath="//tbody[@id='PriceBookWebGrid_body']/tr[1]/td")
			public static List<WebElement> buyerPriceBook_TableRow1List;

			@FindBy (xpath="//tbody[@id='PriceBookWebGrid_body']/tr[2]/td")
			public static List<WebElement> buyerPriceBook_TableRow2List;


			@FindBy(xpath="//select[@id='ImportGrid_ExternalFields']")
			public static WebElement buyerPriceBook_MappingDrpdwn;
			
			//BATCH OPTIONS ELEMENTS     
			
			
			// Financial Menu and Sub Menus
			@FindBy(xpath="//*[@id='60']")
			public static WebElement  financialsMenu;



			@FindBy(xpath="//*[@id='61']")
			public static WebElement  financialsTransactionMenu; 		

			@FindBy(xpath="//*[@id='2001']/span")
			public static WebElement  cashAndBankMenu; 

			@FindBy(xpath="//*[@id='2002']/span")
			public static WebElement  receiptsVoucher;

			@FindBy(xpath="//*[@id='2003']/span")
			public static WebElement  paymentsVoucher;

			@FindBy(xpath="//*[@id='2004']/span")
			public static WebElement  pettyVoucher;

			@FindBy(xpath="//*[@id='2005']/span")
			public static WebElement  postDatedReceiptsVoucher;

			@FindBy(xpath="//*[@id='2006']/span")
			public static WebElement  postDatedPaymentsVoucher;

			@FindBy(xpath="//*[@id='108']/span")
			public static WebElement  defineChequeSeries;

			@FindBy(xpath="//*[@id='109']/span")
			public static WebElement  cancelCheque;


			@FindBy(xpath="//*[@id='2007']")
			public static WebElement  financialsTransactionsPurchaseMenu; 

			@FindBy(xpath="//*[@id='2008']/span")
			public static WebElement  purchaseVoucher;

			@FindBy(xpath="//*[@id='2009']/span")
			public static WebElement  purchaseReturnsVoucher;

			@FindBy(xpath="//*[@id='2050']/span")
			public static WebElement  purchaseVoucherN;


			@FindBy(xpath="//*[@id='2014']")
			public static WebElement  financialsTransactionsSalesMenu;

			@FindBy(xpath="//*[@id='2015']/span")
			public static WebElement  salesInvoicesVoucher;

			@FindBy(xpath="//*[@id='2016']/span")
			public static WebElement  salesReturnsVoucher;

			@FindBy(xpath="//*[@id='2020']/span")
			public static WebElement  cashSales;

			@FindBy(xpath="//*[@id='2021']/span")
			public static WebElement  hirePurchaseSales;

			@FindBy(xpath="//*[@id='2023']/span")
			public static WebElement  financialsTransactionsJournalsMenu;

			@FindBy(xpath="//*[@id='2032']/span")
			public static WebElement  journalsEntriesVoucher;

			@FindBy(xpath="//*[@id='2025']/span")
			public static WebElement  forexJVVoucher;

			@FindBy(xpath="//*[@id='2029']/span")
			public static WebElement  interdepartmentaljvVoucher;

			@FindBy(xpath="//*[@id='2024']/span")
			public static WebElement  oldJouranlEntriesVoucher;

			@FindBy(xpath="//*[@id='2026']/span")
			public static WebElement  debitNotesVoucher;

			@FindBy(xpath="//*[@id='2030']/span")
			public static WebElement  debitNotesLinewiseVoucher;

			@FindBy(xpath="//*[@id='2027']/span")
			public static WebElement  creditNotesVoucher;

			@FindBy(xpath="//*[@id='2031']/span")
			public static WebElement  creditNotesLinewiseVoucher;

			@FindBy(xpath="//*[@id='2028']/span")
			public static WebElement  openingBalancesVoucher;

			@FindBy(xpath="//*[@id='2046']/span")
			public static WebElement  fixedAssetsDepreciationVoucher;

			@FindBy(xpath="//*[@id='219']/span")
			public static WebElement  financialsTransactionsAutoPostingsMenu;

			@FindBy(xpath="//*[@id='77']/span")
			public static WebElement  recurringJournalVoucher;

			@FindBy(xpath="//*[@id='79']/span")
			public static WebElement  postRecurringJournal;

			@FindBy(xpath="//*[@id='92']/span")
			public static WebElement  recurringJournalTemplate;

			@FindBy(xpath="//*[@id='91']/span")
			public static WebElement  postInterest;

			@FindBy(xpath="//*[@id='90']/span")
			public static WebElement  convertMaturedPDCs;

			@FindBy(xpath="//*[@id='161']/span")
			public static WebElement assignPDCLimit;

			@FindBy(xpath="//*[@id='166']/span")
			public static WebElement  stockReplenishment;

			@FindBy(xpath="//*[@id='62']/span")
			public static WebElement  financialsCreditManagementMenu; 

			@FindBy(xpath="//*[@id='63']/span")
			public static WebElement  paymentTerms;

			@FindBy(xpath="//*[@id='64']/span")
			public static WebElement  financeTerms;

			@FindBy(xpath="//*[@id='65']/span")
			public static WebElement  reminderTerms;		

			@FindBy(xpath="//*[@id='89']/span")
			public static WebElement  sendReminder;

			@FindBy(xpath="//*[@id='217']/span")
			public static WebElement  delinquency;

			@FindBy(xpath="//*[@id='73']/span")
			public static WebElement  questionnarie;

			@FindBy(xpath="//*[@id='218']/span")
			public static WebElement  delinquencyMgmt;

			@FindBy(xpath="//*[@id='35']/span")
			public static WebElement  creidtApproval;


			@FindBy(xpath="//*[@id='id_menu_tree_135']/a/i")
			public static WebElement  inventoryExpandBtn;



			@FindBy(xpath="//*[@id='id_menu_tree_139']/a/i")
			public static WebElement  inventoryPurchasesBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_140']/a/i")
			public static WebElement  inventorySalesBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_2033']/a/i")
			public static WebElement  stocksBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_200']/a/i")
			public static WebElement  inventoryReportsExpandBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_540']/a/i")
			public static WebElement  binsReportBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_621']/a/i")
			public static WebElement  stockAgeingAnalysisBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_550']/a/i")
			public static WebElement  ordermanagementExpandBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_600']/a/i")
			public static WebElement  analysisOfLinkedUnlinkedDocumentsBtn;

			//Fixed Asset************************							

			@FindBy(xpath="//*[@id='id_menu_tree_136']/a/i")
			public static WebElement  fixedAssetExpandBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_138']/a/i")
			public static WebElement  fixedAssetTransactionExpandBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_50010']/a/i")
			public static WebElement  fixedAssetReportsBtn;

			//Production ***********************							

			@FindBy(xpath="//*[@id='id_menu_tree_3000']/a/i")
			public static WebElement  productionExpandBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_3001']/a/i")
			public static WebElement  productionTransactionBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_625']/a/i")
			public static WebElement  productionReportBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_3006']/a/i")
			public static WebElement  mrpSettingsBtn;

			//Point Of Sale ***********************************				

			@FindBy(xpath="//*[@id='id_menu_tree_8000']/a/i")
			public static WebElement  pointofSale_ExpandBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8004']/a/i")
			public static WebElement  mainScreenBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8500']/a/i")
			public static WebElement  posReportsExpandBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8501']/a/i")
			public static WebElement  retailSaleReportBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8507']/a/i")
			public static WebElement  summarysalesReportBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8513']/a/i")
			public static WebElement  preOrderReportsBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8523']/a/i")
			public static WebElement  memberReportsBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8530']/a/i")
			public static WebElement  memberPointsReportsBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8535']/a/i")
			public static WebElement  itemReportsBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8540']/a/i")
			public static WebElement  cashReportsBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8545']/a/i")
			public static WebElement  stockReportsBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8550']/a/i")
			public static WebElement  periodicSalesReportsBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8556']/a/i")
			public static WebElement  lastYearComaprisionReportsBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8562']/a/i")
			public static WebElement  miscellaneousReportsBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8571']/a/i")
			public static WebElement  restaurantReportsBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8900']/a/i")
			public static WebElement  reportsTableManagementBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8003']/a/i")
			public static WebElement  utilitiesExpandBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_8027']/a/i")
			public static WebElement  bbqConversionBtn;


			//Quality Control *****************  	



			@FindBy(xpath="//*[@id='id_menu_tree_150']/a/i")
			public static WebElement  qualityControlExpandBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_151']/a/i")
			public static WebElement  qualityControlTransactionBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_152']/a/i")
			public static WebElement  qualityControlReportsBtn;



			// Views Tab


			@FindBy(xpath="//span[@class='icon-views'")
			public static WebElement  viewsTab;



			// Export Fields 

			@FindBy(xpath="//span[contains(text(),'Export Fields')]")
			public static WebElement exportFieldsTab;

			// Triggers

			@FindBy(xpath="//span[@class='icon-trigger icon-font7']")
			public static WebElement  triggersTab;	

			//  Document Numbering

			@FindBy(xpath="//span[contains(text(),'Document Numbering')]")
			public static WebElement  documentNumberingTab;

			// Hire Purchase	

			@FindBy(xpath="//span[contains(text(),'Hire Purchase')]")
			public static WebElement hirePurchasetab;



			// Reports Tab	

			@FindBy(xpath="//span[@class='icon-text70 icon-font7']")
			public static WebElement  reportsTab;	

			// Schemes

			@FindBy(xpath="//span[contains(text(),'Schemes')]")
			public static WebElement schemestab;	




			////////////////////

			
			@FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
			public static WebElement  invTransactionsMenu; 

			@FindBy(xpath="//*[@id='139']/span")
			public static WebElement  invTransPurchasesMenu; 

			@FindBy(xpath="//*[@id='2010']/span")
			public static WebElement  requestForQuoteVoucher;

			@FindBy(xpath="//*[@id='2011']/span")
			public static WebElement  purchasesQuotationsVoucher;

			@FindBy(xpath="//*[@id='2012']/span")
			public static WebElement  purchasesOrdersVoucher;

			@FindBy(xpath="//*[@id='2013']/span")
			public static WebElement  materialReceiptNotesVoucher;

			@FindBy(xpath="//*[@id='140']/span")
			public static WebElement  invTransSalesMenu; 

			@FindBy(xpath="//*[@id='2018']/span")
			public static WebElement  salesQuotationsVoucher;

			@FindBy(xpath="//*[@id='2019']/span")
			public static WebElement  deliveryNotesVoucher;

			@FindBy(xpath="//*[@id='2022']/span")
			public static WebElement  posSalesVoucher;

			@FindBy(xpath="//*[@id='2045']/span")
			public static WebElement  productionOrdersVoucher;

			@FindBy(xpath="//*[@id='2017']/span")
			public static WebElement  salesOrdersVoucher;



			@FindBy(xpath="//*[@id='2034']/span")
			public static WebElement  shortagesInStockVoucher;

			@FindBy(xpath="//*[@id='2035']/span")
			public static WebElement  excessesInStocksVoucher;

			@FindBy(xpath="//*[@id='2036']/span")
			public static WebElement  stockTransfersVoucher;

			@FindBy(xpath="//a[@id='2037']//span[contains(text(),'Opening Stocks')]")
			public static WebElement  openingStocksVoucher;

			@FindBy(xpath="//a[@id='2049']//span[contains(text(),'Opening Stocks New')]")
			public static WebElement  openingStocksNEWVoucher;

			@FindBy(xpath="//*[@id='2038']/span")
			public static WebElement  materialRequisitionVoucher;

			@FindBy(xpath="//*[@id='2049']/span")
			public static WebElement  stockAdjustmentVoucher;

			@FindBy(xpath="//*[@id='164']/span")
			public static WebElement  holdAndUnholdStockVoucher;

			@FindBy(xpath="//*[@id='93']/span")
			public static WebElement  stockReconciliation;

			@FindBy(xpath="//*[@id='99']/span")
			public static WebElement  stockAllocation;

			@FindBy(xpath="//a[@id='200']//span[contains(text(),'Reports')]")
			public static WebElement  inventoryReportsMenu; 

			@FindBy(xpath="//a[@id='202']//span[contains(text(),'Item Query')]")
			public static WebElement itemQuery;

			@FindBy(xpath="//span[contains(text(),'Stock Ledger')]")
			public static WebElement  stockLedger;

			@FindBy(xpath="//span[contains(text(),'Opening Stocks Register')]")
			public static WebElement  openingStocksRegister;

			@FindBy(xpath="//span[contains(text(),'Stock Statement')]")
			public static WebElement  stockStatement;

			@FindBy(xpath="//a[@id='575']//span[contains(text(),'Stock movement')]")
			public static WebElement  stockMovement;

			@FindBy(xpath="//span[contains(text(),'Multi Level Stock Movement')]")
			public static WebElement  multiLevelStockMovement;

			@FindBy(xpath="//span[contains(text(),'Virtual Stock Analysis')]")
			public static WebElement  virtualStockAnalysis;

			@FindBy(xpath="//a[@id='578']")
			public static WebElement  stockValuation;

			@FindBy(xpath="//a[@id='656']")
			public static WebElement  stockReportByTag;

			@FindBy(xpath="//a[@id='579']//span[contains(text(),'ABC Analysis')]")
			public static WebElement  abcAnalysis;

			@FindBy(xpath="//span[contains(text(),'Stock Analysis by Batch')]")
			public static WebElement  stockAnalysisByBatch;

			@FindBy(xpath="//span[contains(text(),'Stock Analysis by RMA')]")
			public static WebElement  stockAnalysisByRMA;

			@FindBy(xpath="//span[contains(text(),'Bins Report')]")
			public static WebElement  binsReportMenu;

			@FindBy(xpath="//*[@id='587']/span")
			public static WebElement  stockDetailsByBins;

			@FindBy(xpath="//*[@id='588']/span")
			public static WebElement  stockBalancesByBins;

			@FindBy(xpath="//*[@id='589']/span")
			public static WebElement  stockBalancesByItemByBins;

			@FindBy(xpath="//*[@id='590']/span")
			public static WebElement  expiredStockByBins;		

			@FindBy(xpath="//span[contains(text(),'Stock balance by warehouse')]")
			public static WebElement  stockBalanceByWarehouse;

			@FindBy(xpath="//span[contains(text(),'Stock ageing analysis')]")
			public static WebElement  stockAgeingAnalysisMenu;

			@FindBy(xpath="//*[@id='582']/span")
			public static WebElement  ageingAnalysis;

			@FindBy(xpath="//*[@id='622']/span")
			public static WebElement  ageingAnalysisByBatch;

			@FindBy(xpath="//*[@id='623']/span")
			public static WebElement  ageingAnalysisByRMA;		

			@FindBy(xpath="//*[@id='591']/span")
			public static WebElement  ageingStockByBins;

			@FindBy(xpath="//*[@id='646']/span")
			public static WebElement  ageingByItemByBins;		

			@FindBy(xpath="//span[contains(text(),'Reorder Report')]")
			public static WebElement reorderReport;

			@FindBy(xpath="//a[@id='584']//span[contains(text(),'Fast Moving Item')]")
			public static WebElement  fastMovingItem;

			@FindBy(xpath="//a[@id='585']//span[contains(text(),'Slow Moving Item')]")
			public static WebElement  slowMovingItem;

			@FindBy(xpath="//span[contains(text(),'Peak/Low Balances')]")
			public static WebElement  peakORLowBalances;

			@FindBy(xpath="//span[contains(text(),'Best Selling Item')]")
			public static WebElement  bestSellingItem;

			@FindBy(xpath="//span[contains(text(),'Raise Indent Item with Low Stock')]")
			public static WebElement  raiseIndentItemWithLowStock;

			@FindBy(xpath="//span[contains(text(),'Stock transfer report')]")
			public static WebElement  stockTransferReport;

			@FindBy(xpath="//span[contains(text(),'Raise request for quote')]")
			public static WebElement  raiseRequestForQuote;

			@FindBy(xpath="//span[contains(text(),'Stock reservation report')]")
			public static WebElement  stockReservationReport;

			@FindBy(xpath="//span[contains(text(),'Transaction type-wise stock report')]")
			public static WebElement  transactionTypeWiseStockReport;

			@FindBy(xpath="//span[contains(text(),'Order Management')]")
			public static WebElement  orderManagementMenu; 

			@FindBy(xpath="//*[@id='600']/span")
			public static WebElement  analysisOfLinkedORUnlinkedDocumentsMenu;

			@FindBy(xpath="//*[@id='601']/span")
			public static WebElement  listingOfDocuments;

			@FindBy(xpath="//*[@id='602']/span")
			public static WebElement listingOfDocumentsByDueDate;

			@FindBy(xpath="//*[@id='603']/span")
			public static WebElement  ageingOfPendingDocuments;

			@FindBy(xpath="//*[@id='604']/span")
			public static WebElement  ageingofPendingDocumentsByDueDate;

			@FindBy(xpath="//*[@id='624']/span")
			public static WebElement  linkChainAnalysis;

			@FindBy(xpath="//*[@id='657']/span")
			public static WebElement  pendingVoucherReport;

			@FindBy(xpath="//*[@id='201']/span")
			public static WebElement  quotationAnalysis;

			@FindBy(xpath="//*[@id='555']/span")
			public static WebElement  purchasesQuotation;

			@FindBy(xpath="//*[@id='556']/span")
			public static WebElement  salesQuotation;

			@FindBy(xpath="//*[@id='574']/span")
			public static WebElement  lowestQuotation;

			@FindBy(xpath="//*[@id='553']/span")
			public static WebElement  purchasesOrders;		

			@FindBy(xpath="//*[@id='554']/span")
			public static WebElement  salesOrders;

			///////////////////////////////////////////////////////////////////


			// Item Query Elements

			@FindBy(xpath="//input[@id='productQuery']")
			public static WebElement IQ_ItemTxt;

			@FindBy(xpath="//button[contains(text(),'GetStock')]")
			public static WebElement IQ_getStockBtn;

			@FindBy(xpath="//button[contains(text(),'Customize')]")
			public static WebElement IQ_customizeBtn;

			@FindBy(xpath="//span[@id='id_productquery_button_clear']")
			public static WebElement IQ_clearBtn;

			@FindBy(xpath="//span[@id='id_productquery_button_close']")
			public static WebElement IQ_closeBtn;

			@FindBy(xpath="//label[contains(text(),'Opening Stock Quantity:')]")
			public static WebElement IQ_OpeningStockQtyLable;

			@FindBy(xpath="//label[contains(text(),'Pending purchases orders :')]")
			public static WebElement IQ_PendingPurchaseOrdersLable;

			@FindBy(xpath="//label[contains(text(),'Current Stock :')]")
			public static WebElement IQ_CurrentStockLable;

			@FindBy(xpath="//label[contains(text(),'Pending Sales Orders :')]")
			public static WebElement IQ_PendingSalesOrdersLable;

			@FindBy(xpath="//label[contains(text(),'Avg. Stock Rate :')]")
			public static WebElement IQ_AvgStockRateLable;

			@FindBy(xpath="//label[contains(text(),'Qty to be Ordered :')]")
			public static WebElement IQ_QtytobeOrderedLable;

			@FindBy(xpath="//label[contains(text(),'Base Unit :')]")
			public static WebElement IQ_BaseUnitLable;

			@FindBy(xpath="//label[contains(text(),'Value :')]")
			public static WebElement IQ_ValueLable;

			@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Date')]")
			public static WebElement IQ_PurDate;

			@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Voucher No')]")
			public static WebElement IQ_PurVoucherNo;

			@FindBy(xpath="//th[contains(text(),'Vendor')]")
			public static WebElement IQ_PurVendor;

			@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Quantity')]")
			public static WebElement IQ_PurQty;

			@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Rate')]")
			public static WebElement IQ_PurRate;

			@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Currency')]")
			public static WebElement IQ_PurCurrency;

			@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Date')]")
			public static WebElement IQ_SaleDate;

			@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Voucher No')]")
			public static WebElement IQ_SaleVoucherNo;

			@FindBy(xpath="//th[contains(text(),'Customer')]")
			public static WebElement IQ_SaleCustomer;

			@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Quantity')]")
			public static WebElement IQ_SaleQty;

			@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Rate')]")
			public static WebElement IQ_SaleRate;

			@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Currency')]")
			public static WebElement IQ_SaleCurrency;

			@FindBy(xpath="//span[@id='openingStock']")
			public static WebElement IQ_OpeningStockQuantity;

			@FindBy(xpath="//span[@id='currentStock']")
			public static WebElement IQ_CurrentStock;

			@FindBy(xpath="//span[@id='avgStockRate']")
			public static WebElement IQ_AvgStockRate;

			@FindBy(xpath="//span[@id='value']")
			public static WebElement IQ_Value;

			@FindBy(xpath="//span[@id='iBaseUnit']")
			public static WebElement IQ_BaseUnit;

			@FindBy(xpath="//span[@id='purchaseOrdered']")
			public static WebElement IQ_PendingPurchaseOrders;

			@FindBy(xpath="//span[@id='salesOrdered']")
			public static WebElement IQ_PendingSalesOrders;

			@FindBy(xpath="//span[@id='quantityToBeOrdered']")
			public static WebElement IQ_QtyToBeOrdered;


			// Purchase Table

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[1]")
			public static WebElement Pur1strow_1stColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[2]")
			public static WebElement Pur1strow_2ndColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[3]")
			public static WebElement Pur1strow_3rdColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[4]")
			public static WebElement Pur1strow_4thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[5]")
			public static WebElement Pur1strow_5thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[6]")
			public static WebElement Pur1strow_6thColumn;



			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[1]")
			public static WebElement Pur2ndrow_1stColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[2]")
			public static WebElement Pur2ndrow_2ndColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[3]")
			public static WebElement Pur2ndrow_3rdColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[4]")
			public static WebElement Pur2ndrow_4thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[5]")
			public static WebElement Pur2ndrow_5thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[6]")
			public static WebElement Pur2ndrow_6thColumn;



			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[1]")
			public static WebElement Pur3rdrow_1stColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[2]")
			public static WebElement Pur3rdrow_2ndColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[3]")
			public static WebElement Pur3rdrow_3rdColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[4]")
			public static WebElement Pur3rdrow_4thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[5]")
			public static WebElement Pur3rdrow_5thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[6]")
			public static WebElement Pur3rdrow_6thColumn;



			@FindBy(xpath="//td[contains(text(),'Quantity Purchased Till Date:')]")
			public static WebElement QtyPurchasedTillDate;

			@FindBy(xpath="//div[@class='form-group col-xs-12']//tr[4]//td[2]")
			public static WebElement PurTotal;




			@FindBy(xpath="//div[@id='PrdtDetails']//div[1]//div[1]//span[1]")
			public static WebElement BalancebyWareHouseExpandBtn;

			@FindBy(xpath="//*[@id='tagWiseData']//tr[1]/td[2]")
			public static WebElement IQ_WH1stRow1stCol;

			@FindBy(xpath="//*[@id='tagWiseData']//tr[1]/td[3]")
			public static WebElement IQ_WH1stRow2ndCol;

			@FindBy(xpath="//*[@id='tagWiseData']//tr[1]/td[4]")
			public static WebElement IQ_WH1stRow3rdCol;

			@FindBy(xpath="//*[@id='tagWiseData']//tr[1]/td[5]")
			public static WebElement IQ_WH1stRow4thCol;



			@FindBy(xpath="//*[@id='tagWiseData']//tr[2]/td[2]")
			public static WebElement IQ_WH2ndRow1stCol;

			@FindBy(xpath="//*[@id='tagWiseData']//tr[2]/td[3]")
			public static WebElement IQ_WH2ndRow2ndCol;

			@FindBy(xpath="//*[@id='tagWiseData']//tr[2]/td[4]")
			public static WebElement IQ_WH2ndRow3rdCol;

			@FindBy(xpath="//*[@id='tagWiseData']//tr[2]/td[5]")
			public static WebElement IQ_WH2ndRow4thCol;




			/*@FindBy(xpath="//*[@id='1']/td[2]")
					public static WebElement WH1strow_2ndColumn;

					@FindBy(xpath="//*[@id='1']/td[3]")
					public static WebElement WH1strow_3rdColumn;

					@FindBy(xpath="//*[@id='1']/td[4]")
					public static WebElement WH1strow_4thColumn;

					@FindBy(xpath="//*[@id='1']/td[5]")
					public static WebElement WH1strow_5thColumn;

					@FindBy(xpath="//*[@id='1']/td[6]")
					public static WebElement WH1strow_6thColumn;*/



			/*@FindBy(xpath="//*[@id='2']/td[2]")
					public static WebElement WH2ndrow_2ndColumn;

					@FindBy(xpath="//*[@id='2']/td[3]")
					public static WebElement WH2ndrow_3rdColumn;

					@FindBy(xpath="//*[@id='2']/td[4]")
					public static WebElement WH2ndrow_4thColumn;

					@FindBy(xpath="//*[@id='2']/td[5]")
					public static WebElement WH2ndrow_5thColumn;

					@FindBy(xpath="//*[@id='2']/td[6]")
					public static WebElement WH2ndrow_6thColumn;




					@FindBy(xpath="//*[@id='7']/td[2]")
					public static WebElement WH3rdrow_2ndColumn;

					@FindBy(xpath="//*[@id='7']/td[3]")
					public static WebElement WH3rdrow_3rdColumn;

					@FindBy(xpath="//*[@id='7']/td[4]")
					public static WebElement WH3rdrow_4thColumn;

					@FindBy(xpath="//*[@id='7']/td[5]")
					public static WebElement WH3rdrow_5thColumn;

					@FindBy(xpath="//*[@id='7']/td[6]")
					public static WebElement WH3rdrow_6thColumn;*/



			@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[4]/td[2]")
			public static WebElement WHStockTotal;

			@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[4]/td[4]")
			public static WebElement WHValueTotal;

			// Balance by bins

			@FindBy (xpath="//span[@id='ProdQuery_ShowSellandBuyRatesPopup']")
			public static WebElement BalancebyBinsExpandBtn;



			///////////////////////////////////////



			// Stock Ledger Elements 

			@FindBy(xpath="//div[@id='spnhiererchy']//select[@id='iTreeId']")
			public static WebElement sl_Dropdown1;

			@FindBy(xpath="//div[@id='spnhiererchy']//select[@id='iTreeViewId']")
			public static WebElement sl_Dropdown2;

			@FindBy(xpath="//label[@id='oncheckaccorderan']")
			public static WebElement sl_oncheckBtn;

			@FindBy(xpath="//input[@id='txtsrch-term']")
			public static WebElement sl_SearchItemTxt;

			@FindBy(xpath="//i[contains(@class,'icon-search theme_color-inverse')]")
			public static WebElement sl_SearchBtn;

			@FindBy(xpath="//input[@id='cmbUserTypeMaster']")
			public static WebElement sl_MasterTypeTxt;

			@FindBy(xpath="//span[contains(@class,'icon-font6 icon-external-module theme_icon-color')]")
			public static WebElement sl_AutoAdjustColumnsBtn;

			/*@FindBy(xpath="//a[contains(@class,'clsMasterName')][contains(text(),'ITEMS GROUP')]")
					public static WebElement sl_SearchItemTxt;*/

			@FindBy(xpath="//input[@id='txtsrch-term']")
			public static WebElement sl_SearhItemTxt;

			@FindBy(xpath="//a[contains(@class,'clsMasterName')][contains(text(),'ITEMS GROUP')]")
			public static WebElement sl_ItemGroupsBtn;

			@FindBy(xpath="//input[@id='liSelectAllMasters']")
			public static WebElement sl_HeaderSelectChkBox;

			@FindBy(xpath="//i[contains(@class,'icon-font6 icon-schedule')]")
			public static WebElement sl_ScheduleBtn;

			@FindBy(xpath="//i[contains(@class,'icon-font6 icon-custamize')]")
			public static WebElement sl_CustomizeBtn;

			@FindBy(xpath="//i[contains(@class,'icon-font6 icon-filter')]")
			public static WebElement sl_FilterBtn;

			@FindBy(xpath="//i[contains(@class,'icon-font6 icon-ok')]")
			public static WebElement sl_OkBtn;

			@FindBy(xpath="//i[contains(@class,'icon-font6 icon-close')]")
			public static WebElement sl_CloseBtn;

			@FindBy(xpath="//select[@id='DateOptions_']")
			public static WebElement sl_DateOptionDropdown;

			@FindBy(xpath="//input[@id='id_starting_date_']")
			public static WebElement sl_StartDateTxt;

			@FindBy(xpath="//td[@id='id_starting_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
			public static WebElement sl_StartDateCalanderBtn;

			@FindBy(xpath="//input[@id='id_ending_date_']")
			public static WebElement sl_EndDateTxt;

			@FindBy(xpath="//td[@id='id_ending_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
			public static WebElement sl_EndDateCalanderBtn;

			@FindBy(xpath="//*[@id='MasterSingle__101']")
			public static WebElement sl_WarehouseTxt;

			@FindBy(xpath="//*[@id='RITCheckbox__6']")
			public static WebElement sl_IgnoreInternalTransferForAgeingChkbox;

			@FindBy(xpath="//*[@id='RITCombobox__2']")
			public static WebElement sl_ReportingLevelDropdown;

			@FindBy(xpath="//*[@id='RITCheckbox__4']")
			public static WebElement sl_DisplayLinearReportChkbox;

			@FindBy(xpath="//*[@id='RITCombobox__1']")
			public static WebElement sl_StockValuationDropdown;

			@FindBy(xpath="//*[@id='RITCombobox__1']")
			public static WebElement sl_StockTypeDropdown;

			@FindBy(xpath="//input[@id='RITCheckbox__3']")
			public static WebElement sl_IncludeServiceTypeItemChkBox;

			@FindBy(xpath="//select[@id='RITLayout_']")
			public static WebElement sl_LayoutDropdown;

			@FindBy(xpath="//select[@id='RITOutput_']")
			public static WebElement sl_OutputDropdown;

			@FindBy(xpath="//input[@id='selectAllMasters_']")
			public static WebElement sl_SelectAllItemsChkBox;

			@FindBy(xpath="//input[@id='MasterSingle__1']")
			public static WebElement sl_FromWarehouseTxt;

			@FindBy(xpath="//input[@id='MasterSingle__2']")
			public static WebElement sl_ToWarehouseTxt;

			@FindBy(xpath="//div[contains(@class,'first')]//input[contains(@class,'btn btn-xs Fbutton')]")
			public static WebElement sl_FirstBtn;

			@FindBy(xpath="//div[contains(@class,'prev')]//input[contains(@class,'btn btn-xs Fbutton')]")
			public static WebElement sl_PreviousBtn;

			@FindBy(xpath="//input[@id='btn1']")
			public static WebElement sl_PageBtn;

			@FindBy(xpath="//div[contains(@class,'next')]//input[contains(@class,'btn btn-xs Fbutton')]")
			public static WebElement sl_NextBtn;

			@FindBy(xpath="//div[contains(@class,'End')]//input[contains(@class,'btn btn-xs Fbutton')]")
			public static WebElement sl_EndBtn;

			@FindBy(xpath="//tr[1]//td[8]//div[1]//label[1]//input")
			public static WebElement sl_1stRowChkBox;

			@FindBy(xpath="//tr[2]//td[8]//div[1]//label[1]//input")
			public static WebElement sl_2ndRowChkBox;

			@FindBy(xpath="//tr[3]//td[8]//div[1]//label[1]//input")
			public static WebElement sl_3rdRowChkBox;



			////////

			@FindBy(xpath="//span[@id='reportSort']")
			public static WebElement report_sortingBtn;

			@FindBy(xpath="//span[@id='reportRefresh']")
			public static WebElement report_RefreshBtn;

			@FindBy(xpath="//span[@id='print_report_']")
			public static WebElement report_PrintBtn;

			@FindBy(xpath="//span[@class='dropdown']")
			public static WebElement report_ExportBtn;

			@FindBy(xpath="//span[@id='GraphIcon']")
			public static WebElement report_GraphBtn;

			@FindBy(xpath="//span[@id='BackTrackIcon']")
			public static WebElement report_BackTrackBtn;

			@FindBy(xpath="//span[@id='reportCustomize_']")
			public static WebElement report_ReportCustomizeBtn;

			@FindBy(xpath="//div[@id='Deleteayout']")
			public static WebElement report_CustomizationDeleteLayoutBtn;



			@FindBy(xpath="//span[@id='filterIcon_']")
			public static WebElement report_FilterBtn;

			@FindBy(xpath="//div[@id='dvfilter']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
			public static WebElement report_FilterDownBtn;

			@FindBy(xpath="//span[@id='idFilterCustomizeIcon']")
			public static WebElement  report_FilterCustomizeBtn;

			@FindBy(xpath="//*[@id='FilterFields_551_0']/li[4]/a")
			public static WebElement reports_Filter_Customize_WarehouseExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_575_0']/li[4]/a")
			public static WebElement sMovement_Filter_Customize_WarehouseExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_576_0']/li[3]/a")
			public static WebElement multiLevel_Filter_Customize_ItemExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_577_0']/li[3]/a")
			public static WebElement virtualStock_Filter_Customize_ItemExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_578_0']/li[3]/a")
			public static WebElement stockValuation_Filter_Customize_ItemExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_656_0']/li[3]/a")
			public static WebElement stockReportByTag_Filter_Customize_ItemExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_579_0']/li[3]/a")
			public static WebElement abcAnalysis_Filter_Customize_ItemExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_580_0']/li[3]/a")
			public static WebElement stockAnalysisByBatch_Filter_Customize_ItemExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_582_0']/li[3]/a")
			public static WebElement stockAgeingAnalysis_Filter_Customize_ItemExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_622_0']/li[3]/a")
			public static WebElement ageingAnalysisByBatch_Filter_Customize_ItemExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_584_0']/li[3]/a")
			public static WebElement fastMovingItems_Filter_Customize_ItemExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_585_0']/li[3]/a")
			public static WebElement slowMovingItems_Filter_Customize_ItemExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_586_0']/li[3]/a")
			public static WebElement peakAndLowBalancesItems_Filter_Customize_ItemExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_631_0']/li[3]/a")
			public static WebElement bestSellingItems_Filter_Customize_ItemExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_649_0']/li[3]/a")
			public static WebElement stockTransferRegister_Filter_Customize_ItemExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_670_0']/li[3]/a")
			public static WebElement transTypeWiseStock_Filter_Customize_ItemExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_680_0']/li[3]/a")
			public static WebElement actualConsumptionReport_Filter_Customize_ItemExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_645_0']/li[4]/a")
			public static WebElement stockBalanceByWarehouse_Filter_Customize_WarehouseExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_552_0']/li[3]/a")
			public static WebElement osr_Filter_Customize_WarehouseExpandBtn;

			@FindBy(xpath="//ul[@id='FilterFields_557_0']/li[4]/a")
			public static WebElement sStatment_Filter_Customize_WarehouseExpandBtn;

			@FindBy(xpath="//*[@id='FilterFields_551_0']/ul[4]/li[1]/div/label/input")
			public static WebElement reports_Filter_Customize_WarehouseNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_645_0']/ul[4]/li[1]/div/label/input")
			public static WebElement stockBalanceByWarehouse_Filter_Customize_WarehouseNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_576_0']/ul[3]/li[1]/div/label/input")
			public static WebElement multiLevel_Filter_Customize_ItemNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_584_0']/ul[3]/li[1]/div/label/input")
			public static WebElement fastMovingItems_Filter_Customize_ItemNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_585_0']/ul[3]/li[1]/div/label/input")
			public static WebElement slowMovingItems_Filter_Customize_ItemNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_586_0']/ul[3]/li[1]/div/label/input")
			public static WebElement peakAndLowBalancesItems_Filter_Customize_ItemNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_631_0']/ul[3]/li[1]/div/label/input")
			public static WebElement bestSellingItems_Filter_Customize_ItemNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_649_0']/ul[3]/li[1]/div/label/input")
			public static WebElement stockTransferRegister_Filter_Customize_ItemNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_670_0']/ul[3]/li[1]/div/label/input")
			public static WebElement transTypeWiseStock_Filter_Customize_ItemNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_680_0']/ul[3]/li[1]/div/label/input")
			public static WebElement actualConsumptionReport_Filter_Customize_ItemNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_622_0']/ul[3]/li[1]/div/label/input")
			public static WebElement ageingAnalysisByBatch_Filter_Customize_ItemNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_577_0']/ul[3]/li[1]/div/label/input")
			public static WebElement virtualStock_Filter_Customize_ItemNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_578_0']/ul[3]/li[1]/div/label/input")
			public static WebElement stockValuation_Filter_Customize_ItemNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_656_0']/ul[3]/li[1]/div/label/input")
			public static WebElement stockReportByTag_Filter_Customize_ItemNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_579_0']/ul[3]/li[1]/div/label/input")
			public static WebElement abcAnalysis_Filter_Customize_ItemNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_575_0']/ul[4]/li[1]/div/label/input")
			public static WebElement sMovement_Filter_Customize_WarehouseNameChkBox;

			@FindBy(xpath="//div[@id='fullScreen']//input[@id='5021']")
			public static WebElement stockAnalysisByBatch_Filter_Customize_ItemNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_582_0']/ul[3]/li[1]/div/label/input")
			public static WebElement stockAgeingAnalysis_Filter_Customize_ItemNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_552_0']/ul[3]/li[1]/div/label/input")
			public static WebElement osr_Filter_Customize_WarehouseNameChkBox;

			@FindBy(xpath="//*[@id='FilterFields_557_0']/ul[4]/li[1]/div/label/input")
			public static WebElement sStatment_Filter_Customize_WarehouseNameChkBox;

			@FindBy(xpath="//button[@class='Fbutton'][contains(text(),'Ok')]")
			public static WebElement  reports_Filter_Customize_OkBtn;

			@FindBy(xpath="//input[@id='FOption_551_0_DefaultFilter_0']")
			public static WebElement  reports_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_575_0_DefaultFilter_0']")
			public static WebElement  sMovement_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_622_0_DefaultFilter_0']")
			public static WebElement  ageingAnalysisByBatch_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_576_0_DefaultFilter_0']")
			public static WebElement  multiLevel_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_577_0_DefaultFilter_0']")
			public static WebElement  virtualStock_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_578_0_DefaultFilter_0']")
			public static WebElement  stockValuation_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_656_0_DefaultFilter_0']")
			public static WebElement  stockReportByTag_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_579_0_DefaultFilter_0']")
			public static WebElement  abcAnalysis_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_580_0_DefaultFilter_0']")
			public static WebElement  stockAnalysisByBatch_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_582_0_DefaultFilter_0']")
			public static WebElement  stockAgeingAnalysis_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_552_0_DefaultFilter_0']")
			public static WebElement  osr_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_557_0_DefaultFilter_0']")
			public static WebElement  sStatment_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_584_0_DefaultFilter_0']")
			public static WebElement fastMovingItems_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_585_0_DefaultFilter_0']")
			public static WebElement slowMovingItems_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_586_0_DefaultFilter_0']")
			public static WebElement peakAndLowBalancesItems_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_631_0_DefaultFilter_0']")
			public static WebElement bestSellingItems_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_649_0_DefaultFilter_0']")
			public static WebElement stockTransferRegister_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_645_0_DefaultFilter_0']")
			public static WebElement  stockBalanceByWarehouse_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_670_0_DefaultFilter_0']")
			public static WebElement  transTypeWiseStock_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='FOption_680_0_DefaultFilter_0']")
			public static WebElement actualConsumptionReport_DefaultFilterTxt;

			@FindBy(xpath="//input[@id='chkSaveFilter']")
			public static WebElement  report_FilterSaveFilterPermanentlyChkBox;

			@FindBy(xpath="//span[@id='filterRefresh']")
			public static WebElement  report_Filter_RefreshBtn;

			@FindBy(xpath="//span[@id='filter_Okbtn_']")
			public static WebElement  report_FilterOkBtn;

			@FindBy(xpath="//i[contains(@class,'icon icon-close')]")
			public static WebElement  report_FilterCancelBtn;

			@FindBy(xpath="//span[@id='a']")
			public static WebElement  report_Filter_FilterBtn;

			@FindBy(xpath="//span[@id='analyzeIcon']")
			public static WebElement report_AnalyzeBtn;

			@FindBy(xpath="//span[@id='CrossrefrenceIcon']")
			public static WebElement report_CrossReferenceBtn;

			@FindBy(xpath="//span[contains(text(),'Options')]")
			public static WebElement report_OptionsBtn;

			@FindBy(xpath="//div[@id='dvoptions']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
			public static WebElement report_OptionsDownBtn;

			@FindBy(xpath="//span[@id='reportClose_']")
			public static WebElement report_CloseBtn;

			@FindBy(xpath="//button[@id='frstPage_']")
			public static WebElement report_FirstBtn;

			@FindBy(xpath="//button[@id='prvPage_']")
			public static WebElement report_PreviousBtn;

			@FindBy(xpath="//button[@id='pgnumber_']")
			public static WebElement report_PageNoBtn;

			@FindBy(xpath="//button[@id='nxtPage_']")
			public static WebElement report_NextBtn;

			@FindBy(xpath="//button[@id='lstPage_']")
			public static WebElement report_LastBtn;

			@FindBy(xpath="//input[@id='txtSearchReport']")
			public static WebElement report_SearchTxt;



			@FindBy(xpath="//*[@id='trRender_1']/td[2]")
			public static WebElement sl_1stRow1stCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[3]")
			public static WebElement sl_1stRow2ndCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[4]")
			public static WebElement sl_1stRow3rdCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[5]")
			public static WebElement sl_1stRow4thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[6]")
			public static WebElement sl_1stRow5thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[7]")
			public static WebElement sl_1stRow6thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[8]")
			public static WebElement sl_1stRow7thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[9]")
			public static WebElement sl_1stRow8thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[10]")
			public static WebElement sl_1stRow9thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[11]")
			public static WebElement sl_1stRow10thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[12]")
			public static WebElement sl_1stRow11thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[13]")
			public static WebElement sl_1stRow12thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[14]")
			public static WebElement sl_1stRow13thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[15]")
			public static WebElement sl_1stRow14thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[16]")
			public static WebElement sl_1stRow15thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[17]")
			public static WebElement sl_1stRow16thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[18]")
			public static WebElement sl_1stRow17thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[19]")
			public static WebElement sl_1stRow18thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[20]")
			public static WebElement sl_1stRow19thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[21]")
			public static WebElement sl_1stRow20thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[22]")
			public static WebElement sl_1stRow21thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[23]")
			public static WebElement sl_1stRow22thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[24]")
			public static WebElement sl_1stRow23thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[25]")
			public static WebElement sl_1stRow24thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[26]")
			public static WebElement sl_1stRow25thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[27]")
			public static WebElement sl_1stRow26thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[28]")
			public static WebElement sl_1stRow27thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[29]")
			public static WebElement sl_1stRow28thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[30]")
			public static WebElement sl_1stRow29thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[31]")
			public static WebElement sl_1stRow30thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[32]")
			public static WebElement sl_1stRow31thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[33]")
			public static WebElement sl_1stRow32thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[34]")
			public static WebElement sl_1stRow33thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[35]")
			public static WebElement sl_1stRow34thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[36]")
			public static WebElement sl_1stRow35thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[37]")
			public static WebElement sl_1stRow36thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[38]")
			public static WebElement sl_1stRow37thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[39]")
			public static WebElement sl_1stRow38thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[40]")
			public static WebElement sl_1stRow39thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[41]")
			public static WebElement sl_1stRow40thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[42]")
			public static WebElement sl_1stRow41thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[43]")
			public static WebElement sl_1stRow42thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[44]")
			public static WebElement sl_1stRow43thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[45]")
			public static WebElement sl_1stRow44thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[46]")
			public static WebElement sl_1stRow45thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[47]")
			public static WebElement sl_1stRow46thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[48]")
			public static WebElement sl_1stRow47thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[49]")
			public static WebElement sl_1stRow48thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[50]")
			public static WebElement sl_1stRow49thCol;

			@FindBy(xpath="//*[@id='trRender_1']/td[51]")
			public static WebElement sl_1stRow50thCol;


			@FindBy(xpath="//*[@id='trRender_2']/td[2]")
			public static WebElement sl_2ndRow1stCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[3]")
			public static WebElement sl_2ndRow2ndCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[4]")
			public static WebElement sl_2ndRow3rdCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[5]")
			public static WebElement sl_2ndRow4thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[6]")
			public static WebElement sl_2ndRow5thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[7]")
			public static WebElement sl_2ndRow6thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[8]")
			public static WebElement sl_2ndRow7thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[9]")
			public static WebElement sl_2ndRow8thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[10]")
			public static WebElement sl_2ndRow9thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[11]")
			public static WebElement sl_2ndRow10thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[12]")
			public static WebElement sl_2ndRow11thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[13]")
			public static WebElement sl_2ndRow12thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[14]")
			public static WebElement sl_2ndRow13thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[15]")
			public static WebElement sl_2ndRow14thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[16]")
			public static WebElement sl_2ndRow15thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[17]")
			public static WebElement sl_2ndRow16thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[18]")
			public static WebElement sl_2ndRow17thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[19]")
			public static WebElement sl_2ndRow18thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[20]")
			public static WebElement sl_2ndRow19thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[21]")
			public static WebElement sl_2ndRow20thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[22]")
			public static WebElement sl_2ndRow21thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[23]")
			public static WebElement sl_2ndRow22thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[24]")
			public static WebElement sl_2ndRow23thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[25]")
			public static WebElement sl_2ndRow24thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[26]")
			public static WebElement sl_2ndRow25thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[27]")
			public static WebElement sl_2ndRow26thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[28]")
			public static WebElement sl_2ndRow27thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[29]")
			public static WebElement sl_2ndRow28thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[30]")
			public static WebElement sl_2ndRow29thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[31]")
			public static WebElement sl_2ndRow30thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[32]")
			public static WebElement sl_2ndRow31thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[33]")
			public static WebElement sl_2ndRow32thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[34]")
			public static WebElement sl_2ndRow33thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[35]")
			public static WebElement sl_2ndRow34thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[36]")
			public static WebElement sl_2ndRow35thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[37]")
			public static WebElement sl_2ndRow36thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[38]")
			public static WebElement sl_2ndRow37thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[39]")
			public static WebElement sl_2ndRow38thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[40]")
			public static WebElement sl_2ndRow39thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[41]")
			public static WebElement sl_2ndRow40thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[42]")
			public static WebElement sl_2ndRow41thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[43]")
			public static WebElement sl_2ndRow42thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[44]")
			public static WebElement sl_2ndRow43thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[45]")
			public static WebElement sl_2ndRow44thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[46]")
			public static WebElement sl_2ndRow45thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[47]")
			public static WebElement sl_2ndRow46thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[48]")
			public static WebElement sl_2ndRow47thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[49]")
			public static WebElement sl_2ndRow48thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[50]")
			public static WebElement sl_2ndRow49thCol;

			@FindBy(xpath="//*[@id='trRender_2']/td[51]")
			public static WebElement sl_2ndRow50thCol;





			@FindBy(xpath="//*[@id='trRender_3']/td[2]")
			public static WebElement sl_3rdRow1stCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[3]")
			public static WebElement sl_3rdRow2ndCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[4]")
			public static WebElement sl_3rdRow3rdCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[5]")
			public static WebElement sl_3rdRow4thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[6]")
			public static WebElement sl_3rdRow5thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[7]")
			public static WebElement sl_3rdRow6thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[8]")
			public static WebElement sl_3rdRow7thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[9]")
			public static WebElement sl_3rdRow8thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[10]")
			public static WebElement sl_3rdRow9thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[11]")
			public static WebElement sl_3rdRow10thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[12]")
			public static WebElement sl_3rdRow11thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[13]")
			public static WebElement sl_3rdRow12thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[14]")
			public static WebElement sl_3rdRow13thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[15]")
			public static WebElement sl_3rdRow14thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[16]")
			public static WebElement sl_3rdRow15thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[17]")
			public static WebElement sl_3rdRow16thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[18]")
			public static WebElement sl_3rdRow17thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[19]")
			public static WebElement sl_3rdRow18thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[20]")
			public static WebElement sl_3rdRow19thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[21]")
			public static WebElement sl_3rdRow20thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[22]")
			public static WebElement sl_3rdRow21thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[23]")
			public static WebElement sl_3rdRow22thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[24]")
			public static WebElement sl_3rdRow23thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[25]")
			public static WebElement sl_3rdRow24thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[26]")
			public static WebElement sl_3rdRow25thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[27]")
			public static WebElement sl_3rdRow26thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[28]")
			public static WebElement sl_3rdRow27thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[29]")
			public static WebElement sl_3rdRow28thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[30]")
			public static WebElement sl_3rdRow29thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[31]")
			public static WebElement sl_3rdRow30thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[32]")
			public static WebElement sl_3rdRow31thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[33]")
			public static WebElement sl_3rdRow32thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[34]")
			public static WebElement sl_3rdRow33thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[35]")
			public static WebElement sl_3rdRow34thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[36]")
			public static WebElement sl_3rdRow35thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[37]")
			public static WebElement sl_3rdRow36thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[38]")
			public static WebElement sl_3rdRow37thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[39]")
			public static WebElement sl_3rdRow38thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[40]")
			public static WebElement sl_3rdRow39thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[41]")
			public static WebElement sl_3rdRow40thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[42]")
			public static WebElement sl_3rdRow41thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[43]")
			public static WebElement sl_3rdRow42thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[44]")
			public static WebElement sl_3rdRow43thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[45]")
			public static WebElement sl_3rdRow44thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[46]")
			public static WebElement sl_3rdRow45thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[47]")
			public static WebElement sl_3rdRow46thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[48]")
			public static WebElement sl_3rdRow47thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[49]")
			public static WebElement sl_3rdRow48thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[50]")
			public static WebElement sl_3rdRow49thCol;

			@FindBy(xpath="//*[@id='trRender_3']/td[51]")
			public static WebElement sl_3rdRow50thCol;





			@FindBy(xpath="//*[@id='trRender_4']/td[2]")
			public static WebElement sl_4thRow1stCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[3]")
			public static WebElement sl_4thRow2ndCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[4]")
			public static WebElement sl_4thRow3rdCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[5]")
			public static WebElement sl_4thRow4thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[6]")
			public static WebElement sl_4thRow5thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[7]")
			public static WebElement sl_4thRow6thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[8]")
			public static WebElement sl_4thRow7thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[9]")
			public static WebElement sl_4thRow8thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[10]")
			public static WebElement sl_4thRow9thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[11]")
			public static WebElement sl_4thRow10thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[12]")
			public static WebElement sl_4thRow11thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[13]")
			public static WebElement sl_4thRow12thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[14]")
			public static WebElement sl_4thRow13thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[15]")
			public static WebElement sl_4thRow14thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[16]")
			public static WebElement sl_4thRow15thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[17]")
			public static WebElement sl_4thRow16thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[18]")
			public static WebElement sl_4thRow17thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[19]")
			public static WebElement sl_4thRow18thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[20]")
			public static WebElement sl_4thRow19thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[21]")
			public static WebElement sl_4thRow20thCol;


			@FindBy(xpath="//*[@id='trRender_4']/td[22]")
			public static WebElement sl_4thRow21thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[23]")
			public static WebElement sl_4thRow22thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[24]")
			public static WebElement sl_4thRow23thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[25]")
			public static WebElement sl_4thRow24thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[26]")
			public static WebElement sl_4thRow25thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[27]")
			public static WebElement sl_4thRow26thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[28]")
			public static WebElement sl_4thRow27thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[29]")
			public static WebElement sl_4thRow28thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[30]")
			public static WebElement sl_4thRow29thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[31]")
			public static WebElement sl_4thRow30thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[32]")
			public static WebElement sl_4thRow31thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[33]")
			public static WebElement sl_4thRow32thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[34]")
			public static WebElement sl_4thRow33thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[35]")
			public static WebElement sl_4thRow34thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[36]")
			public static WebElement sl_4thRow35thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[37]")
			public static WebElement sl_4thRow36thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[38]")
			public static WebElement sl_4thRow37thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[39]")
			public static WebElement sl_4thRow38thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[40]")
			public static WebElement sl_4thRow39thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[41]")
			public static WebElement sl_4thRow40thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[42]")
			public static WebElement sl_4thRow41thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[43]")
			public static WebElement sl_4thRow42thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[44]")
			public static WebElement sl_4thRow43thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[45]")
			public static WebElement sl_4thRow44thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[46]")
			public static WebElement sl_4thRow45thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[47]")
			public static WebElement sl_4thRow46thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[48]")
			public static WebElement sl_4thRow47thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[49]")
			public static WebElement sl_4thRow48thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[50]")
			public static WebElement sl_4thRow49thCol;

			@FindBy(xpath="//*[@id='trRender_4']/td[51]")
			public static WebElement sl_4thRow50thCol;








			@FindBy(xpath="//*[@id='trRender_5']/td[2]")
			public static WebElement sl_5thRow1stCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[3]")
			public static WebElement sl_5thRow2ndCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[4]")
			public static WebElement sl_5thRow3rdCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[5]")
			public static WebElement sl_5thRow4thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[6]")
			public static WebElement sl_5thRow5thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[7]")
			public static WebElement sl_5thRow6thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[8]")
			public static WebElement sl_5thRow7thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[9]")
			public static WebElement sl_5thRow8thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[10]")
			public static WebElement sl_5thRow9thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[11]")
			public static WebElement sl_5thRow10thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[12]")
			public static WebElement sl_5thRow11thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[13]")
			public static WebElement sl_5thRow12thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[14]")
			public static WebElement sl_5thRow13thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[15]")
			public static WebElement sl_5thRow14thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[16]")
			public static WebElement sl_5thRow15thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[17]")
			public static WebElement sl_5thRow16thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[18]")
			public static WebElement sl_5thRow17thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[19]")
			public static WebElement sl_5thRow18thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[20]")
			public static WebElement sl_5thRow19thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[21]")
			public static WebElement sl_5thRow20thCol;


			@FindBy(xpath="//*[@id='trRender_5']/td[22]")
			public static WebElement sl_5thRow21thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[23]")
			public static WebElement sl_5thRow22thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[24]")
			public static WebElement sl_5thRow23thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[25]")
			public static WebElement sl_5thRow24thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[26]")
			public static WebElement sl_5thRow25thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[27]")
			public static WebElement sl_5thRow26thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[28]")
			public static WebElement sl_5thRow27thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[29]")
			public static WebElement sl_5thRow28thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[30]")
			public static WebElement sl_5thRow29thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[31]")
			public static WebElement sl_5thRow30thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[32]")
			public static WebElement sl_5thRow31thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[33]")
			public static WebElement sl_5thRow32thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[34]")
			public static WebElement sl_5thRow33thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[35]")
			public static WebElement sl_5thRow34thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[36]")
			public static WebElement sl_5thRow35thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[37]")
			public static WebElement sl_5thRow36thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[38]")
			public static WebElement sl_5thRow37thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[39]")
			public static WebElement sl_5thRow38thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[40]")
			public static WebElement sl_5thRow39thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[41]")
			public static WebElement sl_5thRow40thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[42]")
			public static WebElement sl_5thRow41thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[43]")
			public static WebElement sl_5thRow42thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[44]")
			public static WebElement sl_5thRow43thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[45]")
			public static WebElement sl_5thRow44thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[46]")
			public static WebElement sl_5thRow45thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[47]")
			public static WebElement sl_5thRow46thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[48]")
			public static WebElement sl_5thRow47thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[49]")
			public static WebElement sl_5thRow48thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[50]")
			public static WebElement sl_5thRow49thCol;

			@FindBy(xpath="//*[@id='trRender_5']/td[51]")
			public static WebElement sl_5thRow50thCol;






			@FindBy(xpath="//*[@id='trRender_6']/td[2]")
			public static WebElement sl_6thRow1stCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[3]")
			public static WebElement sl_6thRow2ndCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[4]")
			public static WebElement sl_6thRow3rdCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[5]")
			public static WebElement sl_6thRow4thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[6]")
			public static WebElement sl_6thRow5thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[7]")
			public static WebElement sl_6thRow6thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[8]")
			public static WebElement sl_6thRow7thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[9]")
			public static WebElement sl_6thRow8thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[10]")
			public static WebElement sl_6thRow9thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[11]")
			public static WebElement sl_6thRow10thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[12]")
			public static WebElement sl_6thRow11thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[13]")
			public static WebElement sl_6thRow12thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[14]")
			public static WebElement sl_6thRow13thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[15]")
			public static WebElement sl_6thRow14thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[16]")
			public static WebElement sl_6thRow15thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[17]")
			public static WebElement sl_6thRow16thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[18]")
			public static WebElement sl_6thRow17thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[19]")
			public static WebElement sl_6thRow18thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[20]")
			public static WebElement sl_6thRow19thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[21]")
			public static WebElement sl_6thRow20thCol;


			@FindBy(xpath="//*[@id='trRender_6']/td[22]")
			public static WebElement sl_6thRow21thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[23]")
			public static WebElement sl_6thRow22thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[24]")
			public static WebElement sl_6thRow23thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[25]")
			public static WebElement sl_6thRow24thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[26]")
			public static WebElement sl_6thRow25thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[27]")
			public static WebElement sl_6thRow26thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[28]")
			public static WebElement sl_6thRow27thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[29]")
			public static WebElement sl_6thRow28thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[30]")
			public static WebElement sl_6thRow29thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[31]")
			public static WebElement sl_6thRow30thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[32]")
			public static WebElement sl_6thRow31thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[33]")
			public static WebElement sl_6thRow32thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[34]")
			public static WebElement sl_6thRow33thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[35]")
			public static WebElement sl_6thRow34thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[36]")
			public static WebElement sl_6thRow35thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[37]")
			public static WebElement sl_6thRow36thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[38]")
			public static WebElement sl_6thRow37thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[39]")
			public static WebElement sl_6thRow38thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[40]")
			public static WebElement sl_6thRow39thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[41]")
			public static WebElement sl_6thRow40thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[42]")
			public static WebElement sl_6thRow41thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[43]")
			public static WebElement sl_6thRow42thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[44]")
			public static WebElement sl_6thRow43thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[45]")
			public static WebElement sl_6thRow44thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[46]")
			public static WebElement sl_6thRow45thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[47]")
			public static WebElement sl_6thRow46thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[48]")
			public static WebElement sl_6thRow47thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[49]")
			public static WebElement sl_6thRow48thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[50]")
			public static WebElement sl_6thRow49thCol;

			@FindBy(xpath="//*[@id='trRender_6']/td[51]")
			public static WebElement sl_6thRow50thCol;








			@FindBy(xpath="//*[@id='trRender_7']/td[2]")
			public static WebElement sl_7thRow1stCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[3]")
			public static WebElement sl_7thRow2ndCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[4]")
			public static WebElement sl_7thRow3rdCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[5]")
			public static WebElement sl_7thRow4thCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[6]")
			public static WebElement sl_7thRow5thCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[7]")
			public static WebElement sl_7thRow6thCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[8]")
			public static WebElement sl_7thRow7thCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[9]")
			public static WebElement sl_7thRow8thCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[10]")
			public static WebElement sl_7thRow9thCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[11]")
			public static WebElement sl_7thRow10thCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[12]")
			public static WebElement sl_7thRow11thCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[13]")
			public static WebElement sl_7thRow12thCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[14]")
			public static WebElement sl_7thRow13thCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[15]")
			public static WebElement sl_7thRow14thCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[16]")
			public static WebElement sl_7thRow15thCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[17]")
			public static WebElement sl_7thRow16thCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[18]")
			public static WebElement sl_7thRow17thCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[19]")
			public static WebElement sl_7thRow18thCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[20]")
			public static WebElement sl_7thRow19thCol;

			@FindBy(xpath="//*[@id='trRender_7']/td[21]")
			public static WebElement sl_7thRow20thCol;





			@FindBy(xpath="//*[@id='trRender_8']/td[2]")
			public static WebElement sl_8thRow1stCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[3]")
			public static WebElement sl_8thRow2ndCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[4]")
			public static WebElement sl_8thRow3rdCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[5]")
			public static WebElement sl_8thRow4thCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[6]")
			public static WebElement sl_8thRow5thCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[7]")
			public static WebElement sl_8thRow6thCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[8]")
			public static WebElement sl_8thRow7thCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[9]")
			public static WebElement sl_8thRow8thCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[10]")
			public static WebElement sl_8thRow9thCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[11]")
			public static WebElement sl_8thRow10thCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[12]")
			public static WebElement sl_8thRow11thCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[13]")
			public static WebElement sl_8thRow12thCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[14]")
			public static WebElement sl_8thRow13thCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[15]")
			public static WebElement sl_8thRow14thCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[16]")
			public static WebElement sl_8thRow15thCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[17]")
			public static WebElement sl_8thRow16thCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[18]")
			public static WebElement sl_8thRow17thCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[19]")
			public static WebElement sl_8thRow18thCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[20]")
			public static WebElement sl_8thRow19thCol;

			@FindBy(xpath="//*[@id='trRender_8']/td[21]")
			public static WebElement sl_8thRow20thCol;



			@FindBy(xpath="//*[@id='trRender_9']/td[2]")
			public static WebElement sl_9thRow1stCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[3]")
			public static WebElement sl_9thRow2ndCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[4]")
			public static WebElement sl_9thRow3rdCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[5]")
			public static WebElement sl_9thRow4thCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[6]")
			public static WebElement sl_9thRow5thCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[7]")
			public static WebElement sl_9thRow6thCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[8]")
			public static WebElement sl_9thRow7thCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[9]")
			public static WebElement sl_9thRow8thCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[10]")
			public static WebElement sl_9thRow9thCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[11]")
			public static WebElement sl_9thRow10thCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[12]")
			public static WebElement sl_9thRow11thCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[13]")
			public static WebElement sl_9thRow12thCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[14]")
			public static WebElement sl_9thRow13thCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[15]")
			public static WebElement sl_9thRow14thCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[16]")
			public static WebElement sl_9thRow15thCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[17]")
			public static WebElement sl_9thRow16thCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[18]")
			public static WebElement sl_9thRow17thCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[19]")
			public static WebElement sl_9thRow18thCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[20]")
			public static WebElement sl_9thRow19thCol;

			@FindBy(xpath="//*[@id='trRender_9']/td[21]")
			public static WebElement sl_9thRow20thCol;



			@FindBy(xpath="//*[@id='trRender_10']/td[2]")
			public static WebElement sl_10thRow1stCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[3]")
			public static WebElement sl_10thRow2ndCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[4]")
			public static WebElement sl_10thRow3rdCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[5]")
			public static WebElement sl_10thRow4thCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[6]")
			public static WebElement sl_10thRow5thCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[7]")
			public static WebElement sl_10thRow6thCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[8]")
			public static WebElement sl_10thRow7thCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[9]")
			public static WebElement sl_10thRow8thCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[10]")
			public static WebElement sl_10thRow9thCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[11]")
			public static WebElement sl_10thRow10thCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[12]")
			public static WebElement sl_10thRow11thCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[13]")
			public static WebElement sl_10thRow12thCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[14]")
			public static WebElement sl_10thRow13thCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[15]")
			public static WebElement sl_10thRow14thCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[16]")
			public static WebElement sl_10thRow15thCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[17]")
			public static WebElement sl_10thRow16thCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[18]")
			public static WebElement sl_10thRow17thCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[19]")
			public static WebElement sl_10thRow18thCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[20]")
			public static WebElement sl_10thRow19thCol;

			@FindBy(xpath="//*[@id='trRender_10']/td[21]")
			public static WebElement sl_10thRow20thCol;


			@FindBy(xpath="//*[@id='trRender_11']/td[2]")
			public static WebElement sl_11thRow1stCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[3]")
			public static WebElement sl_11thRow2ndCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[4]")
			public static WebElement sl_11thRow3rdCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[5]")
			public static WebElement sl_11thRow4thCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[6]")
			public static WebElement sl_11thRow5thCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[7]")
			public static WebElement sl_11thRow6thCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[8]")
			public static WebElement sl_11thRow7thCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[9]")
			public static WebElement sl_11thRow8thCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[10]")
			public static WebElement sl_11thRow9thCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[11]")
			public static WebElement sl_11thRow10thCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[12]")
			public static WebElement sl_11thRow11thCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[13]")
			public static WebElement sl_11thRow12thCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[14]")
			public static WebElement sl_11thRow13thCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[15]")
			public static WebElement sl_11thRow14thCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[16]")
			public static WebElement sl_11thRow15thCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[17]")
			public static WebElement sl_11thRow16thCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[18]")
			public static WebElement sl_11thRow17thCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[19]")
			public static WebElement sl_11thRow18thCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[20]")
			public static WebElement sl_11thRow19thCol;

			@FindBy(xpath="//*[@id='trRender_11']/td[21]")
			public static WebElement sl_11thRow20thCol;


			@FindBy(xpath="//*[@id='trRender_12']/td[2]")
			public static WebElement sl_12thRow1stCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[3]")
			public static WebElement sl_12thRow2ndCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[4]")
			public static WebElement sl_12thRow3rdCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[5]")
			public static WebElement sl_12thRow4thCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[6]")
			public static WebElement sl_12thRow5thCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[7]")
			public static WebElement sl_12thRow6thCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[8]")
			public static WebElement sl_12thRow7thCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[9]")
			public static WebElement sl_12thRow8thCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[10]")
			public static WebElement sl_12thRow9thCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[11]")
			public static WebElement sl_12thRow10thCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[12]")
			public static WebElement sl_12thRow11thCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[13]")
			public static WebElement sl_12thRow12thCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[14]")
			public static WebElement sl_12thRow13thCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[15]")
			public static WebElement sl_12thRow14thCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[16]")
			public static WebElement sl_12thRow15thCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[17]")
			public static WebElement sl_12thRow16thCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[18]")
			public static WebElement sl_12thRow17thCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[19]")
			public static WebElement sl_12thRow18thCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[20]")
			public static WebElement sl_12thRow19thCol;

			@FindBy(xpath="//*[@id='trRender_12']/td[21]")
			public static WebElement sl_12thRow20thCol;



			@FindBy(xpath="//*[@id='trRender_13']/td[2]")
			public static WebElement sl_13thRow1stCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[3]")
			public static WebElement sl_13thRow2ndCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[4]")
			public static WebElement sl_13thRow3rdCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[5]")
			public static WebElement sl_13thRow4thCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[6]")
			public static WebElement sl_13thRow5thCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[7]")
			public static WebElement sl_13thRow6thCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[8]")
			public static WebElement sl_13thRow7thCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[9]")
			public static WebElement sl_13thRow8thCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[10]")
			public static WebElement sl_13thRow9thCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[11]")
			public static WebElement sl_13thRow10thCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[12]")
			public static WebElement sl_13thRow11thCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[13]")
			public static WebElement sl_13thRow12thCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[14]")
			public static WebElement sl_13thRow13thCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[15]")
			public static WebElement sl_13thRow14thCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[16]")
			public static WebElement sl_13thRow15thCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[17]")
			public static WebElement sl_13thRow16thCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[18]")
			public static WebElement sl_13thRow17thCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[19]")
			public static WebElement sl_13thRow18thCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[20]")
			public static WebElement sl_13thRow19thCol;

			@FindBy(xpath="//*[@id='trRender_13']/td[21]")
			public static WebElement sl_13thRow20thCol;



			@FindBy(xpath="//*[@id='trRender_14']/td[2]")
			public static WebElement sl_14thRow1stCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[3]")
			public static WebElement sl_14thRow2ndCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[4]")
			public static WebElement sl_14thRow3rdCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[5]")
			public static WebElement sl_14thRow4thCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[6]")
			public static WebElement sl_14thRow5thCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[7]")
			public static WebElement sl_14thRow6thCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[8]")
			public static WebElement sl_14thRow7thCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[9]")
			public static WebElement sl_14thRow8thCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[10]")
			public static WebElement sl_14thRow9thCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[11]")
			public static WebElement sl_14thRow10thCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[12]")
			public static WebElement sl_14thRow11thCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[13]")
			public static WebElement sl_14thRow12thCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[14]")
			public static WebElement sl_14thRow13thCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[15]")
			public static WebElement sl_14thRow14thCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[16]")
			public static WebElement sl_14thRow15thCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[17]")
			public static WebElement sl_14thRow16thCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[18]")
			public static WebElement sl_14thRow17thCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[19]")
			public static WebElement sl_14thRow18thCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[20]")
			public static WebElement sl_14thRow19thCol;

			@FindBy(xpath="//*[@id='trRender_14']/td[21]")
			public static WebElement sl_14thRow20thCol;



			/////////////////////////////////

			// Opening Stock Register Elements

			@FindBy (xpath="//li[@id='154']/a[2]")
			public static WebElement osr_ItemsGroupBtn;

			@FindBy(xpath="//select[@id='DateOptions_']")
			public static WebElement osr_dateOptionDropdown;

			@FindBy(xpath="//input[@id='id_starting_date_']")
			public static WebElement osr_StartDateTxt;

			@FindBy(xpath="//td[@id='id_starting_date__input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
			public static WebElement osr_startdateCalanderBtn;

			@FindBy(xpath="//input[@id='id_ending_date_']")
			public static WebElement osr_EndDateTxt;

			@FindBy(xpath="//td[@id='id_ending_date__input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
			public static WebElement osr_EndDateCalanderBtn;

			@FindBy(xpath="//select[@id='RITLayout_']")
			public static WebElement osr_layoutDropdown;

			@FindBy(xpath="//select[@id='RITOutput_']")
			public static WebElement osr_outputDropdown;

			@FindBy(xpath="//i[@class='icon-font6 icon-schedule']")
			public static WebElement osr_ScheduleBtn;

			@FindBy(xpath="//i[@class='icon-font6 icon-custamize']")
			public static WebElement osr_CustomizeBtn;

			@FindBy(xpath="//i[@class='icon-font6 icon-filter']")
			public static WebElement osr_FilterBtn;

			@FindBy(xpath="//i[@class='icon-font6 icon-ok']")
			public static WebElement osr_OkBtn;

			@FindBy(xpath="//i[@class='icon-font6 icon-close']")
			public static WebElement osr_CloseBtn;

			///////

			@FindBy(xpath="//input[@id='id_body_37']")
			public static WebElement enter_Expirydate;

			@FindBy(xpath="//input[@id='id_body_36']")
			public static WebElement enter_MfgDate;

			@FindBy(xpath="//input[@id='id_body_108']")
			public static WebElement enter_BatchRate;

			@FindBy(xpath="//input[@id='id_body_109']")
			public static WebElement enter_BatchRateValue1;

			@FindBy(xpath="//input[@id='id_body_110']")
			public static WebElement enter_BatchRateValue2;


			////////////////////////

			// Finance Reports Almost Common Some Fields Are Added Below

			@FindBy (xpath="//li[@id='18']/a[1]")
			public static WebElement assetsExpandOrCollepseBtn;

			@FindBy(xpath="//li[@id='18']/a[2]")
			public static WebElement assets;

			@FindBy(xpath="//li[@id='17']/a[2]")
			public static WebElement fixedAssets;

			@FindBy (xpath="//li[@id='23']/a[1]")
			public static WebElement currentAssetsExpandOrCollepseBtn;	

			@FindBy(xpath="//li[@id='23']/a[2]")
			public static WebElement currentAssets;

			@FindBy(xpath="//li[@id='8']/a[2]")
			public static WebElement cashAndBank;

			@FindBy(xpath="//li[@id='13']/a[2]")
			public static WebElement inventories;

			@FindBy(xpath="//li[@id='22']/a[2]")
			public static WebElement accountsReceivable;

			@FindBy (xpath="//li[@id='83']/a[2]")
			public static WebElement customerUpdateGroup;

			@FindBy(xpath="//li[@id='72']/a[2]")
			public static WebElement investments;

			@FindBy (xpath="//li[@id='25']/a[1]")
			public static WebElement expensesExpensionOrCollepseBtn;

			@FindBy(xpath="//li[@id='25']/a[2]")
			public static WebElement expenses;

			@FindBy(xpath="//li[@id='24']/a[2]")
			public static WebElement directExpenses;

			@FindBy (xpath="//li[@id='73']/a[1]")
			public static WebElement indirectExpensesExpandOrCollepseBtn; 

			@FindBy(xpath="//li[@id='73']/a[2]")
			public static WebElement indirectExpenses;

			@FindBy(xpath="//li[@id='54']/a[2]")
			public static WebElement administrativeExpenses;

			@FindBy(xpath="//li[@id='60']/a[2]")
			public static WebElement employeeBenefits;

			@FindBy(xpath="//li[@id='64']/a[2]")
			public static WebElement financialCharges;

			@FindBy(xpath="//li[@id='69']/a[2]")
			public static WebElement gainAndLoss;

			@FindBy(xpath="//li[@id='26']/a[2]")
			public static WebElement controlAccounts;

			@FindBy (xpath="//li[@id='29']/a[1]")
			public static WebElement revenueExpandOrCollepseBtn;

			@FindBy(xpath="//li[@id='29']/a[2]")
			public static WebElement revenue;

			@FindBy (xpath="//li[@id='28']/a[2]")
			public static WebElement sales;

			@FindBy (xpath="//li[@id='33']/a[1]")
			public static WebElement equitiesExpandOrCollepseBtn;

			@FindBy(xpath="//li[@id='33']/a[2]")
			public static WebElement equities;

			@FindBy (xpath="//li[@id='32']/a[2]")
			public static WebElement capital;

			@FindBy (xpath="//li[@id='39']/a[1]")
			public static WebElement liabilitiesExpandOrCollepseBtn;

			@FindBy (xpath="//li[@id='39']/a[2]")
			public static WebElement liabilities;

			@FindBy (xpath="//li[@id='38']/a[1]")
			public static WebElement loansAndBorrowingsExpandOrCollepseBtn;

			@FindBy (xpath="//li[@id='38']/a[2]")
			public static WebElement loansAndBorrowings;

			@FindBy (xpath="//li[@id='37']/a[2]")
			public static WebElement loans;

			@FindBy (xpath="//li[@id='42']/a[2]")
			public static WebElement accruedLiabilities;

			@FindBy (xpath="//li[@id='45']/a[2]")
			public static WebElement tradePayable;

			@FindBy (xpath="//li[@id='48']/a[2]")
			public static WebElement provisions;

			/////////////////////////////////////////////////////////////////////////


			@FindBy (xpath="//input[@id='txtSerialNo']")
			public static WebElement RMAPopupSerialNumberTxtField;

			@FindBy (xpath="//input[@id='txtQuantity']")
			public static WebElement RMAPopupQuantityTxtField;

			@FindBy (xpath="//div[@id='img_add']/span")
			public static WebElement RMAPopupAddBtn;

			@FindBy (xpath="//div[@id='Modal_Search_Body']/div[3]/label")
			public static WebElement RMAPopupNumberofItemsLabel;

			@FindBy (xpath="//label[@id='lblItems']")
			public static WebElement RMAPopupNumberOfItems;

			@FindBy (xpath="//th[@id='RMA_Table_control_heading_1']/div")
			public static WebElement RMAPopupTableHeadingRMA;

			@FindBy (xpath="//th[@id='RMA_Table_control_heading_2']/div")
			public static WebElement RMAPopupTableHeadingDocumentNo;

			@FindBy (xpath="//th[@id='RMA_Table_control_heading_3']/div")
			public static WebElement RMAPopupTableHeadingDocumentDate;

			@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[1]/label")
			public static WebElement RMAPopupClearBtn;

			@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[2]/label")
			public static WebElement RMAPopupOkBtn;

			@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[3]/label")
			public static WebElement RMAPopupCancelBtn;

			@FindBy (xpath="//div[@id='Modal_Header']/div[2]/span/i")
			public static WebElement RMAPopupCloseBtn;

			@FindBy (xpath="//td[@id='RMA_Table_col_1-1']")
			public static WebElement RMAPopupTableRow1Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_2-1']")
			public static WebElement RMAPopupTableRow2Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_3-1']")
			public static WebElement RMAPopupTableRow3Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_4-1']")
			public static WebElement RMAPopupTableRow4Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_5-1']")
			public static WebElement RMAPopupTableRow5Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_6-1']")
			public static WebElement RMAPopupTableRow6Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_7-1']")
			public static WebElement RMAPopupTableRow7Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_8-1']")
			public static WebElement RMAPopupTableRow8Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_9-1']")
			public static WebElement RMAPopupTableRow9Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_10-1']")
			public static WebElement RMAPopupTableRow10Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_11-1']")
			public static WebElement RMAPopupTableRow11Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_12-1']")
			public static WebElement RMAPopupTableRow12Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_13-1']")
			public static WebElement RMAPopupTableRow13Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_14-1']")
			public static WebElement RMAPopupTableRow14Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_15-1']")
			public static WebElement RMAPopupTableRow15Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_16-1']")
			public static WebElement RMAPopupTableRow16Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_17-1']")
			public static WebElement RMAPopupTableRow17Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_18-1']")
			public static WebElement RMAPopupTableRow18Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_19-1']")
			public static WebElement RMAPopupTableRow19Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_20-1']")
			public static WebElement RMAPopupTableRow20Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_21-1']")
			public static WebElement RMAPopupTableRow21Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_22-1']")
			public static WebElement RMAPopupTableRow22Column1;

			@FindBy (xpath="//td[@id='RMA_Table_col_1-2']")
			public static WebElement RMAPopupTableRow1Column2;

			@FindBy (xpath="//td[@id='RMA_Table_col_1-3']")
			public static WebElement RMAPopupTableRow1Column3;

			@FindBy (xpath="//td[@id='id_body_38_input_image']/img")
			public static WebElement RMAPopupExpansionBtn;

			@FindBy (xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[3]/span")
			public static WebElement infoSideBarBtn;

			@FindBy (xpath="//tr[@id='trRender_1']/td[4]")
			public static WebElement savedVoucher1stRowVoucherNumer;

			@FindBy (xpath="//span[@id='reportClose']")
			public static WebElement sl_ReportsCloseBtn;

			@FindBy (xpath="//tr[@id='trRender_3']/td[2]")
			public static WebElement stockStatmentReportOpeningBalance;

			@FindBy (xpath="//tr[@id='trRender_3']/td[5]")
			public static WebElement stockStatmentReportBalanceQuantity;

			@FindBy (xpath="//tr[@id='trRender_3']/td[6]")
			public static WebElement stockStatmentReportValue;

			@FindBy (xpath="//tr[@id='trRender_2']/td[2]")
			public static WebElement stockMovementOpeningBalanceQty;

			@FindBy (xpath="//tr[@id='trRender_2']/td[3]")
			public static WebElement stockMovementOpeningBalanceValue;

			@FindBy (xpath="//tr[@id='trRender_2']/td[8]")
			public static WebElement stockMovementBalanceQuantity;

			@FindBy (xpath="//tr[@id='trRender_2']/td[9]")
			public static WebElement stockMovementBalanceStockValue;

			@FindBy (xpath="//tr[@id='trRender_2']/td[10]")
			public static WebElement stockMovementAverageRate;

			@FindBy (xpath="//tr[@id='trRender_3']/td[2]")
			public static WebElement multiLevelStockMovementOpeningBalanceQty;

			@FindBy (xpath="//tr[@id='trRender_3']/td[3]")
			public static WebElement multiLevelStockMovementOpeningBalanceValue;

			@FindBy (xpath="//tr[@id='trRender_3']/td[8]")
			public static WebElement multiLevelStockMovementBalanceQuantity;

			@FindBy (xpath="//tr[@id='trRender_3']/td[9]")
			public static WebElement multiLevelStockMovementBalanceStockValue;

			@FindBy (xpath="//tr[@id='trRender_3']/td[10]")
			public static WebElement multiLevelStockMovementAverageRate;

			@FindBy (xpath="//tr[@id='trRender_2']/td[2]")
			public static WebElement virtualStockAnalysisStockBal;

			@FindBy (xpath="//tr[@id='trRender_2']/td[6]")
			public static WebElement virtualStockAnalysisVirtualStock;

			@FindBy (xpath="//span[contains(text(),'Stock valuation of')]")
			public static WebElement stockValidationReportsLabel;

			@FindBy (xpath="//tr[@id='trRender_2']/td[4]")
			public static WebElement stockValidationQuantity;

			@FindBy (xpath="//tr[@id='trRender_2']/td[5]")
			public static WebElement stockValidationStockValue;

			@FindBy (xpath="//tr[@id='trRender_2']/td[6]")
			public static WebElement stockValidationUnitPrice;


			//Stock Analysis by RMA Reports Table
			//RMA Number
			@FindBy (xpath="//tr[@id='trRender_1']/td[1]")
			public static WebElement rmaNumber1stRow;

			@FindBy (xpath="//tr[@id='trRender_2']/td[1]")
			public static WebElement rmaNumber2ndRow;

			@FindBy (xpath="//tr[@id='trRender_3']/td[1]")
			public static WebElement rmaNumber3rdRow;

			@FindBy (xpath="//tr[@id='trRender_4']/td[1]")
			public static WebElement rmaNumber4thRow;

			@FindBy (xpath="//tr[@id='trRender_5']/td[1]")
			public static WebElement rmaNumber5thRow;

			@FindBy (xpath="//tr[@id='trRender_6']/td[1]")
			public static WebElement rmaNumber6thRow;

			@FindBy (xpath="//tr[@id='trRender_7']/td[1]")
			public static WebElement rmaNumber7thRow;

			@FindBy (xpath="//tr[@id='trRender_8']/td[1]")
			public static WebElement rmaNumber8thRow;

			@FindBy (xpath="//tr[@id='trRender_9']/td[1]")
			public static WebElement rmaNumber9thRow;

			@FindBy (xpath="//tr[@id='trRender_10']/td[1]")
			public static WebElement rmaNumber10thRow;

			@FindBy (xpath="//tr[@id='trRender_11']/td[1]")
			public static WebElement rmaNumber11thRow;

			@FindBy (xpath="//tr[@id='trRender_12']/td[1]")
			public static WebElement rmaNumber12thRow;

			@FindBy (xpath="//tr[@id='trRender_13']/td[1]")
			public static WebElement rmaNumber13thRow;

			@FindBy (xpath="//tr[@id='trRender_14']/td[1]")
			public static WebElement rmaNumber14thRow;

			@FindBy (xpath="//tr[@id='trRender_1']/td[1]")
			public static WebElement rmaNumberPg2_1stRow;

			@FindBy (xpath="//tr[@id='trRender_2']/td[1]")
			public static WebElement rmaNumberPg2_2ndRow;

			@FindBy (xpath="//tr[@id='trRender_3']/td[1]")
			public static WebElement rmaNumberPg2_3rdRow;

			@FindBy (xpath="//tr[@id='trRender_4']/td[1]")
			public static WebElement rmaNumberPg2_4thRow;

			@FindBy (xpath="//tr[@id='trRender_5']/td[1]")
			public static WebElement rmaNumberPg2_5thRow;

			@FindBy (xpath="//tr[@id='trRender_6']/td[1]")
			public static WebElement rmaNumberPg2_6thRow;


			//Quantity
			@FindBy (xpath="//tr[@id='trRender_1']/td[2]")
			public static WebElement quantity1stRow;

			@FindBy (xpath="//tr[@id='trRender_2']/td[2]")
			public static WebElement quantity2ndRow;

			@FindBy (xpath="//tr[@id='trRender_3']/td[2]")
			public static WebElement quantity3rdRow;

			@FindBy (xpath="//tr[@id='trRender_4']/td[2]")
			public static WebElement quantity4thRow;

			@FindBy (xpath="//tr[@id='trRender_5']/td[2]")
			public static WebElement quantity5thRow;

			@FindBy (xpath="//tr[@id='trRender_6']/td[2]")
			public static WebElement quantity6thRow;

			@FindBy (xpath="//tr[@id='trRender_7']/td[2]")
			public static WebElement quantity7thRow;

			@FindBy (xpath="//tr[@id='trRender_8']/td[2]")
			public static WebElement quantity8thRow;

			@FindBy (xpath="//tr[@id='trRender_9']/td[2]")
			public static WebElement quantity9thRow;

			@FindBy (xpath="//tr[@id='trRender_10']/td[2]")
			public static WebElement quantity10thRow;

			@FindBy (xpath="//tr[@id='trRender_11']/td[2]")
			public static WebElement quantity11thRow;

			@FindBy (xpath="//tr[@id='trRender_12']/td[2]")
			public static WebElement quantity12thRow;

			@FindBy (xpath="//tr[@id='trRender_13']/td[2]")
			public static WebElement quantity13thRow;

			@FindBy (xpath="//tr[@id='trRender_14']/td[2]")
			public static WebElement quantity14thRow;

			@FindBy (xpath="//tr[@id='trRender_1']/td[2]")
			public static WebElement quantityPg2_1stRow;

			@FindBy (xpath="//tr[@id='trRender_2']/td[2]")
			public static WebElement quantityPg2_2ndRow;

			@FindBy (xpath="//tr[@id='trRender_3']/td[2]")
			public static WebElement quantityPg2_3rdRow;

			@FindBy (xpath="//tr[@id='trRender_4']/td[2]")
			public static WebElement quantityPg2_4thRow;

			@FindBy (xpath="//tr[@id='trRender_5']/td[2]")
			public static WebElement quantityPg2_5thRow;

			@FindBy (xpath="//tr[@id='trRender_6']/td[2]")
			public static WebElement quantityPg2_6thRow;

			//Rate
			@FindBy (xpath="//tr[@id='trRender_1']/td[3]")
			public static WebElement rate1stRow;

			@FindBy (xpath="//tr[@id='trRender_2']/td[3]")
			public static WebElement rate2ndRow;

			@FindBy (xpath="//tr[@id='trRender_3']/td[3]")
			public static WebElement rate3rdRow;

			@FindBy (xpath="//tr[@id='trRender_4']/td[3]")
			public static WebElement rate4thRow;

			@FindBy (xpath="//tr[@id='trRender_5']/td[3]")
			public static WebElement rate5thRow;

			@FindBy (xpath="//tr[@id='trRender_6']/td[3]")
			public static WebElement rate6thRow;

			@FindBy (xpath="//tr[@id='trRender_7']/td[3]")
			public static WebElement rate7thRow;

			@FindBy (xpath="//tr[@id='trRender_8']/td[3]")
			public static WebElement rate8thRow;

			@FindBy (xpath="//tr[@id='trRender_9']/td[3]")
			public static WebElement rate9thRow;

			@FindBy (xpath="//tr[@id='trRender_10']/td[3]")
			public static WebElement rate10thRow;

			@FindBy (xpath="//tr[@id='trRender_11']/td[3]")
			public static WebElement rate11thRow;

			@FindBy (xpath="//tr[@id='trRender_12']/td[3]")
			public static WebElement rate12thRow;

			@FindBy (xpath="//tr[@id='trRender_13']/td[3]")
			public static WebElement rate13thRow;

			@FindBy (xpath="//tr[@id='trRender_14']/td[3]")
			public static WebElement rate14thRow;

			@FindBy (xpath="//tr[@id='trRender_1']/td[3]")
			public static WebElement ratePg2_1stRow;

			@FindBy (xpath="//tr[@id='trRender_2']/td[3]")
			public static WebElement ratePg2_2ndRow;

			@FindBy (xpath="//tr[@id='trRender_3']/td[3]")
			public static WebElement ratePg2_3rdRow;

			@FindBy (xpath="//tr[@id='trRender_4']/td[3]")
			public static WebElement ratePg2_4thRow;

			@FindBy (xpath="//tr[@id='trRender_5']/td[3]")
			public static WebElement ratePg2_5thRow;

			@FindBy (xpath="//tr[@id='trRender_6']/td[3]")
			public static WebElement ratePg2_6thRow;

			//Stock Value
			@FindBy (xpath="//tr[@id='trRender_1']/td[4]")
			public static WebElement stockValue1stRow;

			@FindBy (xpath="//tr[@id='trRender_2']/td[4]")
			public static WebElement stockValue2ndRow;

			@FindBy (xpath="//tr[@id='trRender_3']/td[4]")
			public static WebElement stockValue3rdRow;

			@FindBy (xpath="//tr[@id='trRender_4']/td[4]")
			public static WebElement stockValue4thRow;

			@FindBy (xpath="//tr[@id='trRender_5']/td[4]")
			public static WebElement stockValue5thRow;

			@FindBy (xpath="//tr[@id='trRender_6']/td[4]")
			public static WebElement stockValue6thRow;

			@FindBy (xpath="//tr[@id='trRender_7']/td[4]")
			public static WebElement stockValue7thRow;

			@FindBy (xpath="//tr[@id='trRender_8']/td[4]")
			public static WebElement stockValue8thRow;

			@FindBy (xpath="//tr[@id='trRender_9']/td[4]")
			public static WebElement stockValue9thRow;

			@FindBy (xpath="//tr[@id='trRender_10']/td[4]")
			public static WebElement stockValue10thRow;

			@FindBy (xpath="//tr[@id='trRender_11']/td[4]")
			public static WebElement stockValue11thRow;

			@FindBy (xpath="//tr[@id='trRender_12']/td[4]")
			public static WebElement stockValue12thRow;

			@FindBy (xpath="//tr[@id='trRender_13']/td[4]")
			public static WebElement stockValue13thRow;

			@FindBy (xpath="//tr[@id='trRender_14']/td[4]")
			public static WebElement stockValue14thRow;

			@FindBy (xpath="//tr[@id='trRender_1']/td[4]")
			public static WebElement stockValuePg2_1stRow;

			@FindBy (xpath="//tr[@id='trRender_2']/td[4]")
			public static WebElement stockValuePg2_2ndRow;

			@FindBy (xpath="//tr[@id='trRender_3']/td[4]")
			public static WebElement stockValuePg2_3rdRow;

			@FindBy (xpath="//tr[@id='trRender_4']/td[4]")
			public static WebElement stockValuePg2_4thRow;

			@FindBy (xpath="//tr[@id='trRender_5']/td[4]")
			public static WebElement stockValuePg2_5thRow;

			@FindBy (xpath="//tr[@id='trRender_6']/td[4]")
			public static WebElement stockValuePg2_6thRow;

			@FindBy (xpath="//button[@id='pgnumber_']")
			public static WebElement rmaReportsCurrentPageBtn;

			@FindBy (xpath="//td[@id='RMA_Table_col_8-4']")
			public static WebElement RMAPopupTable8thRowClrBtn;





			@FindBy (xpath="//input[@id='RITNumber__11']")
			public static WebElement slab1;

			@FindBy (xpath="//input[@id='RITNumber__12']")
			public static WebElement slab2;

			@FindBy (xpath="//input[@id='RITNumber__13']")
			public static WebElement slab3;

			@FindBy (xpath="//input[@id='RITNumber__14']")
			public static WebElement slab4;

			@FindBy (xpath="//input[@id='RITNumber__15']")
			public static WebElement slab5;

			@FindBy (xpath="//input[@id='RITNumber__16']")
			public static WebElement slab6;

			@FindBy (xpath="//input[@id='RITNumber__17']")
			public static WebElement slab7;

			@FindBy (xpath="//select[@id='RITCombobox__8']")
			public static WebElement slabUptoDrpdwn;



			/*@FindBy(xpath="//tr[@id='id_header_2_day_grid']")
					public static WebElement cal;


					@FindBy(xpath="//select[@id='id_header_2_month']")
					public static WebElement month;

					@FindBy(xpath="//select[@id='id_header_2_year']")
					public static WebElement year;
			 */



			@FindBy(xpath="//input[contains(@name,'chkRowCheck')]")
			public static WebElement selectGridFirstRow;


			@FindBy(xpath="//*[@id='lblnchecked']/input")
			public static WebElement selectGridSecondRow;


			@FindBy(xpath="//select[@id='iValuationMethod']")
			public static WebElement validationMethodDropdown;

			@FindBy(xpath="//*[@id='btnMasterEdit']")
			public static WebElement itemEditBtn;

			@FindBy(xpath="//*[@id='btnDelete']")
			public static WebElement itemDeleteBtn;

			@FindBy(xpath="//*[@id='btnClose']")
			public static WebElement itemCloseBtn;

			@FindBy(xpath="//*[@id='toggle_ribbon']")
			public static WebElement itemToggleRibbonBtn;


			

			@FindBy(xpath="//*[@id='btnMasterCopy']")
			public static WebElement itemEditCpoyBtn;

			@FindBy(xpath="//*[@id='btnMasterClone']")
			public static WebElement itemEditCloneBtn;

			@FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[6]")
			public static WebElement itemEditCloseBtn;

			@FindBy(xpath="//*[@id='divBtnGroup0']/div/a")
			public static WebElement ItemEditGeneralBtn;

			@FindBy(xpath="//*[@id='sName']")
			public static WebElement EditGeneralName;

			@FindBy(xpath="//*[@id='sCode']")
			public static WebElement EditGeneralCode;

			@FindBy(xpath="//*[@id='iProductType']")
			public static WebElement EditGeneralItemTypeDropDown;

			@FindBy(xpath="//*[@id='fReorderLevel']")
			public static WebElement EditGeneralReorderLevel;

			@FindBy(xpath="//*[@id='iBinCapacity']")
			public static WebElement EditGeneralBinCapacity;

			@FindBy(xpath="//*[@id='iValuationMethod']")
			public static WebElement EditGeneralValuationMethodDropDown;

			@FindBy(xpath="//*[@id='iCategory']")
			public static WebElement EditGeneralCategoryDropDown;

			@FindBy(xpath="//*[@id='iCategory_input_settings']/span")
			public static WebElement EditGeneralCategorySettingBtn;

			@FindBy(xpath="//*[@id='iProductMake']")
			public static WebElement EditGeneralItemMakeDropDown;

			@FindBy(xpath="//*[@id='Printer']")
			public static WebElement EditGeneralPrint;

			@FindBy(xpath="//*[@id='iAlternateCategory']")
			public static WebElement EditGeneralAlternativeCategoryDropdown;

			@FindBy(xpath="//*[@id='iAlternateCategory_input_settings']/span")
			public static WebElement EditGeneralAlternativeCategoryDropdownSettingBtn;

			@FindBy(xpath="//*[@id='sDescription']")
			public static WebElement EditGeneralDescription;

			@FindBy(xpath="//*[@id='bPerishableItem']")
			public static WebElement EditGeneralPerishableItemCheckBox;

			@FindBy(xpath="//*[@id='iBin']")
			public static WebElement EditGeneralBinDropdown;

			@FindBy(xpath="//*[@id='iBin_input_settings']/span")
			public static WebElement EditGeneralBinDropdownSettingBtn;

			@FindBy(xpath="//*[@id='BrowsepImage']")
			public static WebElement EditGeneralUploadImageOrFileBtn;

			@FindBy(xpath="//*[@id='btnMasterSaveClick']/i")
			public static WebElement EditGeneralSaveBtn;

			@FindBy(xpath="//*[@id='GenerateEditMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
			public static WebElement EditGeneralCLoseBtn;




			@FindBy (xpath="//span[@id='sp_search']")
			public static WebElement RMAPopupSerialNoExpansionBtn;

			@FindBy (xpath="//input[@id='Search_txtSearchBox']")
			public static WebElement searchRMASearchTxtField;

			@FindBy (xpath="//input[@id='Search_txtQuantity']")
			public static WebElement searchRMAQuantityTxtField;

			@FindBy (xpath="//label[@id='Search_lblItems']")
			public static WebElement searchRMANoOfItemsTxt;

			@FindBy (xpath="//input[@id='chkSelectALL']")
			public static WebElement searchRMASelectAllChkBox;

			@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[4]/td[1]/input")
			public static WebElement searchRMA4ChkBox;

			@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[101]/td[1]/input")
			public static WebElement searchRMA101ChkBox;

			@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[102]/td[1]/input")
			public static WebElement searchRMA102ChkBox;

			@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[103]/td[1]/input")
			public static WebElement searchRMA103ChkBox;

			@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[2]/td[1]/input")
			public static WebElement searchRMA2ndRowChkBox;

			@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[2]")
			public static WebElement searchRMATableHeadingSerialNo;

			@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[3]")
			public static WebElement searchRMATableHeadingDocNo;

			@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[4]")
			public static WebElement searchRMATableHeadingDate;

			@FindBy (xpath="//*[@id='SearchModal_Content']/div[3]/div/div[1]/label")
			public static WebElement searchRMAOkBtn;

			@FindBy (xpath="//*[@id='SearchModal_Content']/div[3]/div/div[2]/label")
			public static WebElement searchRMACancelBtn;

			@FindBy (xpath="//*[@id='SearchModal_Content']/div[1]/div[2]/span/i")
			public static WebElement searchRMACloseBtn;



			@FindBy(xpath="(//a[@id='16'])[1]")
			public static WebElement  SettingsmenuBtn;

			@FindBy(xpath="//span[contains(text(),'Configure Transactions')]")
			public static WebElement  ConfigureTransactionBtn;
			
			@FindBy(xpath="(//span[contains(text(),'Preferences')])[2]")
			public static WebElement  preference;

			@FindBy(xpath="//label[contains(text(),'Preferences')]")
			public static WebElement  PreferencesBtn;

			@FindBy(xpath="//div[@id='docCustomization']")
			public static WebElement  DocumentCustomizationBtn;

			@FindBy(xpath="//a[@id='0']")
			public static WebElement  TagsBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='1']")
			public static WebElement  AccountsBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='2']")
			public static WebElement  BudgetBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='3']")
			public static WebElement  ARAPBtn;

			@FindBy(xpath="//a[@id='4']")
			public static WebElement  MiselleanousBtn;

			@FindBy(xpath="//a[@id='5']")
			public static WebElement  PDCBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='6']")
			public static WebElement  InventoryBtn;

			@FindBy(xpath="//*[text()='Batch']")
			public static WebElement  BatchBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='30']")
			public static WebElement  RMABtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='8']")
			public static WebElement  BinsBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='9']")
			public static WebElement  HirePurchaseBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='10']")
			public static WebElement  QuotationAnalysisBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='34']")
			public static WebElement  RFIDBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='29']")
			public static WebElement  AutoIndentBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='14']")
			public static WebElement  ABCAnalysisBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='11']")
			public static WebElement  ReportBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='12']")
			public static WebElement  InternetBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='13']")
			public static WebElement  MailSettingsBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='16']")
			public static WebElement  MastersBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='17']")
			public static WebElement  ExternalModulesBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='18']")
			public static WebElement  InfoBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='19']")
			public static WebElement  ProductionBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='20']")
			public static WebElement  MrpBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='22']")
			public static WebElement  FixedAssetsBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='25']")
			public static WebElement  VatBtn;

			@FindBy(xpath="//a[@id='28']")
			public static WebElement  PosBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='35']")
			public static WebElement  WareHouseManagementBtn;

			@FindBy(xpath="//a[@id='36']")
			public static WebElement  LetterForCreditBtn;

			@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='37']")
			public static WebElement  PronghornBnt;

			@FindBy(xpath="//input[@id='txtVoucherWizard']")
			public static WebElement  SearchTxt;

			@FindBy(xpath="//a[@id='btnCustomizeClose']")
			public static WebElement  CloseBtn;



			@FindBy(xpath="//input[@id='chkRMASupport']")
			public static WebElement  RmaSupportChkBox;

			@FindBy(xpath="//input[@id='chkRMAbasedalternateQuantity']")
			public static WebElement  RMAbasedalternateQuantityChkBox;

			@FindBy(xpath="//input[@id='chkRMANumberAlwaysnumeric']")
			public static WebElement  RMANumberAlwaysnumericChkBox;

			@FindBy(xpath="//input[@id='chkRMANumberUniqueAcrossAllItems']")
			public static WebElement  RMANumberUniqueAcrossAllItemsChkBox;

			@FindBy(xpath="//input[@id='chkInputRMANo']")
			public static WebElement  InputRMANoChkBox;

			@FindBy(xpath="//input[@id='chkRMANumberCantBeUsed']")
			public static WebElement  RMANumberCantBeUsedChkBox;

			@FindBy(xpath="//input[@id='PrefixVoucherNo']")
			public static WebElement  PrefixVoucherNoChkBox;




			

			



			@FindBy (xpath="//*[@id='RMA_Table_body']/tr[1]/td[2]")
			public static WebElement stockTransferRMA1stRow1stColumn;

			@FindBy (xpath="//*[@id='RMA_Table_body']/tr[2]/td[2]")
			public static WebElement stockTransferRMA2ndRow1stColumn;

			@FindBy (xpath="//*[@id='RMA_Table_body']/tr[3]/td[2]")
			public static WebElement stockTransferRMA3rdRow1stColumn;

			@FindBy (xpath="//*[@id='RMA_Table_body']/tr[4]/td[2]")
			public static WebElement stockTransferRMA4thRow1stColumn;

			@FindBy (xpath="//*[@id='RMA_Table_body']/tr[5]/td[2]")
			public static WebElement stockTransferRMA5thRow1stColumn;

			@FindBy (xpath="//*[@id='RMA_Table_body']/tr[6]/td[2]")
			public static WebElement stockTransferRMA6thRow1stColumn;

			@FindBy (xpath="//*[@id='RMA_Table_body']/tr[7]/td[2]")
			public static WebElement stockTransferRMA7thRow1stColumn;

			@FindBy (xpath="//*[@id='RMA_Table_body']/tr[8]/td[2]")
			public static WebElement stockTransferRMA8thRow1stColumn;

			@FindBy (xpath="//*[@id='RMA_Table_body']/tr[9]/td[2]")
			public static WebElement stockTransferRMA9thRow1stColumn;

			@FindBy (xpath="//*[@id='RMA_Table_body']/tr[10]/td[2]")
			public static WebElement stockTransferRMA10thRow1stColumn;


			@FindBy (xpath="//*[@id='RMA_Table_body']/tr[1]/td[3]")
			public static WebElement stockTransferRMA1stRow2ndColumn;

			@FindBy (xpath="//*[@id='RMA_Table_body']/tr[2]/td[3]")
			public static WebElement stockTransferRMA2ndRow2ndColumn;

			@FindBy (xpath="//*[@id='RMA_Table_body']/tr[1]/td[4]")
			public static WebElement stockTransferRMA1stRow3rdColumn;

			@FindBy (xpath="//*[@id='RMA_Table_body']/tr[2]/td[4]")
			public static WebElement stockTransferRMA2ndRow3rdColumn;




			@FindBy(xpath="//input[@id='donotshow']")
			public static WebElement DontShowChkBox;

			@FindBy(xpath="//*[@id='2053']")
			public static WebElement salesInvoiceNvoucher;

			@FindBy(xpath="//a[@id='137']")
			public static WebElement  inventoryTransactionsMenu; 

			@FindBy(xpath="//a[@id='2033']")
			public static WebElement  inventoryTransactionsStocksMenu; 



			@FindBy(xpath="//tr[@id='id_header_2_day_grid']")
			public static WebElement calDates;


			@FindBy(xpath="//select[@id='id_header_2_month']")
			public static WebElement monthDropDwn;

			@FindBy(xpath="//select[@id='id_header_2_year']")
			public static WebElement yearDropDwn;


			@FindBy(xpath="//tr[@id='id_header_2_day_grid']")
			public static WebElement salesInvoiceCalenderDates;


			@FindBy(xpath="//select[@id='id_header_2_month']")
			public static WebElement salesInvoiceCalenderMonthDropdwn;

			@FindBy(xpath="//select[@id='id_header_2_year']")
			public static WebElement salesInvoiceCalenderYearDropdwn;


			@FindBy(xpath="//input[@id='id_header_6']")
			public static WebElement  voucherHeaderDueDate;

			@FindBy(xpath="//input[@id='id_header_10']")
			public static WebElement  voucherHeaderCurrency;

			@FindBy(xpath="//input[@id='id_header_11']")
			public static WebElement  voucherHeaderExchangeRate;

			@FindBy(xpath="//input[@id='id_header_145']")
			public static WebElement  voucherHeaderLocalExchangeRate;


			// Batch Popup Elements

			@FindBy(xpath="//label[@id='lblitem']")
			public static WebElement batchItemName;

			@FindBy(xpath="//label[@id='lblTotalQty']")
			public static WebElement batchTotalQtyAmt;

			@FindBy(xpath="//label[@id='lblAdjustQty']")
			public static WebElement batchAdjustQtyAmt;


			@FindBy(xpath="//label[@id='lblBalnceQty']")
			public static WebElement batchBalanceAmt;

			@FindBy(xpath="//div[contains(@class,'col-xs-12 col-sm-12 col-md-12 col-lg-12 P_ingBottom')]//div[2]//input[1]")
			public static WebElement batchExipiringInRadioBtn;

			@FindBy(xpath="//section[@id='page_Content']//div[@class='row']//div//div[3]//input[1]")
			public static WebElement batchExipiringAfetrRadioBtn;

			@FindBy(xpath="//input[@id='txtWithin']")
			public static WebElement batchWithInTxt;

			@FindBy(xpath="//*[@id='Id_MRPBatch_Grid_control_heading_6']")
			public static WebElement batchTableHeaderRateColumn;


			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-1']")
			public static WebElement batchTable1stRow1stCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-2']")
			public static WebElement batchTable1stRow2ndCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-6']")
			public static WebElement batchTable1stRow3rdCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-7']")
			public static WebElement batchTable1stRow4thCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-8']")
			public static WebElement batchTable1stRow5thCol;

			@FindBy(xpath="//input[@id='MRPBatch_AdjBatchQty']")
			public static WebElement enter_BatchTableQtyAdjusted;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-14']")
			public static WebElement batchTable1stRow6thCol;



			@FindBy(xpath="//*[@id='Id_MRPBatch_Grid_col_2-1']")
			public static WebElement batchTable2ndRow1stCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-2']")
			public static WebElement batchTable2ndRow2ndCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-6']")
			public static WebElement batchTable2ndRow3rdCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-7']")
			public static WebElement batchTable2ndRow4thCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-8']")
			public static WebElement batchTable2ndRow5thCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-14']")
			public static WebElement batchTable2ndRow6thCol;


			@FindBy(xpath="//*[@id='Id_MRPBatch_Grid_col_3-1']")
			public static WebElement batchTable3rdRow1stCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-2']")
			public static WebElement batchTable3rdRow2ndCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-6']")
			public static WebElement batchTable3rdRow3rdCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-7']")
			public static WebElement batchTable3rdRow4thCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-8']")
			public static WebElement batchTable3rdRow5thCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-14']")
			public static WebElement batchTable3rdRow6thCol;



			@FindBy(xpath="//*[@id='Id_MRPBatch_Grid_col_4-1']")
			public static WebElement batchTable4thRow1stCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-2']")
			public static WebElement batchTable4thRow2ndCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-6']")
			public static WebElement batchTable4thRow3rdCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-7']")
			public static WebElement batchTable4thRow4thCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-8']")
			public static WebElement batchTable4thRow5thCol;

			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-14']")
			public static WebElement batchTable4thRow6thCol;

			@FindBy(xpath="//*[@id='MRPBatch_AdjBatchQty']")
			public static WebElement batchTableEnterQtyAdjusted;


			/*@FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']/tr")
						public static List<WebElement> batchPopupTable;*/

			@FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']")
			public static WebElement batchPopupTable;

			@FindBy(xpath="//i[@class='icon-refresh icon-font7']")
			public static WebElement batchRefreshBtn;

			@FindBy(xpath="//input[@id='Batch_Search']")
			public static WebElement batchSearchTxt;

			@FindBy(xpath="//input[@class='Fcheckbox']")
			public static WebElement batchShowAllAvalibleBatches;

			@FindBy(xpath="//label[contains(text(),'Customization')]")
			public static WebElement batchCustomizationIcon;

			/*@FindBy(xpath="//label[contains(text(),'Pick On FIFO')]")
						public static WebElement batchPickOnFIFOIcon;*/

			@FindBy(xpath="//button[contains(text(),'Pick on FIFO')]")
			public static WebElement batchPickOnFIFOIcon;

			@FindBy(xpath="//button[@id='div_Ok1']")
			public static WebElement batchOkIcon;

			@FindBy(xpath="//label[@id='lblAdjSum']")
			public static WebElement batchTotalAdjustedQty;

			@FindBy(xpath="(//button[@id='div_PICKFIFO'])[2]")
			public static WebElement batchCancelIcon;

			@FindBy(xpath="//*[@id='MBatch_Content']/div[1]/div[2]/span/i")
			public static WebElement batchCloseIcon;

			@FindBy(xpath="//label[@id='lblSum']")
			public static WebElement batchTotalQuantity;



			@FindBy(xpath="//span[@class='icon-pick']")
			public static WebElement pickBtn;

			@FindBy(xpath="//input[@id='txtNewReference']")
			public static WebElement newReferenceTxt;

			@FindBy(xpath="//span[@class='icon-ok']")
			public static WebElement Bill_OkBtn;


			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[1]")
			public static WebElement iq_stockTransaction1stRow1stColumn;

			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[2]")
			public static WebElement iq_stockTransaction1stRow2ndColumn;

			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[3]")
			public static WebElement iq_stockTransaction1stRow3rdColumn;

			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[4]")
			public static WebElement iq_stockTransaction1stRow4thColumn;

			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[5]")
			public static WebElement iq_stockTransaction1stRow5thColumn;

			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[6]")
			public static WebElement iq_stockTransaction1stRow6thColumn;


			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[1]")
			public static WebElement iq_stockTransaction2ndRow1stColumn;

			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[2]")
			public static WebElement iq_stockTransaction2ndRow2ndColumn;

			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[3]")
			public static WebElement iq_stockTransaction2ndRow3rdColumn;

			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[4]")
			public static WebElement iq_stockTransaction2ndRow4thColumn;

			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[5]")
			public static WebElement iq_stockTransaction2ndRow5thColumn;

			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[6]")
			public static WebElement iq_stockTransaction2ndRow6thColumn;


			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[3]/td[1]")
			public static WebElement iq_stockTransaction3rdRow1stColumn;

			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[3]/td[2]")
			public static WebElement iq_stockTransaction3rdRow2ndColumn;

			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[3]/td[3]")
			public static WebElement iq_stockTransaction3rdRow3rdColumn;

			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[3]/td[4]")
			public static WebElement iq_stockTransaction3rdRow4thColumn;

			@FindBy (xpath="//*[@id='salesTable']/tbody/tr[3]/td[5]")
			public static WebElement iq_stockTransaction3rdRow5thColumn;

			@FindBy (xpath="//tr[@id='id_ending_date__day_today']//span[@class='theme_color-inverse'][contains(text(),'Today')]")
			public static WebElement sl_EndDateCalender_TodayBtn;



			@FindBy (xpath="//*[@id='id_ending_date__month']")
			public static WebElement endDateCalMonthDrpdwn;

			@FindBy (xpath="//*[@id='id_ending_date__year']")
			public static WebElement endDateCalYearDrpdwn;

			@FindBy (xpath="//*[@id='id_ending_date__day_grid']/td/table/tbody")
			public static WebElement endDateCalDates;


			@FindBy (xpath="//*[@id='id_starting_date__month']")
			public static WebElement startDateCalMonthDrpdwn;

			@FindBy (xpath="//*[@id='id_starting_date__year']")
			public static WebElement startDateCalYearDrpdwn;

			@FindBy (xpath="//*[@id='id_starting_date__day_grid']/td/table/tbody")
			public static WebElement startDateCalDates;



			/*@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr")
						public static List<WebElement> reportsBodyGridRowsCount;*/


			@FindBy (xpath="//*[@id='tblBodyTransRender']/tr[1]/td[12]")
			public static WebElement grid_1stRowSuspendStatus;

			@FindBy (xpath="//*[@id='tblBodyTransRender']/tr[2]/td[12]")
			public static WebElement grid_2ndRowSuspendStatus;


			@FindBy (xpath="//*[@id='id_transaction_entry_detail_table_control_heading_1']/div[1]")
			public static WebElement stockTransferWarehouse2TableHeader;


			@FindBy (xpath="//input[@id='id_header_86']")
			public static WebElement stockTransferWarehouse1;

			/*@FindBy (xpath="//*[@id='tblBodyReportRender']/tr")
						public static List<WebElement> reports_TableBody;*/



			@FindBy(xpath="//input[@id='chkEnableBatchNumbers']")
			public static WebElement  EnableBatchesNoChkBox;

			@FindBy(xpath="//input[@id='chkAllowNegativeQuantity']/following-sibling::span")
			public static WebElement  AllowNegativeBatchesQtyChkBox;
			
			@FindBy(xpath="//input[@id='chkAllowNegativeQuantity']")
			public static WebElement  AllowNegativeBatchesQtyChkBoxIsSelected;

			@FindBy(xpath="//input[@id='chkDontAcceptDupDoc']")
			public static WebElement  DontAcceptDuplicateBatchesChkBox;

			@FindBy(xpath="//input[@id='chkExpiryDatesBatches']")
			public static WebElement  ExpiryDatesOfBatchesChkBox;

			@FindBy(xpath="//input[@id='chkExpiryDatesOptional']")
			public static WebElement  ExpiryDateOptionalChkBox;

			@FindBy(xpath="//input[@id='chkIgnoreDayInExpiry']")
			public static WebElement  IgnoringDayInExpiryChkBox;

			@FindBy(xpath="//input[@id='chkCalculateExpiryDateFromItem']")
			public static WebElement  CalculateExpiryDateFromItemChkBox;

			@FindBy(xpath="//input[@id='chkCantSellBatchesNxt']")
			public static WebElement  CantSellBatchesNxtChkBox;

			@FindBy(xpath="//input[@id='chkDontClubBatchesMfDt']")
			public static WebElement  DontClubBatchesMfDtChkBox;

			@FindBy(xpath="//input[@id='chkSortBatchesExpDate']")
			public static WebElement  SortBatchesExpDateChkBox;

			@FindBy(xpath="//input[@id='chkInputBatchMrp']")
			public static WebElement  InputBatchMrpChkBox;

			@FindBy(xpath="//input[@id='chkLoadAllDtlsBatch']")
			public static WebElement  LoadAllDtlsBatchChkBox;

			@FindBy(xpath="//input[@id='chkLoadScrnFldDtlsBatch']")
			public static WebElement  LoadScreenDtlsBatchChkBox;

			@FindBy(xpath="//input[@id='chkLoadLayoutFldDtlsBatch']")
			public static WebElement  LoadLayoutDtlsBatchChkBox;

			@FindBy(xpath="//input[@id='chkManufacturingDateByBaches']")
			public static WebElement  ManufacturingDateByBatchesChkBox;

			@FindBy(xpath="//input[@id='chkSuggestNextBatchNoDoc']")
			public static WebElement  SuggestNextBatchNoDocChkBox;

			@FindBy(xpath="//input[@id='chkConsolidateBatchesByBatchNo']")
			public static WebElement  ConsolidateBatchesByBatchNoChkBox;

			@FindBy(xpath="//input[@id='chkHideRatesOption']")
			public static WebElement  HideRatesOptionChkBox;

			@FindBy(xpath="//input[@id='chkDonotshowbatchesconsumedinsuspendedandpendingdocuments']")
			public static WebElement  donotshowbatchesconsumedinsuspendedandpendingdocumentsChkBox;

			@FindBy(xpath="//input[@id='chkDonotconverttouppercase']")
			public static WebElement  doNotConvertToUpperCaseChkBox;



			@FindBy (xpath="//input[@id='idEraseTransaction']")
			public static WebElement eraseTranscationsRadio;

			@FindBy (xpath="//i[@class='icon-ok hiconright2']")
			public static WebElement eraseAllOkBtn;

			@FindBy (xpath="//ul[@class='nav navbar-nav navbar-right']//i[@class='icon-font6 icon-close']")
			public static WebElement eraseAllCancelBtn;



			@FindBy(xpath="//input[@id='txtValue1']")
			public static WebElement  InputBatch_Value1Txt;

			@FindBy(xpath="//input[@id='txtValue2']")
			public static WebElement  InputBatch_Value2Txt;

			@FindBy(xpath="//input[@id='txtNoofbatch']")
			public static WebElement  CantSellBatches_Txt;

			@FindBy(xpath="//select[@id='cmbBatchExpire']")
			public static WebElement  CantSellBatches_Dropdown;


			@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-4']")
			public static WebElement batchTableManufactureDate;


			@FindBy(xpath="//*[@id='iExpiryDays']")
			public static WebElement itemCreationSettingsTabExpiryDaysTxt;


			@FindBy(xpath="//span[contains(text(),'Edit Screen')]")
			public static WebElement  editScreenTab; 

			@FindBy(xpath="//button[@id='btnEditScreenNext']")
			public static WebElement  editScreenTabNextBtn; 

			@FindBy(xpath="//span[contains(text(),'Edit Layout')]")
			public static WebElement editLayoutTab;

			@FindBy(xpath="//ul[@id='editLayout_tabs']/li[2]/a[contains(text(),'Body')]")
			public static WebElement editLayoutBodyTab;



			@FindBy(xpath="//*[@id='cmbBehaviour']")
			public static WebElement editScreenAddFieldsBehaviourDropdown;

			@FindBy(xpath="//input[@id='id_footer_134217750']")
			public static WebElement pvVoucherFooterDiscountTxt;


			@FindBy(xpath="//div[@id='idGlobalError']")
			public static WebElement  globalError; 



			@FindBy (xpath="//input[@id='id_footer_134217749']")
			public static WebElement pvFooterFD;


			//DataManagement menu
			@FindBy (xpath="//*[@id='25']")
			public static WebElement dataMangementMenu;

			@FindBy (xpath="//*[@id='26']/span")
			public static WebElement backup;

			@FindBy (xpath="//*[@id='27']/span")
			public static WebElement restore;

			@FindBy (xpath="//*[@id='111']/span")
			public static WebElement reindex;

			@FindBy (xpath="//*[@id='115']/span")
			public static WebElement eraseAll;

			@FindBy (xpath="//*[@id='216']/span")
			public static WebElement lockAndUnlock;



			@FindBy (xpath="//button[@class='btn Fbutton']")
			public static WebElement folderpathExpandBtn;

			@FindBy (xpath="//div[@id='RestoreControls']//div[1]//div[1]")
			public static WebElement restoreCompanyBtn;

			@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'Yes')]")
			public static WebElement overRideYesBtn;

			@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'No')]")
			public static WebElement overRideNoBtn;

			@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'Cancel')]")
			public static WebElement overRideCancelBtn;



			@FindBy(xpath="//tbody[@id='id_header_268435460_table_body']/tr/td[2]")
			public static List<WebElement> warehouseHeaderComboList;

			@FindBy(xpath="//tbody[@id='id_body_23_table_body']/tr/td[2]")
			public static List<WebElement> itemComboList;



			@FindBy(xpath="//tbody[@id='productQuery_table_body']/tr/td[2]")
			public static List<WebElement> iqItemComboList;



			@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
			public static List<WebElement> customerAccountComboList;

			@FindBy(xpath="//tbody[@id='id_header_10_table_body']/tr/td[2]")
			public static List<WebElement> currencyComboList;

			@FindBy(xpath="//tbody[@id='id_header_268435459_table_body']/tr/td[2]")
			public static List<WebElement> departmentComboList;

			@FindBy(xpath="//tbody[@id='id_body_536870916_table_body']/tr/td[2]")
			public static List<WebElement> warehouseBodyComboList;

			@FindBy(xpath="//tbody[@id='id_header_86_table_body']/tr/td[2]")
			public static List<WebElement> st_warehouse1HeaderComboList;

			@FindBy(xpath="//tbody[@id='id_body_87_table_body']/tr/td[2]")
			public static List<WebElement> st_warehouse2BodyComboList;



			@FindBy(xpath="//input[@id='id_body_12']")
			public static WebElement  enter_SalesAccount;

			@FindBy(xpath="//tbody[@id='id_body_12_table_body']/tr/td[2]")
			public static List<WebElement>  salesAccountBodyComboList;



			@FindBy(xpath="//input[@id='id_body_16777328']")
			public static WebElement  enter_TaxCode;



			@FindBy(xpath="//input[@id='id_header_268435470']")
			public static WebElement  salesInvoiceVATPlaceOFSupply;


			@FindBy(xpath="//*[@id='id_body_33554511']")
			public static WebElement enter_AQ;

			@FindBy(xpath="//*[@id='id_body_33554512']")
			public static WebElement enter_FQ;

			@FindBy(xpath="//*[@id='id_body_33554513']")
			public static WebElement enter_RD;



			@FindBy(xpath="//a[@id='2060']/span")
			public static WebElement  salesInvoiceVATVoucher;
			
			@FindBy(xpath="//tbody[@id='tblBodyTransRender']")
			public static WebElement  voucherBodyGrid;
			
			@FindBy(xpath="//a[contains(text(),'Pending Sales Orders')]")
			public static WebElement  pendingSalesOrder;



			@FindBy(xpath="//input[@id='id_body_33554503']")
			public static WebElement enter_Discount;

			@FindBy(xpath="//input[@id='id_body_33554490']")
			public static WebElement enter_PVDiscount;

			@FindBy(xpath="//input[@id='id_body_33554521']")
			public static WebElement enter_VAT;

			@FindBy(xpath="//input[@id='id_body_33554522']")
			public static WebElement enter_Taxable;

			@FindBy(xpath="//input[@id='id_body_33554540']")
			public static WebElement enter_PVLoadScreenIntoIssue;

			@FindBy(xpath="//input[@id='id_body_33554542']")
			public static WebElement enter_PV1LoadScreenIntoIssue;

			@FindBy(xpath="//input[@id='id_body_16777353']")
			public static WebElement enter_PVLoadLayoutIntoIssue;

			@FindBy(xpath="//input[@id='id_body_16777355']")
			public static WebElement enter_PV1LoadLayoutIntoIssue;

			@FindBy(xpath="//input[@id='id_body_536870916']")
			public static WebElement enter_WarehouseTxt;

			@FindBy(xpath="//*[@id='id_body_16777296']")
			public static WebElement enter_RemarksTxt;

			@FindBy(xpath="//input[@id='id_body_16777354']")
			public static WebElement enter_SalesInvoiceLoadLayoutIntoIssue;

			@FindBy(xpath="//input[@id='id_body_16777356']")
			public static WebElement enter_SalesInvoice1LoadLayoutIntoIssue;



			@FindBy(xpath="//*[@id='id_body_536870916_table_body']/tr")
			public static List<WebElement> pvvGridWarehouseList;

			@FindBy(xpath="//*[@id='id_body_23_table_body']/tr")
			public static List<WebElement> pvvGridItemList;



			@FindBy(xpath="//input[@id='id_body_33554486']")
			public static WebElement enter_PvTaxable;

			@FindBy(xpath="//tbody[@id='id_body_16777307_table_body']/tr/td")
			public static List<WebElement> pvvGridTaxCodeList;

			@FindBy(xpath="//input[@id='id_body_16777323']")
			public static WebElement enter_PvTaxCode;


			@FindBy(xpath="//a[@id='2057']//span")
			public static WebElement  purchaseVouchersVat;
			
			@FindBy(xpath="//input[@id='txtNewReference']")
			public static WebElement  billRefNewReferenceTxt;  
			


			@FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr/td[2]")
			public static List<WebElement> purchaseAccountComboList;

			@FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr/td[2]")
			public static List<WebElement> salesAccountHeaderComboList;


			@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
			public static List<WebElement> vendorAccountComboList;


			@FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']/tr/td[2]")
			public static List<WebElement> batchPopupBatchNoList;

			@FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']/tr/td[1]")
			public static List<WebElement> batchPopupRowNosList;


			@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-1']/input")
			public static WebElement workFlowChkBox1;

			@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-1']/input")
			public static WebElement workFlowChkBox2;

			@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
			public static WebElement workFlowExpandBtn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_control_heading_ctrl_1']")
			public static WebElement  workFlowHeaderChkBoxCL;

			@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_popup_body']/tr/td[2]/input")
			public static List<WebElement> workFlowChkBoxList;

			@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_popup_body']/tr/td[7]")
			public static List<WebElement> workFlowVoucherNosList;

			@FindBy(xpath="(//input[@class='FButton-Primary FPopupChildren mx-1'])[3]")
			public static WebElement  workFlowOkBtnCL;



			@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
			public static List<WebElement> grid_CheckBoxList;

			@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[5]")
			public static List<WebElement> grid_VoucherNoList;

			@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[12]")
			public static List<WebElement> grid_SuspendStatusList;



			@FindBy(xpath="//div[@id='ShowLoginErrId']/div/div/div[2]")
			public static WebElement loginWarningPopup;

			@FindBy(xpath="//div[@id='ShowLoginErrId']/div/div/div[3]/button")
			public static WebElement loginWarningPopupOkBtn;



			@FindBy (xpath="//table[@id='IPtable']/tbody/tr")
			public static WebElement endIpValueR2C2;


			/*@FindBy (xpath="//table[@id='tagWiseData']/tbody/tr")
						public static List<WebElement> IQ_WHTableRowsCount;*/

			@FindBy (xpath="//*[@id='tagWiseData']/tbody")
			public static WebElement IQ_WHTable;



			@FindBy (xpath="//tr[@id='Id_MRPBatch_Grid_row_heading']/th/div[1]")
			public static List<WebElement> batchPopupHeaderList;

			@FindBy (xpath="//tr[@id='id_transaction_entry_detail_table_row_heading']/th/div[1]")
			public static List<WebElement> voucherEntryHeaderList;




			// Sales Table

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[1]")
			public static WebElement sal1strow_1stColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[2]")
			public static WebElement sal1strow_2ndColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[3]")
			public static WebElement sal1strow_3rdColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[4]")
			public static WebElement sal1strow_4thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[5]")
			public static WebElement sal1strow_5thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[6]")
			public static WebElement sal1strow_6thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[7]")
			public static WebElement sal1strow_7thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[8]")
			public static WebElement sal1strow_8thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[9]")
			public static WebElement sal1strow_9thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[10]")
			public static WebElement sal1strow_10thColumn;

			// 2nd

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[1]")
			public static WebElement sal2ndrow_1stColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[2]")
			public static WebElement sal2ndrow_2ndColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[3]")
			public static WebElement sal2ndrow_3rdColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[4]")
			public static WebElement sal2ndrow_4thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[5]")
			public static WebElement sal2ndrow_5thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[6]")
			public static WebElement sal2ndrow_6thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[7]")
			public static WebElement sal2ndrow_7thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[8]")
			public static WebElement sal2ndrow_8thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[9]")
			public static WebElement sal2ndrow_9thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[10]")
			public static WebElement sal2ndrow_10thColumn;

			// 3rd

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[1]")
			public static WebElement sal3rdrow_1stColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[2]")
			public static WebElement sal3rdrow_2ndColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[3]")
			public static WebElement sal3rdrow_3rdColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[4]")
			public static WebElement sal3rdrow_4thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[5]")
			public static WebElement sal3rdrow_5thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[6]")
			public static WebElement sal3rdrow_6thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[7]")
			public static WebElement sal3rdrow_7thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[8]")
			public static WebElement sal3rdrow_8thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[9]")
			public static WebElement sal3rdrow_9thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[10]")
			public static WebElement sal3rdrow_10thColumn;

			// 4th

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[1]")
			public static WebElement sal4throw_1stColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[2]")
			public static WebElement sal4throw_2ndColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[3]")
			public static WebElement sal4throw_3rdColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[4]")
			public static WebElement sal4throw_4thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[5]")
			public static WebElement sal4throw_5thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[6]")
			public static WebElement sal4throw_6thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[7]")
			public static WebElement sal4throw_7thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[8]")
			public static WebElement sal4throw_8thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[9]")
			public static WebElement sal4throw_9thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[10]")
			public static WebElement sal4throw_10thColumn;

			//5th

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[1]")
			public static WebElement sal5throw_1stColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[2]")
			public static WebElement sal5throw_2ndColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[3]")
			public static WebElement sal5throw_3rdColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[4]")
			public static WebElement sal5throw_4thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[5]")
			public static WebElement sal5throw_5thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[6]")
			public static WebElement sal5throw_6thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[7]")
			public static WebElement sal5throw_7thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[8]")
			public static WebElement sal5throw_8thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[9]")
			public static WebElement sal5throw_9thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[10]")
			public static WebElement sal5throw_10thColumn;

			//6th

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[1]")
			public static WebElement sal6throw_1stColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[2]")
			public static WebElement sal6throw_2ndColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[3]")
			public static WebElement sal6throw_3rdColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[4]")
			public static WebElement sal6throw_4thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[5]")
			public static WebElement sal6throw_5thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[6]")
			public static WebElement sal6throw_6thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[7]")
			public static WebElement sal6throw_7thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[8]")
			public static WebElement sal6throw_8thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[9]")
			public static WebElement sal6throw_9thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[10]")
			public static WebElement sal6throw_10thColumn;

			// 7th

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[1]")
			public static WebElement sal7throw_1stColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[2]")
			public static WebElement sal7throw_2ndColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[3]")
			public static WebElement sal7throw_3rdColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[4]")
			public static WebElement sal7throw_4thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[5]")
			public static WebElement sal7throw_5thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[6]")
			public static WebElement sal7throw_6thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[7]")
			public static WebElement sal7throw_7thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[8]")
			public static WebElement sal7throw_8thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[9]")
			public static WebElement sal7throw_9thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[10]")
			public static WebElement sal7throw_10thColumn;



			// 8th

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[1]")
			public static WebElement sal8throw_1stColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[2]")
			public static WebElement sal8throw_2ndColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[3]")
			public static WebElement sal8throw_3rdColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[4]")
			public static WebElement sal8throw_4thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[5]")
			public static WebElement sal8throw_5thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[6]")
			public static WebElement sal8throw_6thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[7]")
			public static WebElement sal8throw_7thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[8]")
			public static WebElement sal8throw_8thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[9]")
			public static WebElement sal8throw_9thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[10]")
			public static WebElement sal8throw_10thColumn;



			// 9th

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[1]")
			public static WebElement sal9throw_1stColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[2]")
			public static WebElement sal9throw_2ndColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[3]")
			public static WebElement sal9throw_3rdColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[4]")
			public static WebElement sal9throw_4thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[5]")
			public static WebElement sal9throw_5thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[6]")
			public static WebElement sal9throw_6thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[7]")
			public static WebElement sal9throw_7thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[8]")
			public static WebElement sal9throw_8thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[9]")
			public static WebElement sal9throw_9thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[10]")
			public static WebElement sal9throw_10thColumn;



			// 10th

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[1]")
			public static WebElement sal10throw_1stColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[2]")
			public static WebElement sal10throw_2ndColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[3]")
			public static WebElement sal10throw_3rdColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[4]")
			public static WebElement sal10throw_4thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[5]")
			public static WebElement sal10throw_5thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[6]")
			public static WebElement sal10throw_6thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[7]")
			public static WebElement sal10throw_7thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[8]")
			public static WebElement sal10throw_8thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[9]")
			public static WebElement sal10throw_9thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[10]")
			public static WebElement sal10throw_10thColumn;



			// 11th

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[1]")
			public static WebElement sal11throw_1stColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[2]")
			public static WebElement sal11throw_2ndColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[3]")
			public static WebElement sal11throw_3rdColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[4]")
			public static WebElement sal11throw_4thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[5]")
			public static WebElement sal11throw_5thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[6]")
			public static WebElement sal11throw_6thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[7]")
			public static WebElement sal11throw_7thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[8]")
			public static WebElement sal11throw_8thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[9]")
			public static WebElement sal11throw_9thColumn;

			@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[10]")
			public static WebElement sal11throw_10thColumn;





			// 1st 

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[2]")
			public static WebElement sbr1strow_2ndColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[3]")
			public static WebElement sbr1strow_3rdColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[4]")
			public static WebElement sbr1strow_4thColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[5]")
			public static WebElement sbr1strow_5thColumn;

			// 2nd 

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[2]")
			public static WebElement sbr2ndrow_2ndColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[3]")
			public static WebElement sbr2ndrow_3rdColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[4]")
			public static WebElement sbr2ndrow_4thColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[5]")
			public static WebElement sbr2ndrow_5thColumn;

			//3rd
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[2]")
			public static WebElement sbr3rdrow_2ndColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[3]")
			public static WebElement sbr3rdrow_3rdColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[4]")
			public static WebElement sbr3rdrow_4thColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[5]")
			public static WebElement sbr3rdrow_5thColumn;

			// 4th

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[2]")
			public static WebElement sbr4throw_2ndColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[3]")
			public static WebElement sbr4throw_3rdColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[4]")
			public static WebElement sbr4throw_4thColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[5]")
			public static WebElement sbr4throw_5thColumn;



			// 5th

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[2]")
			public static WebElement sbr5throw_2ndColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[3]")
			public static WebElement sbr5throw_3rdColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[4]")
			public static WebElement sbr5throw_4thColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[5]")
			public static WebElement sbr5throw_5thColumn;


			// 6th

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[2]")
			public static WebElement sbr6throw_2ndColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[3]")
			public static WebElement sbr6throw_3rdColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[4]")
			public static WebElement sbr6throw_4thColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[5]")				
			public static WebElement sbr6throw_5thColumn;



			// 7th

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[2]")
			public static WebElement sbr7throw_2ndColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[3]")
			public static WebElement sbr7throw_3rdColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[4]")
			public static WebElement sbr7throw_4thColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[5]")
			public static WebElement sbr7throw_5thColumn;


			// 8th

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[2]")
			public static WebElement sbr8throw_2ndColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[3]")
			public static WebElement sbr8throw_3rdColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[4]")
			public static WebElement sbr8throw_4thColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[5]")
			public static WebElement sbr8throw_5thColumn;



			// 9th

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[2]")
			public static WebElement sbr9throw_2ndColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[3]")
			public static WebElement sbr9throw_3rdColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[4]")
			public static WebElement sbr9throw_4thColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[5]")
			public static WebElement sbr9throw_5thColumn;


			// 10th

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[2]")
			public static WebElement sbr10throw_2ndColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[3]")
			public static WebElement sbr10throw_3rdColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[4]")
			public static WebElement sbr10throw_4thColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[5]")
			public static WebElement sbr10throw_5thColumn;


			// 11th

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[2]")
			public static WebElement sbr11throw_2ndColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[3]")
			public static WebElement sbr11throw_3rdColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[4]")
			public static WebElement sbr11throw_4thColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[5]")
			public static WebElement sbr11throw_5thColumn;



			// 12th

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[2]")
			public static WebElement sbr12throw_2ndColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[3]")
			public static WebElement sbr12throw_3rdColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[4]")
			public static WebElement sbr12throw_4thColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[5]")
			public static WebElement sbr12throw_5thColumn;



			// 13th

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[2]")
			public static WebElement sbr13throw_2ndColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[3]")
			public static WebElement sbr13throw_3rdColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[4]")
			public static WebElement sbr13throw_4thColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[5]")
			public static WebElement sbr13throw_5thColumn;


			// 14th

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[2]")
			public static WebElement sbr14throw_2ndColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[3]")
			public static WebElement sbr14throw_3rdColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[4]")
			public static WebElement sbr14throw_4thColumn;

			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[5]")
			public static WebElement sbr14throw_5thColumn;


			// Item Query Elements

			@FindBy(xpath="//input[@id='productQuery']")
			public static WebElement iq_ItemTxt;

			@FindBy(xpath="//button[contains(text(),'GetStock')]")
			public static WebElement iq_getStockBtn;

			@FindBy(xpath="//button[contains(text(),'Customize')]")
			public static WebElement iq_customizeBtn;

			@FindBy(xpath="//span[@id='id_productquery_button_clear']")
			public static WebElement iq_clearBtn;

			@FindBy(xpath="//span[@id='id_productquery_button_close']")
			public static WebElement iq_closeBtn;

			@FindBy(xpath="//label[contains(text(),'Opening Stock Quantity:')]")
			public static WebElement iq_OpeningStockQtyLable;

			@FindBy(xpath="//label[contains(text(),'Pending purchases orders :')]")
			public static WebElement iq_PendingPurchaseOrdersLable;

			@FindBy(xpath="//label[contains(text(),'Current Stock :')]")
			public static WebElement iq_CurrentStockLable;

			@FindBy(xpath="//label[contains(text(),'Pending Sales Orders :')]")
			public static WebElement iq_PendingSalesOrdersLable;

			@FindBy(xpath="//label[contains(text(),'Avg. Stock Rate :')]")
			public static WebElement iq_AvgStockRateLable;

			@FindBy(xpath="//label[contains(text(),'Qty to be Ordered :')]")
			public static WebElement iq_QtytobeOrderedLable;

			@FindBy(xpath="//label[contains(text(),'Base Unit :')]")
			public static WebElement iq_BaseUnitLable;

			@FindBy(xpath="//label[contains(text(),'Value :')]")
			public static WebElement iq_ValueLable;

			@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Date')]")
			public static WebElement iq_PurDate;

			@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Voucher No')]")
			public static WebElement iq_PurVoucherNo;

			@FindBy(xpath="//th[contains(text(),'Vendor')]")
			public static WebElement iq_PurVendor;

			@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Quantity')]")
			public static WebElement iq_PurQty;

			@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Unit')]")
			public static WebElement iq_PurUnit;

			@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Rate')]")
			public static WebElement iq_PurRate;

			@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Currency')]")
			public static WebElement iq_PurCurrency;

			@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Quantity In Base')]")
			public static WebElement iq_PurQtyInBase;

			@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Date')]")
			public static WebElement iq_SaleDate;

			@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Voucher No')]")
			public static WebElement iq_SaleVoucherNo;

			@FindBy(xpath="//th[contains(text(),'Customer')]")
			public static WebElement iq_SaleCustomer;

			@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Quantity')]")
			public static WebElement iq_SaleQty;

			@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Unit')]")
			public static WebElement iq_SaleUnit;

			@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Rate')]")
			public static WebElement iq_SaleRate;

			@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Currency')]")
			public static WebElement iq_SaleCurrency;

			@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Quantity In Base')]")
			public static WebElement iq_SaleQtyInBase;


			@FindBy(xpath="//span[@id='openingStock']")
			public static WebElement iq_OpeningStocks;

			@FindBy(xpath="//span[@id='currentStock']")
			public static WebElement iq_CurrentStock;

			@FindBy(xpath="//span[@id='avgStockRate']")
			public static WebElement iq_AvgStockRate;

			@FindBy(xpath="//span[@id='value']")
			public static WebElement iq_Value;

			@FindBy(xpath="//span[@id='iBaseUnit']")
			public static WebElement iq_BaseUnit;

			@FindBy(xpath="//span[@id='purchaseOrdered']")
			public static WebElement iq_PendingPurchaseOrders;

			@FindBy(xpath="//span[@id='salesOrdered']")
			public static WebElement iq_PendingSalesOrders;

			@FindBy(xpath="//span[@id='quantityToBeOrdered']")
			public static WebElement iq_QtyToBeOrdered;


			// Purchase Table

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[1]")
			public static WebElement pur1strow_1stColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[2]")
			public static WebElement pur1strow_2ndColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[3]")
			public static WebElement pur1strow_3rdColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[4]")
			public static WebElement pur1strow_4thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[5]")
			public static WebElement pur1strow_5thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[6]")
			public static WebElement pur1strow_6thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[7]")
			public static WebElement pur1strow_7thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[8]")
			public static WebElement pur1strow_8thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[9]")
			public static WebElement pur1strow_9thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[10]")
			public static WebElement pur1strow_10thColumn;



			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[1]")
			public static WebElement pur2ndrow_1stColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[2]")
			public static WebElement pur2ndrow_2ndColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[3]")
			public static WebElement pur2ndrow_3rdColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[4]")
			public static WebElement pur2ndrow_4thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[5]")
			public static WebElement pur2ndrow_5thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[6]")
			public static WebElement pur2ndrow_6thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[7]")
			public static WebElement pur2ndrow_7thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[8]")
			public static WebElement pur2ndrow_8thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[9]")
			public static WebElement pur2ndrow_9thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[10]")
			public static WebElement pur2ndrow_10thColumn;



			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[1]")
			public static WebElement pur7thRow_1stColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[2]")
			public static WebElement pur3rdrow_2ndColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[3]")
			public static WebElement pur3rdrow_3rdColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[4]")
			public static WebElement pur3rdrow_4thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[5]")
			public static WebElement pur3rdrow_5thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[6]")
			public static WebElement pur3rdrow_6thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[7]")
			public static WebElement pur3rdrow_7thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[8]")
			public static WebElement pur3rdrow_8thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[9]")
			public static WebElement pur3rdrow_9thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[10]")
			public static WebElement pur3rdrow_10thColumn;


			// 4TH

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[1]")
			public static WebElement pur4throw_1stColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[2]")
			public static WebElement pur4throw_2ndColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[3]")
			public static WebElement pur4throw_3rdColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[4]")
			public static WebElement pur4throw_4thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[5]")
			public static WebElement pur4throw_5thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[6]")
			public static WebElement pur4throw_6thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[7]")
			public static WebElement pur4throw_7thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[8]")
			public static WebElement pur4throw_8thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[9]")
			public static WebElement pur4throw_9thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[10]")
			public static WebElement pur4throw_10thColumn;

			// 5TH

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[1]")
			public static WebElement pur5throw_1stColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[2]")
			public static WebElement pur5throw_2ndColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[3]")
			public static WebElement pur5throw_3rdColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[4]")
			public static WebElement pur5throw_4thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[5]")
			public static WebElement pur5throw_5thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[6]")
			public static WebElement pur5throw_6thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[7]")
			public static WebElement pur5throw_7thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[8]")
			public static WebElement pur5throw_8thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[9]")
			public static WebElement pur5throw_9thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[10]")
			public static WebElement pur5throw_10thColumn;

			// 6TH

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[1]")
			public static WebElement pur6throw_1stColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[2]")
			public static WebElement pur6throw_2ndColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[3]")
			public static WebElement pur6throw_3rdColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[4]")
			public static WebElement pur6throw_4thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[5]")
			public static WebElement pur6throw_5thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[6]")
			public static WebElement pur6throw_6thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[7]")
			public static WebElement pur6throw_7thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[8]")
			public static WebElement pur6throw_8thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[9]")
			public static WebElement pur6throw_9thColumn;

			@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[10]")
			public static WebElement pur6throw_10thColumn;



			// Warehouse Table

			@FindBy(xpath="//div[contains(text(),'Warehouse')]")
			public static WebElement BalancebyWareHouselable;

			@FindBy(xpath="//tr[@id='1']/td[2]")
			public static WebElement wh1strow_2ndColumn;

			@FindBy(xpath="//tr[@id='1']/td[3]")
			public static WebElement wh1strow_3rdColumn;

			@FindBy(xpath="//tr[@id='1']/td[4]")
			public static WebElement wh1strow_4thColumn;

			@FindBy(xpath="//tr[@id='1']/td[5]")
			public static WebElement wh1strow_5thColumn;

			@FindBy(xpath="//tr[@id='1']/td[6]")
			public static WebElement wh1strow_6thColumn;



			@FindBy(xpath="//*[@id='3']/td[2]")
			public static WebElement wh2ndrow_2ndColumn;

			@FindBy(xpath="//*[@id='3']/td[3]")
			public static WebElement wh2ndrow_3rdColumn;

			@FindBy(xpath="//*[@id='3']/td[4]")
			public static WebElement wh2ndrow_4thColumn;

			@FindBy(xpath="//*[@id='3']/td[5]")
			public static WebElement wh2ndrow_5thColumn;

			@FindBy(xpath="//*[@id='3']/td[6]")
			public static WebElement wh2ndrow_6thColumn;



			@FindBy(xpath="//*[@id='4']/td[2]")
			public static WebElement wh3rdrow_2ndColumn;

			@FindBy(xpath="//*[@id='4']/td[3]")
			public static WebElement wh3rdrow_3rdColumn;

			@FindBy(xpath="//*[@id='4']/td[4]")
			public static WebElement wh3rdrow_4thColumn;

			@FindBy(xpath="//*[@id='4']/td[5]")
			public static WebElement wh3rdrow_5thColumn;

			@FindBy(xpath="//*[@id='4']/td[6]")
			public static WebElement wh3rdrow_6thColumn;


			@FindBy(xpath="//*[@id='8']/td[2]")
			public static WebElement wh4throw_2ndColumn;

			@FindBy(xpath="//*[@id='8']/td[3]")
			public static WebElement wh4throw_3rdColumn;

			@FindBy(xpath="//*[@id='8']/td[4]")
			public static WebElement wh4throw_4thColumn;

			@FindBy(xpath="//*[@id='8']/td[5]")
			public static WebElement wh4throw_5thColumn;

			@FindBy(xpath="//*[@id='8']/td[6]")
			public static WebElement wh4throw_6thColumn;


			@FindBy(xpath="//*[@id='9']/td[2]")
			public static WebElement wh5throw_2ndColumn;

			@FindBy(xpath="//*[@id='9']/td[3]")
			public static WebElement wh5throw_3rdColumn;

			@FindBy(xpath="//*[@id='9']/td[4]")
			public static WebElement wh5throw_4thColumn;

			@FindBy(xpath="//*[@id='9']/td[5]")
			public static WebElement wh5throw_5thColumn;

			@FindBy(xpath="//*[@id='9']/td[6]")
			public static WebElement wh5throw_6thColumn;


			@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[2]/td[2]")
			public static WebElement whStockTotal;

			@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[2]/td[4]")
			public static WebElement whValueTotal;

			@FindBy(xpath="//table[@id='tagWiseData']/tbody")
			public static WebElement itemQueryWHTable;


			@FindBy(xpath="//div[contains(text(),'Selling rates and Buying rates')]")
			public static WebElement sellingAndBuyingRateslable;

			@FindBy(xpath="//span[@id='ProdQuery_ShowSellandBuyRatesPopup']")
			public static WebElement sellingAndBuyingRatesExpandBtn;





			@FindBy(xpath="//tbody[@id='LandingGridBody']/tr")
			public static List<WebElement> stockLedgerHometableRowCount;


			// Reports Table Row List  
			@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[1]/td")
			public static List<WebElement> reportsRow1List;

			@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[2]/td")
			public static List<WebElement> reportsRow2List;

			@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[3]/td")
			public static List<WebElement> reportsRow3List;

			@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[4]/td")
			public static List<WebElement> reportsRow4List;

			@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[5]/td")
			public static List<WebElement> reportsRow5List;

			@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[6]/td")
			public static List<WebElement> reportsRow6List;

			@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[7]/td")
			public static List<WebElement> reportsRow7List;

			@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[8]/td")
			public static List<WebElement> reportsRow8List;

			@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[9]/td")
			public static List<WebElement> reportsRow9List;

			@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[10]/td")
			public static List<WebElement> reportsRow10List;

			@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[11]/td")
			public static List<WebElement> reportsRow11List;

			@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[12]/td")
			public static List<WebElement> reportsRow12List;

			@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[13]/td")
			public static List<WebElement> reportsRow13List;

			@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[14]/td")
			public static List<WebElement> reportsRow14List;



			@FindBy(xpath="//tbody[@id='tblBodyReportRender']")
			public static WebElement reportsTable;


			@FindBy(xpath="//select[@id='RITCombobox__1']")
			public static WebElement stockMovementDropdown;

			@FindBy(xpath="//input[@id='RITCheckbox__3']")
			public static WebElement includeAllVoucherChkBox;


			@FindBy(xpath="//span[contains(text(),'Actual consumption report')]")
			public static WebElement  actualConsumptionReport;


			// With Customizing Warehouse

			@FindBy(xpath="//*[@id='CustomizeTransTree']/ul/li/span")
			public static WebElement  osr_customizeFieldsTransactionExpansion; 

			@FindBy(xpath="//*[@id='rd_customization_tree2']/span")
			public static WebElement  osr_customizeFieldsTransExtraFieldsExpansion; 

			@FindBy(xpath="//*[@id='rd_customization_tree2_30']/span/span")
			public static WebElement  osr_customizeFieldsTransExtraFieldsWarehouseExpansion; 

			@FindBy(xpath="//*[@id='rd_customization_tree2_30_0']")
			public static WebElement  osr_customizeFieldsTransExtraFieldsWarehouseName; 

			@FindBy(xpath="//li[@id='rd_customization_tree2_15']")
			public static WebElement  osr_customizeFieldsTransExtraFieldsNarration;

			@FindBy(xpath="//*[@id='id_rc_columnheadertable']/thead/tr/th")
			public static List<WebElement> osr_customizeHeaderList;

			@FindBy(xpath="//table[@id='tblRDRender']/thead/tr/th")
			public static List<WebElement> osr_reportHeaderList;


			@FindBy(xpath="//ul[@id='id_Item_main']/li/span")
			public static WebElement  osr_customizeFieldsItemExpansion; 

			@FindBy(xpath="//li[@id='id_Item_main_0']")
			public static WebElement  osr_customizeFieldsItemName; 


			@FindBy(xpath="//input[@id='HidethisColumn']")
			public static WebElement osr_customizeTabHideThisColumnChkBox;

			@FindBy(xpath="//input[@id='ScrollTexttonextLine']")
			public static WebElement osr_customizeTabScrollTextToNextLineChkBox;

			@FindBy(xpath="//input[@id='Printunderpreviouscolumn']")
			public static WebElement osr_customizeTabPrintUnderPreviousColumnChkBox;

			@FindBy(xpath="//input[@id='Mandatorycolumn']")
			public static WebElement osr_customizeTabMandatoryColumnChkBox;

			@FindBy(xpath="//*[@id='plnCustomizecolumn']/div/span[4]/a")
			public static WebElement osr_customizeTabRemoveColumnBtn;

			@FindBy(xpath="//*[@id='Save']/div[1]/span")
			public static WebElement  osr_customizeSaveBtn;

			@FindBy(xpath="//*[@id='Deleteayout']/div[2]")
			public static WebElement  osr_customizeDeleteLayoutBtn;

			@FindBy(xpath="//div[@id='btnCustomizeClose']")
			public static WebElement  osr_customizeCloseBtn;


			//@FindBy(xpath="//div[@class='toast-body alert-message-body']")
			//public static WebElement errorMessage;
			
			
			
			
			@FindBy(xpath="//*[@id='idGlobalError']/div/div[2]")   
			public static WebElement errorMessage;
			 
			@FindBy(xpath="//*[@id='idGlobalError']/div/div[1]/button")
			public static WebElement errorMessageCloseBtn;
			
			

			//@FindBy(xpath="//button[@class='btn-close alert-message-close']")
			//public static WebElement errorMessageCloseBtn;

			@FindBy(xpath="//a[@id='id_transaction_homescreen_new']")
			public static WebElement  newBtn;

			@FindBy(xpath="//a[@id='id_transaction_homescreen_edit']")
			public static WebElement  editBtn;


			@FindBy(xpath="//span[@class='icon-print icon-font6']")
			public static WebElement  printBtn;


			@FindBy(xpath="//a[@id='id_transaction_homescreen_Delete']/i[@class='icon-delete hiconright2']")
			public static WebElement  deleteBtn;


			@FindBy(xpath="//a[@id='id_transaction_homescreen_authorize']")
			public static WebElement  authorizeBtn;


			@FindBy(xpath="//a[@id='id_transaction_homescreen_Suspend']")
			public static WebElement  suspendBtn;


			@FindBy(xpath="//span[@class='icon-reject2 icon-font6']")
			public static WebElement  rejectBtn;


			@FindBy(xpath="//span[@class='icon-cheque icon-font6']")
			public static WebElement  chequeReturnBtn;

			@FindBy(xpath="//span[@class='icon-printbarcode icon-font6']")
			public static WebElement  printBarcodeBtn;

			@FindBy(xpath="//a[@id='id_transaction_homescreen_convert']")
			public static WebElement  convertBtn;

			@FindBy(xpath="//span[@class='icon-export icon-font6']")
			public static WebElement  exportToXMLBtn;  


			@FindBy(xpath="(//i[@class='icon-settings hiconright2'])[1]")
			public static WebElement  settingsBtn;

			@FindBy(xpath="//i[@class='icon-close hiconright2']")  
			public static WebElement  voucherhomeCloseBtn;

			@FindBy(xpath="//button[@class='accordion-button collapsed']")
			public static WebElement  homePageVoucherArrowBtn;

			// Header Section Completed


			//Main Section

			@FindBy(xpath="//a[@class='transaction_viewname_anchor theme_color-inverse font-5']")
			public static WebElement  allVouchersOption;

			@FindBy(xpath="//a[@class='transaction_viewname_anchor font-5']")
			public static WebElement  pendingBillsOption;

			@FindBy(xpath="//input[@id='SelectDefaultView']")
			public static WebElement  selectDefaultViewChkBox;


			@FindBy(xpath="//span[@class='icon-sorting icon-font6 toolbar_button_image theme_button_color dropdown-toggle']")
			public static WebElement  sortingBtn;


			@FindBy(xpath="//div[@id='btnCreateView']//span[@class='icon-new icon-font6']")
			public static WebElement  createViewBtn;

			@FindBy(xpath="//div[@id='btnCustomize']//span[@class='icon-settings icon-font6']")
			public static WebElement  customizeBtn;

			@FindBy(xpath="//span[@class='icon-filter icon-font6']")
			public static WebElement  filterBtn;

			

			@FindBy(xpath="//i[@class='icon-font6 icon-export']")
			public static WebElement  exportBtn;


			///// Options Btn  (Display Option)	
			@FindBy(xpath="//span[@id='transOptions']")
			public static WebElement  optionsBtn;

			@FindBy(xpath="//a[contains(text(),'Auto Adjust Width')]")
			public static WebElement  autoAdjustWidthBtn;

			@FindBy(xpath="//a[contains(text(),'Fit To Screen')]")
			public static WebElement  fitToScreenBtn;

			@FindBy(xpath="//a[contains(text(),'Normal')]")
			public static WebElement  normalBtn;



			// Grid Elements



			//Grid Header CheckBox
			@FindBy(xpath="//input[@id='HeaderChkBox']")
			public static WebElement  grid_HeaderChkBox;	


			@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[3]")
			public static WebElement  grid_Header_Date;

			@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[4]")
			public static WebElement  grid_Header_VoucherNumber;

			@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[5]")
			public static WebElement  grid_Header_CreatedBy;

			@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[6]")
			public static WebElement  grid_Header_ModifiedBy;

			@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[7]")
			public static WebElement  grid_Header_CreatedDate;

			@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[8]")
			public static WebElement  grid_Header_ModifiedDate;

			@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[9]")
			public static WebElement  grid_Header_CreatedTime;

			@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[10]")
			public static WebElement  grid_Header_ModifiedTime;

			@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[11]")
			public static WebElement  grid_Header_Suspended;

			@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[12]")
			public static WebElement  grid_Header_Cancelled;

			@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[13]")
			public static WebElement  grid_Header_AuthorizationStatus;




			//Grid Voucher DetailsBtn
			@FindBy(xpath="//tr[@id='trRender_1']//i[@class='icon-info icon-font7']")
			public static WebElement  grid_VoucherDetailsBtn1;

			@FindBy(xpath="//tr[@id='trRender_2']//i[@class='icon-info icon-font7']")
			public static WebElement  grid_VoucherDetailsBtn2;



			//Grid CheckBox 1 And 2
			@FindBy(xpath="//tr[@id='trRender_1']//td//input")
			public static WebElement  grid_ChkBox1;

			@FindBy(xpath="//tr[@id='trRender_2']//td//input")
			public static WebElement  grid_ChkBox2;

			////////////////

			// Footer Section

			@FindBy(xpath="//div[@id='tblFooterReportRender']//input[@id='txtSearch']")
			public static WebElement  searchField;

			@FindBy(xpath="//button[@id='frstPage']")
			public static WebElement  firstPageBtn;

			@FindBy(xpath="//button[@id='id_previousPage']")
			public static WebElement  previousPageBtn;

			@FindBy(xpath="//button[@id='id_pagenumber']")
			public static WebElement  currentPageNo;

			@FindBy(xpath="//button[@id='id_nextPage']")
			public static WebElement  nextPageBtn;

			@FindBy(xpath="//button[@id='lstPage']")
			public static WebElement  lastPageBtn;


			////////////////

			//New Screen Elements



			// Vouchers_New Header Section

			@FindBy(xpath="//span[@class='icon-scroll icon-font6']")
			public static WebElement  freeFlowBtn;

			@FindBy(xpath="//span[@class='icon-header icon-font6']")
			public static WebElement  jumpToHeaderSectionBtn;

			@FindBy(xpath="//span[@class='icon-panel icon-font6']")
			public static WebElement  jumpToBodySectionBtn;

			@FindBy(xpath="//span[@class='icon-footer icon-font6']")
			public static WebElement  jumpToFooterBtn;

			@FindBy(xpath="//*[@id='id_transactionentry_new']")
			public static WebElement  new_newBtn;

			@FindBy(xpath="//*[@id='id_transactionentry_save']")
			public static WebElement  saveBtn;

			@FindBy(xpath="//*[@id='id_transactionentry_previous']")
			public static WebElement  previousBtn;

			@FindBy(xpath="//*[@id='id_transactionentry_next']")
			public static WebElement  nextBtn;

			@FindBy(xpath="//*[@id='id_transactionentry_print']")
			public static WebElement  new_PrintBtn;

			@FindBy(xpath="//*[@class='icon-suspend-1 d-none d-md-block hiconright2']")
			public static WebElement  new_SuspendBtn;

			@FindBy(xpath="//*[@id='id_transactionentry_close']")
			public static WebElement  new_CloseBtn;

			@FindBy(xpath="//span[@class='icon-delete d-none d-md-block hiconright2']")
			public static WebElement  new_DeleteBtn;



			@FindBy(xpath="//span[@class='icon-menu icon-font4']")
			public static WebElement  toggleBtn;

			@FindBy(xpath="//*[@id='id_transactionentry_copydocument']")
			public static WebElement  copyDocumentOption;

			@FindBy(xpath="//*[@id='id_transactionentry_copytoclipboard']")
			public static WebElement  copyToClipBoardOption;                  

			@FindBy(xpath="//*[@id='id_transactionentry_pastefromclipboard']")
			public static WebElement  pasteFromClipBoardOption;

			@FindBy(xpath="//*[@id='id_transactionentry_raisechequereturn']")
			public static WebElement  raiseCheckReturnOption;

			@FindBy(xpath="//*[@id='id_transactionentry_addtostock']")
			public static WebElement  addToStockOption;

			@FindBy(xpath="//*[@id='id_transactionentry_markconvert']")
			public static WebElement  markConvertedOption;

			@FindBy(xpath="//*[@id='id_transactionentry_bominput']")
			public static WebElement  bomInputOption;

			@FindBy(xpath="//*[@id='id_transactionentry_autoallocate']")
			public static WebElement  autoAllocateOption;

			@FindBy(xpath="//*[@id='id_transactionentry_reverseentry']")
			public static WebElement  reverseEntryOption;

			@FindBy(xpath="//*[@id='id_transactionentry_printbarcode']")
			public static WebElement  printBarcodeOption;

			@FindBy(xpath="//*[@id='id_transactionentry_postingdetails']")
			public static WebElement  postingDetailsOption;

			@FindBy(xpath="//*[@id='id_transactionentry_exporttoxml']")
			public static WebElement  exportToXMLOption;

			@FindBy(xpath="//*[@id='id_transactionentry_settings']")
			public static WebElement  settingsOption;


			////// Header Section Completed

			// Main Section
			@FindBy(xpath="//input[@id='id_header_1']")
			public static WebElement  documentNumberTxt;



			@FindBy(xpath="//*[@id='id_header_1_input_image']/span")
			public static WebElement  documentNumberDropdown_ExpansionBtn;

			@FindBy(xpath="//input[@id='id_header_2']")
			public static WebElement  dateTxt;

			@FindBy(xpath="//td[@id='id_header_2_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
			public static WebElement  dateTxt_CalenderBtn;

			@FindBy(xpath="//tr[@id='id_header_2_day_today']//span[@class='theme_color-inverse'][contains(text(),'Today')]")
			public static WebElement  calender_TodayBtn;


			@FindBy(xpath="//input[@id='id_header_4']")
			public static WebElement  cashBankAccountTxt;

			@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
			public static WebElement  cashBankAccount_ExpansionBtn;

			@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
			public static WebElement  cashBankAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
			public static WebElement  cashBankAccount_Settings_Container;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
			public static WebElement  cashBankAccount_Settings_StandardFieldsBtn;

			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
			public static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Fielddropdown;

			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
			public static WebElement  cashBankAccount_Settings_StandardFieldsBtn_HeaderTxt;

			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
			public static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Alignmentdropdown;

			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
			public static WebElement  cashBankAccount_Settings_StandardFieldsBtn_WidthTxt;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  cashBankAccount_Settings_StandardFieldsBtn_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  cashBankAccount_Settings_StandardFieldsBtn_CancelBtn;


			@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
			public static WebElement  cashBankAccount_Settings_DeleteColumnBtn;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  cashBankAccount_Settings_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  cashBankAccount_Settings_CancelBtn;

			@FindBy(xpath="//input[@id='id_header_268435459']")
			public static WebElement  departmentTxt;

			@FindBy(xpath="//*[@id='id_header_268435459_input_image']/span")
			public static WebElement  department_ExpansionBtn;

			@FindBy(xpath="//*[@id='id_header_268435459_input_settings']/span")
			public static WebElement  department_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_container']")
			public static WebElement  department_Settings_Container;

			@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_footer']//input[1]")
			public static WebElement  department_Settings_StandardFieldsBtn;

			@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_list']")
			public static WebElement  department_Settings_StandardFieldsBtn_Fielddropdown;

			@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_header']")
			public static WebElement  department_Settings_StandardFieldsBtn_HeaderTxt;

			@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_alignment']")
			public static WebElement  department_Settings_StandardFieldsBtn_Alignmentdropdown;

			@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_width']")
			public static WebElement  department_Settings_StandardFieldsBtn_WidthTxt;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  department_Settings_StandardFieldsBtn_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  department_Settings_StandardFieldsBtn_CancelBtn;


			@FindBy(xpath="//div[@id='id_header_268435459_search_container']//input[2]")
			public static WebElement  department_Settings_DeleteColumnBtn;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  department_Settings_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  department_Settings_CancelBtn;

			@FindBy(xpath="//*[@id='id_header_6']")
			public static WebElement  maturityDateTxt;

			@FindBy(xpath="//*[@id='id_header_6_input_image']/span']")
			public static WebElement  maturityDateTxt_CalenderBtn;

			@FindBy(xpath="//input[@id='id_header_3']")
			public static WebElement  purchaseAccountTxt;

			@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
			public static WebElement  purchaseAccount_ExpansionBtn;

			@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
			public static WebElement  purchaseAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
			public static WebElement  purchaseAccount_Settings_Container;

			@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
			public static WebElement  purchaseAccount_Settings_StandardFieldsBtn;

			@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
			public static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Fielddropdown;

			@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
			public static WebElement  purchaseAccount_Settings_StandardFieldsBtn_HeaderTxt;

			@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
			public static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Alignmentdropdown;

			@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
			public static WebElement  purchaseAccount_Settings_StandardFieldsBtn_WidthTxt;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  purchaseAccount_Settings_StandardFieldsBtn_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  purchaseAccount_Settings_StandardFieldsBtn_CancelBtn;


			@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
			public static WebElement  purchaseAccount_Settings_DeleteColumnBtn;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  purchaseAccount_Settings_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  purchaseAccount_Settings_CancelBtn;


			@FindBy(xpath="//input[@id='id_header_4']")
			public static WebElement  vendorAccountTxt;

			@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
			public static WebElement  vendorAccount_ExpansionBtn;

			@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
			public static WebElement  vendorAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
			public static WebElement  vendorAccount_Settings_Container;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
			public static WebElement  vendorAccount_Settings_StandardFieldsBtn;

			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
			public static WebElement  vendorAccount_Settings_StandardFieldsBtn_Fielddropdown;

			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
			public static WebElement  vendorAccount_Settings_StandardFieldsBtn_HeaderTxt;

			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
			public static WebElement  vendorAccount_Settings_StandardFieldsBtn_AlignmentDropdown;

			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
			public static WebElement  vendorAccount_Settings_StandardFieldsBtn_WidthTxt;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  vendorAccount_Settings_StandardFieldsBtn_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  vendorAccount_Settings_StandardFieldsBtn_CancelBtn;


			@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
			public static WebElement  vendorAccount_Settings_DeleteColumnBtn;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  vendorAccount_Settings_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  vendorAccount_Settings_CancelBtn;

			@FindBy(xpath="//input[@id='id_header_3']")
			public static WebElement  salesAccountTxt;

			@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
			public static WebElement  salesAccount_ExpansionBtn;

			@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
			public static WebElement  salesAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
			public static WebElement  salesAccount_Settings_Container;

			@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
			public static WebElement  salesAccount_Settings_StandardFieldsBtn;

			@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
			public static WebElement  salesAccount_Settings_StandardFieldsBtn_Fielddropdown;

			@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
			public static WebElement  salesAccount_Settings_StandardFieldsBtn_HeaderTxt;

			@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
			public static WebElement  salesAccount_Settings_StandardFieldsBtn_Alignmentdropdown;

			@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
			public static WebElement  salesAccount_Settings_StandardFieldsBtn_WidthTxt;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  salesAccount_Settings_StandardFieldsBtn_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  salesAccount_Settings_StandardFieldsBtn_CancelBtn;


			@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
			public static WebElement  salesAccount_Settings_DeleteColumnBtn;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  salesAccount_Settings_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  salesAccount_Settings_CancelBtn;

			@FindBy(xpath="//input[@id='id_header_4']")
			public static WebElement  customerAccountTxt;

			@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
			public static WebElement  customerAccount_ExpansionBtn;

			@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
			public static WebElement  customerAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
			public static WebElement  customerAccount_Settings_Container;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
			public static WebElement  customerAccount_Settings_StandardFieldsBtn;

			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
			public static WebElement  customerAccount_Settings_StandardFieldsBtn_FieldDrpdwn;

			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
			public static WebElement  customerAccount_Settings_StandardFieldsBtn_HeaderTxt;

			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
			public static WebElement  customerAccount_Settings_StandardFieldsBtn_AlignmentDrpdwn;

			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
			public static WebElement  customerAccount_Settings_StandardFieldsBtn_WidthTxt;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  customerAccount_Settings_StandardFieldsBtn_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  customerAccount_Settings_StandardFieldsBtn_CancelBtn;


			@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
			public static WebElement  customerAccount_Settings_DeleteColumnBtn;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  customerAccount_Settings_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  customerAccount_Settings_CancelBtn;

			@FindBy(xpath="//input[@id='id_header_12']")
			public static WebElement  accountTxt;

			@FindBy(xpath="//*[@id='id_header_12_input_image']/span")
			public static WebElement  account_ExpansionBtn;

			@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
			public static WebElement  account_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
			public static WebElement  account_Settings_Container;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
			public static WebElement  account_Settings_StandardFieldsBtn;

			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
			public static WebElement  account_Settings_StandardFieldsBtn_FieldDrpdwn;

			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
			public static WebElement  account_Settings_StandardFieldsBtn_HeaderTxt;

			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
			public static WebElement  account_Settings_StandardFieldsBtn_Alignmentdrpdwn;

			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
			public static WebElement  account_Settings_StandardFieldsBtn_WidthTxt;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  account_Settings_StandardFieldsBtn_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  account_Settings_StandardFieldsBtn_CancelBtn;


			@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
			public static WebElement  account_Settings_DeleteColumnBtn;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  account_Settings_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  account_Settings_CancelBtn;

			@FindBy(xpath="//input[@id='id_header_31']")
			public static WebElement  issuesReceiptsTxt;

			@FindBy(xpath="//input[@id='id_header_268435460']")
			public static WebElement  warehouseTxt;

			@FindBy(xpath="//*[@id='id_header_268435460_input_image']/span")
			public static WebElement  warehouse_ExpansionBtn;

			@FindBy(xpath="//*[@id='id_header_268435460_input_settings']/span")
			public static WebElement  warehouse_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_container']")
			public static WebElement  warehouse_Settings_Container;

			@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_footer']//input[1]")
			public static WebElement  warehouse_Settings_StandardFieldsBtn;

			@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_list']")
			public static WebElement  warehouse_Settings_StandardFieldsBtn_Fielddropdown;

			@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_header']")
			public static WebElement  warehouse_Settings_StandardFieldsBtn_HeaderTxt;

			@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_alignment']")
			public static WebElement  warehouse_Settings_StandardFieldsBtn_Alignmentdropdown;

			@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_width']")
			public static WebElement  warehouse_Settings_StandardFieldsBtn_WidthTxt;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  warehouse_Settings_StandardFieldsBtn_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  warehouse_Settings_StandardFieldsBtn_CancelBtn;

			@FindBy(xpath="//div[@id='id_header_268435460_search_container']//input[2]")
			public static WebElement  warehouse_Settings_DeleteColumnBtn;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  warehouse_Settings_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  warehouse_Settings_CancelBtn;

			@FindBy(xpath="//span[contains(text(),'sName')]")
			public static WebElement  customize_sName;

			@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Code')]")
			public static WebElement  customize_sCode;

			@FindBy(xpath="//span[contains(text(),'Alias')]")
			public static WebElement  customize_Alias;

			@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Group')]")
			public static WebElement  customize_bGroup;

			@FindBy(xpath="//span[contains(@class,'vcenter')][contains(text(),'Balance')]")
			public static WebElement  customize_Balance;

			@FindBy(xpath="//input[@id='id_header_67108920']")
			public static WebElement  appropriateBasedOnDrpdwn;

			@FindBy(xpath="//input[@id='id_header_67108921']")
			public static WebElement  additionalValueTxt;

			@FindBy(xpath="//input[@id='id_header_21']")
			public static WebElement  raiseReceiptsChkBox;

			@FindBy(xpath="//input[@id='id_header_67108865']")
			public static WebElement  receipts_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108868']")
			public static WebElement  payments_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108871']")
			public static WebElement  pettyCash_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108874']")
			public static WebElement  postDatedReceipts_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108865']")
			public static WebElement  postDatedPayments_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108924']")
			public static WebElement  purchaseVouchers_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108881']")
			public static WebElement  purchaseReturns_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108884']")
			public static WebElement  salesInvoice_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108885']")
			public static WebElement  salesReturns_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108913']")
			public static WebElement  cashSales_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108914']")
			public static WebElement  hirePurchaseSales_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108890']")
			public static WebElement  journalEntries_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108916']")
			public static WebElement  forexJV_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108910']")
			public static WebElement  interDepartmentalJV_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108888']")
			public static WebElement  nonStandardJournalEntries_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108892']")
			public static WebElement  debitNotes_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108911']")
			public static WebElement  debitNotesLineWise_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108893']")
			public static WebElement  creditNotes_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108912']")
			public static WebElement  creditNotesLineWisePayroll_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108894']")
			public static WebElement  openingBalance_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108891']")
			public static WebElement  fixedAssetDepreciationVoucher_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108909']")
			public static WebElement  requestForQuote_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108903']")
			public static WebElement  purchasesQuotations_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108882']")
			public static WebElement  purchasesOrders_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108882']")
			public static WebElement  materialReceiptsNotes_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108904']")
			public static WebElement  salesQuotations_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108887']")
			public static WebElement  deliveryNotes_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108917']")
			public static WebElement  posSales_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108918']")
			public static WebElement  productionOrder_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108886']")
			public static WebElement  salesOrders_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108895']")
			public static WebElement  shortageInStock_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108896']")
			public static WebElement  excessesInStock_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108897']")
			public static WebElement  stockTransfers_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108898']")
			public static WebElement  openingStocks_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108923']")
			public static WebElement  openingStocksNEW_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108908']")
			public static WebElement  materialRequisition_NarrationTxt;

			@FindBy(xpath="//input[@id='id_header_67108866']")
			public static WebElement  receipts_ChequeNoTxt;

			@FindBy(xpath="//input[@id='id_header_67108869']")
			public static WebElement  payments_ChequeNoTxt;

			@FindBy(xpath="//input[@id='id_header_67108872']")
			public static WebElement  pettyCash_ChequeNoTxt;

			@FindBy(xpath="//input[@id='id_header_67108875']")
			public static WebElement  postDatedReceipts_ChequeNoTxt;

			@FindBy(xpath="//input[@id='id_header_67108878']")
			public static WebElement  postDatedPayments_ChequeNoTxt;



			@FindBy(xpath="//input[@id='id_body_536870916']")
			public static WebElement  pvWarehouseTxt;

			@FindBy(xpath="//td[@id='id_body_536870916_input_image']//span[@class='icon-down-arrow optioncontrol_arrow_margin']")
			public static WebElement  pvWarehouse_ExpansionBtn;

			@FindBy(xpath="//td[@id='id_body_536870916_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
			public static WebElement  pvWarehouse_SettingsBtn;

			@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_container']")
			public static WebElement  pvWarehouse_Settings_Container;

			@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_footer']//input[1]")
			public static WebElement  pvWarehouse_Settings_StandardFieldsBtn;

			@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_list']")
			public static WebElement  pvWarehouse_Settings_StandardFieldsBtn_Fielddropdown;

			@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_header']")
			public static WebElement  pvWarehouse_Settings_StandardFieldsBtn_HeaderTxt;

			@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_alignment']")
			public static WebElement  pvWarehouse_Settings_StandardFieldsBtn_Alignmentdropdown;

			@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_width']")
			public static WebElement  pvWarehouse_Settings_StandardFieldsBtn_WidthTxt;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  pvWarehouse_Settings_StandardFieldsBtn_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  pvWarehouse_Settings_StandardFieldsBtn_CancelBtn;

			@FindBy(xpath="//div[@id='id_body_536870916_search_container']//input[2]")
			public static WebElement  pvWarehouse_Settings_DeleteColumnBtn;

			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  pvWarehouse_Settings_OkBtn;

			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  pvWarehouse_Settings_CancelBtn;

			// Grid Elements


			@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
			public static WebElement  grid_Header_Account;

			@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
			public static WebElement  grid_Header_Item;

			@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
			public static WebElement  grid_Header_DebitAC;

			@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_2']")
			public static WebElement  Grid_Header_CreditAC;

			//

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[1]")
			public static WebElement  firstRowIndex;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[1]")
			public static WebElement  secondRowIndex;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[1]")
			public static WebElement  thirdRowIndex;

			@FindBy(xpath="//a[@class='dropdown-item py-0']/label[text()='Delete Row']")   //span[@class='icon-delete icon-font8']
			public static WebElement  deleteRowBtn;

			@FindBy(xpath="//span[@class='icon-insertrow icon-font8']")
			public static WebElement  insertRowBtn;

			@FindBy(xpath="//span[@class='icon-selectall icon-font8']")
			public static WebElement  selectRowBtn;

			@FindBy(xpath="//span[@class='icon-unselectall1 icon-font8']")
			public static WebElement  unSelectRowBtn;

			@FindBy(xpath="//span[@class='icon-clone icon-font8']")
			public static WebElement  duplicateRowBtn;

			//

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_14']")
			public static WebElement  pvEntryPageTableHeader14thCol;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_15']")
			public static WebElement  pvEntryPageTableHeader15thCol;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_16']")
			public static WebElement  pvEntryPageTableHeader16thCol;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[2]")
			public static WebElement  select1stRow_1stColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[3]")
			public static WebElement  select1stRow_2ndColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[4]")
			public static WebElement  select1stRow_3rdColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[5]")
			public static WebElement  select1stRow_4thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[6]")
			public static WebElement  select1stRow_5thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[7]")
			public static WebElement  select1stRow_6thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[8]")
			public static WebElement  select1stRow_7thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[9]")
			public static WebElement  select1stRow_8thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[10]")
			public static WebElement  select1stRow_9thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[11]")
			public static WebElement  select1stRow_10thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[12]")
			public static WebElement  select1stRow_11thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[13]")
			public static WebElement  select1stRow_12thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[14]")
			public static WebElement  select1stRow_13thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[15]")
			public static WebElement  select1stRow_14thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[16]")
			public static WebElement  select1stRow_15thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[17]")
			public static WebElement  select1stRow_16thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[18]")
			public static WebElement  select1stRow_17thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[19]")
			public static WebElement  select1stRow_18thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[20]")
			public static WebElement  select1stRow_19thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[21]")
			public static WebElement  select1stRow_20thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[22]")
			public static WebElement  select1stRow_21stColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[23]")
			public static WebElement  select1stRow_22ndColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[24]")
			public static WebElement  select1stRow_23rdColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[25]")
			public static WebElement  select1stRow_24thColumn;


			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[1]")
			public static WebElement selectSerialNo2;

			@FindBy (xpath="//div[contains(text(),'Delete Row')]")
			public static WebElement selectSerialNoDeleteRow; 

			@FindBy (xpath="//div[contains(text(),'Insert Row')]")
			public static WebElement selectSerialNoInsertRow;

			@FindBy (xpath="//div[contains(text(),'Select Row')]")
			public static WebElement selectSerialNoSelectRow;

			@FindBy (xpath="//div[contains(text(),'Duplicate Row')]")
			public static WebElement selectSerialNoDuplicateRow;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[2]")
			public static WebElement  select2ndRow_1stColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[3]")
			public static WebElement  select2ndRow_2ndColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[4]")
			public static WebElement  select2ndRow_3rdColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[5]")
			public static WebElement  select2ndRow_4thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[6]")
			public static WebElement  select2ndRow_5thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[7]")
			public static WebElement  select2ndRow_6thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[8]")
			public static WebElement  select2ndRow_7thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[9]")
			public static WebElement  select2ndRow_8thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[10]")
			public static WebElement  select2ndRow_9thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[11]")
			public static WebElement  select2ndRow_10thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[12]")
			public static WebElement  select2ndRow_11thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[13]")
			public static WebElement  select2ndRow_12thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[14]")
			public static WebElement  select2ndRow_13thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[15]")
			public static WebElement  select2ndRow_14thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[16]")
			public static WebElement  select2ndRow_15thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[17]")
			public static WebElement  select2ndRow_16thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[18]")
			public static WebElement  select2ndRow_17thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[19]")
			public static WebElement  select2ndRow_18thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[20]")
			public static WebElement  select2ndRow_19thColumn;


			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[2]")
			public static WebElement  select3rdRow_1stColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[3]")
			public static WebElement  select3rdRow_2ndColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[4]")
			public static WebElement  select3rdRow_3rdColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[5]")
			public static WebElement  select3rdRow_4thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[6]")
			public static WebElement  select3rdRow_5thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[7]")
			public static WebElement  select3rdRow_6thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[8]")
			public static WebElement  select3rdRow_7thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[9]")
			public static WebElement  select3rdRow_8thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[10]")
			public static WebElement  select3rdRow_9thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[11]")
			public static WebElement  select3rdRow_10thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[12]")
			public static WebElement  select3rdRow_11thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[13]")
			public static WebElement  select3rdRow_12thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[14]")
			public static WebElement  select3rdRow_13thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[15]")
			public static WebElement  select3rdRow_14thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[16]")
			public static WebElement  select3rdRow_15thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[17]")
			public static WebElement  select3rdRow_16thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[18]")
			public static WebElement  select3rdRow_17thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[19]")
			public static WebElement  select3rdRow_18thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[20]")
			public static WebElement  select3rdRow_19thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[21]")
			public static WebElement  select3rdRow_20thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[22]")
			public static WebElement  select3rdRow_21stColumn;





			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[2]")
			public static WebElement  select4thRow_1stColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[3]")
			public static WebElement  select4thRow_2ndColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[4]")
			public static WebElement  select4thRow_3rdColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[5]")
			public static WebElement  select4thRow_4thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[6]")
			public static WebElement  select4thRow_5thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[7]")
			public static WebElement  select4thRow_6thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[8]")
			public static WebElement  select4thRow_7thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[9]")
			public static WebElement  select4thRow_8thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[10]")
			public static WebElement  select4thRow_9thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[11]")
			public static WebElement  select4thRow_10thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[12]")
			public static WebElement  select4thRow_11thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[13]")
			public static WebElement  select4thRow_12thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[14]")
			public static WebElement  select4thRow_13thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[15]")
			public static WebElement  select4thRow_14thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[16]")
			public static WebElement  select4thRow_15thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[17]")
			public static WebElement  select4thRow_16thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[18]")
			public static WebElement  select4thRow_17thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[19]")
			public static WebElement  select4thRow_18thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[20]")
			public static WebElement  select4thRow_19thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[21]")
			public static WebElement  select4thRow_20thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[22]")
			public static WebElement  select4thRow_21stColumn;





			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[2]")
			public static WebElement  select5thRow_1stColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[3]")
			public static WebElement  select5thRow_2ndColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[4]")
			public static WebElement  select5thRow_3rdColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[5]")
			public static WebElement  select5thRow_4thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[6]")
			public static WebElement  select5thRow_5thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[7]")
			public static WebElement  select5thRow_6thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[8]")
			public static WebElement  select5thRow_7thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[9]")
			public static WebElement  select5thRow_8thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[10]")
			public static WebElement  select5thRow_9thColumn;




			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[2]")
			public static WebElement  select6thRow_1stColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[3]")
			public static WebElement  select6thRow_2ndColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[4]")
			public static WebElement  select6thRow_3rdColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[5]")
			public static WebElement  select6thRow_4thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[6]")
			public static WebElement  select6thRow_5thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[7]")
			public static WebElement  select6thRow_6thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[8]")
			public static WebElement  select6thRow_7thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[9]")
			public static WebElement  select6thRow_8thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[10]")
			public static WebElement  select6thRow_9thColumn;



			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[2]")
			public static WebElement  select7thRow_1stColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[3]")
			public static WebElement  select7thRow_2ndColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[4]")
			public static WebElement  select7thRow_3rdColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[5]")
			public static WebElement  select7thRow_4thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[6]")
			public static WebElement  select7thRow_5thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[7]")
			public static WebElement  select7thRow_6thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[8]")
			public static WebElement  select7thRow_7thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[9]")
			public static WebElement  select7thRow_8thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[10]")
			public static WebElement  select7thRow_9thColumn;




			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[2]")
			public static WebElement  select8thRow_1stColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[3]")
			public static WebElement  select8thRow_2ndColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[4]")
			public static WebElement  select8thRow_3rdColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[5]")
			public static WebElement  select8thRow_4thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[6]")
			public static WebElement  select8thRow_5thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[7]")
			public static WebElement  select8thRow_6thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[8]")
			public static WebElement  select8thRow_7thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[9]")
			public static WebElement  select8thRow_8thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[10]")
			public static WebElement  select8thRow_9thColumn;



			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[2]")
			public static WebElement  select9thRow_1stColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[3]")
			public static WebElement  select9thRow_2ndColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[4]")
			public static WebElement  select9thRow_3rdColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[5]")
			public static WebElement  select9thRow_4thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[6]")
			public static WebElement  select9thRow_5thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[7]")
			public static WebElement  select9thRow_6thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[8]")
			public static WebElement  select9thRow_7thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[9]")
			public static WebElement  select9thRow_8thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[10]")
			public static WebElement  select9thRow_9thColumn;




			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[2]")
			public static WebElement  select10thRow_1stColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[3]")
			public static WebElement  select10thRow_2ndColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[4]")
			public static WebElement  select10thRow_3rdColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[5]")
			public static WebElement  select10thRow_4thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[6]")
			public static WebElement  select10thRow_5thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[7]")
			public static WebElement  select10thRow_6thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[8]")
			public static WebElement  select10thRow_7thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[9]")
			public static WebElement  select10thRow_8thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[10]")
			public static WebElement  select10thRow_9thColumn;



			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[2]")
			public static WebElement  select11thRow_1stColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[3]")
			public static WebElement  select11thRow_2ndColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[4]")
			public static WebElement  select11thRow_3rdColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[5]")
			public static WebElement  select11thRow_4thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[6]")
			public static WebElement  select11thRow_5thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[7]")
			public static WebElement  select11thRow_6thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[8]")
			public static WebElement  select11thRow_7thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[9]")
			public static WebElement  select11thRow_8thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[10]")
			public static WebElement  select11thRow_9thColumn;





			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[2]")
			public static WebElement  select12thRow_1stColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[3]")
			public static WebElement  select12thRow_2ndColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[4]")
			public static WebElement  select12thRow_3rdColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[5]")
			public static WebElement  select12thRow_4thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[6]")
			public static WebElement  select12thRow_5thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[7]")
			public static WebElement  select12thRow_6thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[8]")
			public static WebElement  select12thRow_7thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[9]")
			public static WebElement  select12thRow_8thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[10]")
			public static WebElement  select12thRow_9thColumn;


			@FindBy(xpath="//input[@id='id_body_12']")
			public static WebElement  enter_AccountTxt;

			@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
			public static WebElement  enter_Account_ExpansionBtn;

			@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
			public static WebElement  enter_Account_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
			public static WebElement  enter_Account_Settings_Container;

			@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
			public static WebElement  enter_Account_Settings_StandardFieldsBtn;

			@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
			public static WebElement  enter_Account_Settings_StandardFieldsBtn_FieldDrpdwn;

			@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
			public static WebElement  enter_Account_Settings_StandardFieldsBtn_HeaderTxt;

			@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
			public static WebElement  enter_Account_Settings_StandardFieldsBtn_AlignmentDrpdwn;

			@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
			public static WebElement  enter_Account_Settings_StandardFieldsBtn_WidthTxt;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			public static WebElement  enter_Account_Settings_StandardFieldsBtn_OkBtn;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			public static WebElement  enter_Account_Settings_StandardFieldsBtn_CancelBtn;

			@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
			public static WebElement  enter_Account_Settings_DeleteColumnBtn;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			public static WebElement  enter_Account_Settings_OkBtn;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			public static WebElement  enter_Account_Settings_CancelBtn;

			@FindBy(xpath="//input[@id='id_body_16']")
			public static WebElement  enter_Amount;

			@FindBy(xpath="//textarea[@id='id_body_16777219']")
			public static WebElement  enter_Receipts_Remarks;

			@FindBy(xpath="//textarea[@id='id_body_16777222']")
			public static WebElement  enter_Payments_Remarks;

			@FindBy(xpath="//textarea[@id='id_body_16777225']")
			public static WebElement  enter_PettyCash_Remarks;

			@FindBy(xpath="//textarea[@id='id_body_16777228']")
			public static WebElement  enter_PostDatedReceipts_Remarks;

			@FindBy(xpath="//textarea[@id='id_body_16777231']")
			public static WebElement  enter_PostDatedPaymentss_Remarks;

			@FindBy(xpath="//input[@id='id_body_23']")
			public static WebElement  enter_ItemTxt;

			@FindBy(xpath="//input[@id='id_body_12']")
			public static WebElement  enter_SalesAccountTxt;


			@FindBy(xpath="//*[@id='id_body_23_input_image']/span")
			public static WebElement  item_ExpansionBtn;

			@FindBy(xpath="//*[@id='id_body_23_input_settings']/span")
			public static WebElement  item_SettingsBtn;

			@FindBy(xpath="//div[@id='id_body_23_customize_popup_container']")
			public static WebElement  item_Settings_Container;

			@FindBy(xpath="//div[@id='id_body_23_customize_popup_footer']//input[1]")
			public static WebElement  item_Settings_StandardFieldsBtn;

			@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_list']")
			public static WebElement  item_Settings_StandardFieldsBtn_FieldDrpdwn;

			@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_header']")
			public static WebElement  item_Settings_StandardFieldsBtn_HeaderTxt;

			@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_alignment']")
			public static WebElement  item_Settings_StandardFieldsBtn_AlignmentDrpdwn;

			@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_width']")
			public static WebElement  item_Settings_StandardFieldsBtn_WidthTxt;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			public static WebElement  item_Settings_StandardFieldsBtn_OkBtn;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			public static WebElement  item_Settings_StandardFieldsBtn_CancelBtn;

			@FindBy(xpath="//div[@id='id_body_23_search_container']//input[2]")
			public static WebElement  item_Settings_DeleteColumnBtn;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			public static WebElement  item_Settings_OkBtn;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			public static WebElement  item_Settings_CancelBtn;

			@FindBy(xpath="//input[@id='id_body_26']")
			public static WebElement  enter_Quantity;

			@FindBy(xpath="//input[@id='id_body_27']")
			public static WebElement  enter_Rate;

			@FindBy(xpath="//input[@id='id_body_28']")
			public static WebElement  enter_Gross;
			
			
			@FindBy (xpath="//input[@id='id_body_38']")
			public static WebElement enter_RMA;

			@FindBy(xpath="//input[@id='id_body_13']")
			public static WebElement  enter_Batch;

			@FindBy(xpath="//input[@id='id_body_12']")
			public static WebElement  enter_DebitACTxt;

			@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
			public static WebElement  enter_DebitAC_ExpansionBtn;

			@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
			public static WebElement  enter_DebitAC_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
			public static WebElement  enter_DebitAC_Settings_Container;

			@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
			public static WebElement  enter_DebitAC_Settings_StandardFieldsBtn;

			@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
			public static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_FieldDrpdwn;

			@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
			public static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_HeaderTxt;

			@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
			public static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_AlignmentDrpdwn;

			@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
			public static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_WidthTxt;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			public static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_OkBtn;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			public static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_CancelBtn;

			@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
			public static WebElement  enter_DebitAC_Settings_DeleteColumnBtn;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			public static WebElement  enter_DebitAC_Settings_OkBtn;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			public static WebElement  enter_DebitAC_Settings_CancelBtn;

			@FindBy(xpath="//input[@id='id_body_39']")
			public static WebElement  enter_CreditACTxt;

			@FindBy(xpath="//*[@id='id_body_39_input_image']/span")
			public static WebElement  enter_CreditAC_ExpansionBtn;

			@FindBy(xpath="//*[@id='id_body_39_input_settings']/span")
			public static WebElement  enter_CreditAC_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_39_customize_popup_container']")
			public static WebElement  enter_CreditAC_Settings_Container;

			@FindBy(xpath="//div[@id='id_header_39_customize_popup_footer']//input[1]")
			public static WebElement  enter_CreditAC_Settings_StandardFieldsBtn;

			@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_list']")
			public static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Fielddropdown;

			@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_header']")
			public static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_HeaderTxt;

			@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_alignment']")
			public static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Alignmentdropdown;

			@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_width']")
			public static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_WidthTxt;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			public static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_OkBtn;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			public static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_CancelBtn;

			@FindBy(xpath="//div[@id='id_header_39_search_container']//input[2]")
			public static WebElement  enter_CreditAC_Settings_DeleteColumnBtn;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			public static WebElement  enter_CreditAC_Settings_OkBtn;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			public static WebElement  enter_CreditAC_Settings_CancelBtn;

			@FindBy(xpath="//input[@id='id_body_18']")
			public static WebElement  enter_DebitTxt;

			@FindBy(xpath="//input[@id='id_body_19']")
			public static WebElement  enter_CreditTxt;

			@FindBy(xpath="//textarea[@id='id_body_16777241']")
			public static WebElement  enter_NonStandardJournalEntries_RemarksTxt;

			@FindBy(xpath="//input[@id='id_body_87']")
			public static WebElement  enter_Warehouse2Txt;

			@FindBy(xpath="//*[@id='id_body_87_input_image']/span")
			public static WebElement  enter_Warehouse2_ExpansionBtn;

			@FindBy(xpath="//*[@id='id_body_87_input_settings']/span")
			public static WebElement  enter_Warehouse2_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_87_customize_popup_container']")
			public static WebElement  enter_WareHouse2_Settings_Container;

			@FindBy(xpath="//div[@id='id_header_87_customize_popup_footer']//input[1]")
			public static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn;

			@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_list']")
			public static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Fielddropdown;

			@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_header']")
			public static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_HeaderTxt;

			@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_alignment']")
			public static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Alignmentdropdown;

			@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_width']")
			public static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_WidthTxt;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			public static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_OkBtn;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			public static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_CancelBtn;

			@FindBy(xpath="//div[@id='id_header_87_search_container']//input[2]")
			public static WebElement  enter_WareHouse2_Settings_DeleteColumnBtn;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			public static WebElement  enter_WareHouse2_Settings_OkBtn;

			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			public static WebElement  enter_WareHouse2_Settings_CancelBtn;




			@FindBy(xpath="//span[contains(@class,'icon-settings icon-font1')]")
			public static WebElement settingsMenu;

			@FindBy(xpath="//a[@id='74']//span[contains(text(),'Design Workflow')]")
			public static WebElement designWorkflowbtn; 

			@FindBy(xpath="//div[@class='navText']//span[contains(text(),'Design Workflow')]")
			public static WebElement designWorkflowLabel; 

			@FindBy(xpath="//i[@class='icon icon-clear icon-font6']")
			public static WebElement clearBtn; 

			@FindBy(xpath="//a[@id='btnCancel']")
			public static WebElement closeBtn;

			@FindBy(xpath="//input[@id='optWorkflow']")
			public static WebElement workflowNameTxt; 

			@FindBy(xpath="//*[@id='optWorkflow_input_settings']/span")
			public static WebElement workFlowNameSettingsBtn; 

			@FindBy(xpath="//*[@id='optWorkflow_customize_popup_heading']")
			public static WebElement workflowNameCustomizeDisplayColoumnLabel;

			@FindBy(xpath="//*[@id='optWorkflow_customize_popup_container']")
			public static WebElement workflowNameContainerTxt;

			@FindBy(xpath="///*[@id='optWorkflow_customize_popup_footer']/div/div/input[1]")
			public static WebElement workFlowNameStandardFieldsBtn;

			@FindBy(xpath="//*[@id='optWorkflow_customize_popup_standardfields_list']")
			public static WebElement workFlowNameFiledDropdown;

			@FindBy(xpath="//*[@id='optWorkflow_customize_popup_standardfields_header']")
			public static WebElement workFlowNameHeaderTxt;

			@FindBy(xpath="//*[@id='optWorkflow_customize_popup_standardfields_alignment']")
			public static WebElement workFlowNameAlignmentDropdown;

			@FindBy(xpath="//*[@id='optWorkflow_customize_popup_standardfields_width']")
			public static WebElement workFlowNameWidthTxt;

			@FindBy(xpath="//*[@id='optWorkflow_customize_popup_footer']/div/div/input[3]")
			public static WebElement workFlowNameStandardFieldsOkBtn;

			@FindBy(xpath="//*[@id='optWorkflow_customize_popup_footer']/div/div/input[4]")
			public static WebElement workFlowNameStandardFieldsCancelBtn;

			@FindBy(xpath="//*[@id='optWorkflow_customize_popup_footer']/div/div/input[2]")
			public static WebElement workFlowNameDeleteColoumnBtn;

			@FindBy(xpath="//*[@id='optWorkflow_customize_popup_footer']/div/div/input[3]")
			public static WebElement workFlowNameOkBtn;

			@FindBy(xpath="//*[@id='optWorkflow_customize_popup_footer']/div/div/input[4]")
			public static WebElement workFlowNameCancelBtn;
			
			// Reindexing popup

			@FindBy (xpath="//div[@id='ReIndexingError_Modal']/div/div")
			public static WebElement reindexingPopup;

			@FindBy (xpath="(//div[@id='ReIndexingError_Modal']//div/button)[1]")
			public static WebElement reindexingPopupCloseBtn;

			@FindBy (xpath="(//div[@id='ReIndexingError_Modal']//div/button)[2]")
			public static WebElement reindexingPopupCancelBtn;

			@FindBy (xpath="//div[@id='ReIndexingError_Modal']//div/input")
			public static WebElement reindexingPopupSaveBtn;
			
			@FindBy(xpath="//*[@id='140']")
			public static WebElement  inventoryTransactionsSalesMenu; 

			@FindBy(xpath="//a[contains(text(),'Inventory Options')]")
			public static WebElement  inventoryTab;
			
			@FindBy(xpath="//button[contains(text(),'Inventory Settings')]")
			public static WebElement  inventorySettingsBtn;
			
			@FindBy(xpath="//button[contains(text(),'Batch and Bins')]")
			public static WebElement  inventoryBatchAndBinsBtn;

			@FindBy(xpath="//select[@id='inventoryOpt_ReservationType']")
			public static WebElement  inventoryTabReservationTypeDrpddwn;

			@FindBy(xpath="//a[@id='updateButton']")
			public static WebElement  updateBtn;

			@FindBy(xpath="//a[@id='btnCustomizeClose']")
			public static WebElement  settings_closeBtn;
			
			@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td")
			public static List<WebElement> customerAccountListCount; 

			@FindBy(xpath="//input[@id='id_body_536870916']")
			public static WebElement  pvWareHouseTxt;

			@FindBy(xpath="//tbody[@id='id_body_536870916_table_body']/tr/td")
			public static List<WebElement> pvwareHouseListCount;

			@FindBy(xpath="//input[@id='id_body_33554460']")
			public static WebElement so_enter_AQTxt;

			@FindBy(xpath="//input[@id='id_body_33554461']")
			public static WebElement so_enter_FQTxt;

			@FindBy(xpath="//li[@id='btnPickQuantity']")
			public static WebElement res_PickBtn;

			@FindBy(xpath="//div[contains(text(),'Discard')]")
			public static WebElement res_DiscardBtn;

			@FindBy(xpath="//div[text()='Ok']") //div[@class='col-sm-12 footer_button_image']//span[@class='icon-ok icon-font6']
			public static WebElement res_OkBtn;

			@FindBy(xpath="//div[text()='Close']")
			public static WebElement res_CloseBtn;

			@FindBy(xpath="//*[@id='Id_BinReservation_FGrid_body']/tr/td")
			public  static List<WebElement> binReservationPopGridBody;

			@FindBy(xpath="//*[@id='Id_BinReservation_FGrid_body']/tr/td[5]")
			public  static List<WebElement> binReservationPopGridBin;

			@FindBy(xpath="//*[@id='Id_BinReservation_FGrid_body']/tr/td[3]")
			public  static List<WebElement> binReservationPopGridQtyToRelease;

			@FindBy(xpath="//tbody[@id='id_body_23_table_body']/tr/td[2]")
			public static List<WebElement> itemListCount;

			@FindBy(xpath="//input[@id='id_body_24']")
			public static WebElement  enter_UnitTxt;
			
			//Row1
			@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-1']")
			public static WebElement res_LeftPanelWareHouseRow1; 

			@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-2']")
			public static WebElement res_LeftPanelItemCodeRow1; 

			@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-3']")
			public static WebElement res_LeftPanelItemNameRow1; 

			@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-4']")
			public static WebElement res_LeftPanelItemQtyRow1; 

			@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-5']")
			public static WebElement res_LeftPanelDueDateRow1; 

			@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-6']")
			public static WebElement res_LeftPanelBaseUnitRow1; 


			@FindBy(xpath="//label[text()='Stock Reservation']")
			public static WebElement stockReservationLabel;

			@FindBy(xpath="//button[@class='close icon-close icon-font6 theme_icon-color']")
			public static WebElement stockReservationHeaderCloseBtn; 

			// Left Panel Header


			@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_1']")
			public static WebElement res_LeftPanelWareHouse; 

			@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_2']")
			public static WebElement res_LeftPanelItemCode; 

			@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_3']")
			public static WebElement res_LeftPanelItemName; 

			@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_4']")
			public static WebElement res_LeftPanelItemQty; 

			@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_5']")
			public static WebElement res_LeftPanelDueDate; 

			@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_6']")
			public static WebElement res_LeftPanelBaseUnit; 


			// Batch Reservation Body Header

			@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_2']")
			public static WebElement batchRes_BodyQtyToReserve; 

			@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_3']")
			public static WebElement batchRes_BodyBatchNo;

			@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_4']")
			public static WebElement batchRes_BodyWareHouse; 

			@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_5']")
			public static WebElement batchRes_BodyAvailableQty;

			@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_6']")
			public static WebElement batchRes_BodyRelesaseQty;

			@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_7']")
			public static WebElement batchRes_BodyCurOrdResQty;

			@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_8']")
			public static WebElement batchRes_BodyMfgDate;

			@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_9']")
			public static WebElement batchRes_BodyExpDate;

			@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_10']")
			public static WebElement batchRes_BodyBatchQty;

			// Body Grid
			// Row1

			@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-1']")
			public static WebElement batchRes_Row1Index; 

			@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-2']")
			public static WebElement batchRes_QtyToReserveRow1; 

			@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-3']")
			public static WebElement batchRes_BatchNoRow1;

			@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-4']")
			public static WebElement batchRes_WareHouseRow1; 

			@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-5']")
			public static WebElement batchRes_AvailableQtyRow1;

			@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-6']")
			public static WebElement batchRes_RelesaseQtyRow1;

			@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-7']")
			public static WebElement batchRes_CurOrdResQtyRow1;

			@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-8']")
			public static WebElement batchRes_MfgDateRow1;

			@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-9']")
			public static WebElement batchRes_ExpDateRow1;

			@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-10']")
			public static WebElement batchRes_BatchQtyRow1;

			@FindBy(xpath="//input[@id='id_body_22']")
			public static WebElement enter_Reserve;
			
			@FindBy(xpath="//*[@id='panelsStayOpen-collapseTwo']/div[1]/div/label[5]/span")
			public static WebElement inputBatchEvenIfStockNoyUpdatedChkbox;
			
			@FindBy(xpath="//*[@id='panelsStayOpen-collapseTwo']/div[1]/div/label[5]/input")
			public static WebElement inputBatchEvenIfStockNoyUpdatedChkboxIsSelected;
			
			@FindBy(xpath="//*[@id='id_menu_tree_Sales Orders']/a/span")
			public static WebElement salesOrderBtn;

			@FindBy(xpath="//*[@id='id_menu_tree_Sales Orders (1)']/a/span")
			public static WebElement salesOrderBtn1;
			
			@FindBy (xpath="//select[@id='id_transactionentry_workflow_dropdown']")
			public static WebElement workFlowDropdown;
			
			@FindBy(xpath="//a[@id='2061']/span")
			public static WebElement salesReturnsVATVoucher;

			@FindBy(xpath="//input[@id='id_body_16777329']")
			public static WebElement  salesReturnsEnter_TaxCode;
			
			@FindBy (xpath="//div[@id='DocumentDiv']/div[10]/ul/li/i[2]")
			public static WebElement designWorkflowSalesInvoiceExpandBtn;
			
			@FindBy (xpath="//i[@id='icon_9']")
			public static WebElement SalesInvoiceExpandBtn;

			@FindBy (xpath="//*[@id='Submenu_9']/li[5]/span")
			public static WebElement designWorkflowSalesInvoiceN;

			@FindBy(xpath="//div[contains(text(),'NDT52')]")
			public static WebElement draggedPurchasesVouchersVAT;

			@FindBy(xpath="//div[contains(text(),'Sales Invoice N')]")
			public static WebElement draggedSalesInvoiceN;

			@FindBy(xpath="/html[1]/body[1]/ul[1]/li[1]")
			public static WebElement draggedlinkBtn; 

			@FindBy(xpath="/html[1]/body[1]/ul[1]/li[2]")
			public static WebElement draggeddeleteBtn; 

			@FindBy(xpath="//*[@id='line5']")
			public static WebElement link5TO6;

			@FindBy(xpath="//select[@id='DDLLinkValue']")
			public static WebElement DefinitionLinkValueDropdown;

			@FindBy(xpath="//*[@id='WorkflowCheckboxDiv']/div/div/label")
			public static List<WebElement> definitionTabChkBoxNameList;

			@FindBy(xpath="//*[@id='WorkflowCheckboxDiv']/div/div/label/span")
			public static List<WebElement> definitionTabChkBoxList;
			
			@FindBy(xpath="//*[@id='WorkflowCheckboxDiv']/div/div/label/input")
			public static List<WebElement> definitionTabChkBoxListIsSelected;

			@FindBy(xpath="//*[@id='WorkflowSettingDialog']/div[2]/div/div[3]/div/input[1]")
			public static WebElement OkBtn; 

			@FindBy(xpath="//button[@class='Fbutton'][contains(text(),'Cancel')]")
			public static WebElement CancelBtn; 

			@FindBy(xpath="//*[@id='idNode_5']/div[2]/div[1]/div/div/div[2]")
			public static WebElement linkNode5Left;

			@FindBy(xpath="//a[@id='btnSave']")
			public static WebElement workFlowSaveBtn; 
			
			@FindBy (xpath="//*[@id='id_transaction_viewcontainer']/li[3]/a")
			public static WebElement pendingPurchaseVoucherVATLink;
			
			@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_body']")
			public static WebElement WorkflowTable;
			
			@FindBy(xpath="//a[contains(text(),'Properties')]")
			public static WebElement propertiesTab; 

			@FindBy(xpath="//input[@id='chkDoNotClubCommonBase']")
			public static WebElement doNotClubWithCommonBaseChkboxIsSelected;
			
			@FindBy(xpath="//input[@id='chkDoNotClubCommonBase']/following-sibling::span")
			public static WebElement doNotClubWithCommonBaseChkbox;

			@FindBy(xpath="//*[@id='line1']")
			public static WebElement link1TO2; 

			@FindBy(xpath="//*[@id='workflowButtons']/ul/li[2]/a")
			public static WebElement designWorkFlowSaveBtn; 
			
			@FindBy (xpath="//a[contains(text(),'Inventory Options')]")
			public static WebElement SettingsInventoryOptionsTab;
			
			@FindBy(xpath="//*[@id='16']/div/span")
			public static WebElement  settingsmenuBtn;

			@FindBy(xpath="//span[contains(text(),'Configure Transactions')]")
			public static WebElement  configureTransactionBtn;

			@FindBy(xpath="//*[@id='68']/span")
			public static WebElement  transactionAuthorizationBtn;

			@FindBy(xpath="//*[@id='txtDoc']")
			public static WebElement documentNameDropdown; 


			@FindBy(xpath="//*[@id='id_menu_tree_Sales Invoices']/a/i")
			public static WebElement salesInvoicesExpandBtn; 


			@FindBy(xpath="//*[@id='id_menu_tree_Sales invoice VAT']/a/span")
			public static WebElement salesInvoiceVAT; 

			@FindBy(xpath="//*[@id='id_menu_tree_Sales invoice VAT (1)']/a/span")
			public static WebElement salesInvoiceVAT1; 


			@FindBy(xpath="//*[@id='ctrlAuthorizationH']")
			public static WebElement nameTxt; 

			@FindBy(xpath="//*[@id='spnAddLevel']/i")
			public static WebElement addLevelBtn;

			@FindBy(xpath="//*[@id='txtDescription']")
			public static WebElement descriptionTxt; 

			@FindBy(xpath="//*[@id='chkConditionNotRequired']")
			public static WebElement conditionNotRequiredChkBox; 


			@FindBy(xpath="//*[@id='id_report_popup_ok']/i")
			public static WebElement definitionOkBtn;	

			@FindBy(xpath="//input[@id='chkInventory']")
			public static WebElement keepUnpostedInventoryChkBox;
			
			@FindBy(xpath="//input[@id='chkReservation']")
			public static WebElement keepUnpostedResevationChkBox;

			@FindBy(xpath="//a[contains(text(),'User selection')]")
			public static WebElement userSelectionTab;

			@FindBy(xpath="//*[@id='id_tblUserSelection_User']")
			public static WebElement userdropdown; 	

			@FindBy(xpath="//*[@id='id_tblUserSelection_col_1-1']")
			public static WebElement userrow1;

			@FindBy(xpath="//*[@id='id_tblUserSelection_User']")
			public static WebElement userDropdown;

			@FindBy(xpath="//*[@id='btnSaveAuthorization']")
			public static WebElement tranAuthSaveBtn;

			@FindBy(xpath="//*[@id='ulAuthBtns']/li[5]/span/i")
			public static WebElement tranAuthCancelBtn;

			@FindBy(xpath="//*[@id='tblNodeBody']/tr[1]/td[1]/div/div[2]/div/i")
			public static WebElement Level1editBtn;
			
			@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[5]")
			public static List<WebElement> voucherGridDocNo;

			@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[12]")
			public static List<WebElement> voucherGridSuspendStatus;

			@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[13]")
			public static List<WebElement> voucherGridAuthorizationStatus;

			@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[13]")
			public static WebElement voucherGridRow1AuthorizationStatus;

			@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[2]/td[13]")
			public static WebElement voucherGridRow2AuthorizationStatus;

			@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
			public static List<WebElement> voucherGridCheckBoxList;


			@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[3]/a")
			public static WebElement  pendingAuthorizationPurchases;

			@FindBy(xpath="//tr[@id='trRender_1']//td//input")
			public static WebElement  voucherHomeRow1ChkBox;

			@FindBy(xpath="//textarea[@id='id_transaction_authorization_remark']")
			public static WebElement  authorizePopupTextArea;

			@FindBy(xpath="//input[@id='id_transaction_authorization_remark_popup_ok']")
			public static WebElement  authorizePopupOkBtn;

			@FindBy(xpath="//div[@id='id_transaction_homeview_authorization_remarkpopup_container']//input[2]")
			public static WebElement  authorizePopupCancelBtn;

			@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[1]/a")
			public static WebElement  homePageAllVouchersView;
			
			@FindBy(xpath="//tbody/tr[@id='trRender_1']/td[2]/input[1]")
			public static WebElement voucherHomwPageRow1ChkBox;
			
			@FindBy(xpath="//input[@id='HeaderChkBox']")
			public static WebElement voucherHomePAgeHeaderAllChkbox;




			
			@FindBy(xpath="//*[@id='id_transactionentry_workflow_popup']/div[2]/div")
			public static WebElement workFlowPopupCtrlPlusL;
			
			@FindBy(xpath="//tbody[@id='id_transaction_entry_detail_workflow_popup_body']")
			public static WebElement workFlowTableBody;
			
			@FindBy(xpath="//*[@id='id_transactionentry_workflow_popup']/div[2]/div/div[1]/span/i")
			public static WebElement workFlowCtrlPlusLCloseBtn;
}
