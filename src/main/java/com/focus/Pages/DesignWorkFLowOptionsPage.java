package com.focus.Pages;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.sound.midi.SysexMessage;
import javax.swing.plaf.basic.BasicSliderUI.ScrollListener;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.grid.common.RegistrationRequest;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.MoveTargetOutOfBoundsException;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.focus.base.BaseEngine;
import com.focus.supporters.ExcelReader;
import com.focus.utilities.POJOUtility;

import net.sourceforge.htmlunit.corejs.javascript.ast.Jump;

public class DesignWorkFLowOptionsPage extends BaseEngine {

	
	public boolean checkLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException 
	{
		Thread.sleep(2000);

	
		LoginPage lp=new LoginPage(getDriver()); 
		
	    String unamelt="su";
	  
	    String pawslt="su";
	      
	    lp.enterUserName(unamelt);
	    
	    lp.enterPassword(pawslt);
	    
	    String compname="Transaction Authorization";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}


		Thread.sleep(2000);
	    
	    lp.clickOnSignInBtn();
	    
	    
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		String actUserInfo=userNameDisplay.getText();
		
		System.out.println("User Info  : "+actUserInfo);
		
		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();
		
		String getCompanyTxt=companyName.getText();
		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
		System.out.println("company name  :  "+ getLoginCompanyName);
		companyLogo.click();
		
		boolean actDashboard = dashboard.isDisplayed();
		
		
		String expUserInfo           ="SU";
		String expLoginCompanyName   ="Transaction Authorization";
		boolean expDashboard = true;
		
		
		Thread.sleep(2000);
		
		
		
		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	public static void checkUserFriendlyMessage()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		try {
			Thread.sleep(1500);
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
			String actErrorMessage = errorMessage.getText();
			try {
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				errorMessageCloseBtn.click();
				System.out.println("ValidationMessage  :  " + actErrorMessage);

			} catch (Exception ee) {
				System.out.println("ValidationMessage  :  " + actErrorMessage);

			}
		} catch (Exception e) {
			System.err.println("Error Message NOT Found or NOT Clickable");
			System.err.println(e.getMessage());

			String Exception = e.getMessage();
		}
	}

	public static boolean checkVoucherSavingMessage(String docno)
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		Thread.sleep(2000);

		try {
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
			String actErrorMessage = errorMessage.getText();
			String expErrorMessage = "Voucher saved successfully";
			String expErrorMessage1 = ": " + docno;

			System.out.println("SavingMessage  :  " + actErrorMessage + " Value Expected : " + expErrorMessage + " "
					+ expErrorMessage1);

			if (actErrorMessage.startsWith(expErrorMessage) && actErrorMessage.endsWith(expErrorMessage1)) {
				try {
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
					errorMessageCloseBtn.click();

					return true;
				} catch (Exception ee) {
					return true;
				}

			} else {
				return false;
			}

		} catch (Exception e) {
			System.err.println("UNABLE TO COMPARE");
			return false;
		}
	}

	public static boolean checkRestoreOfCompany()
			throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException {
		LoginPage lp = new LoginPage(getDriver());

		String unamelt = "su";

		String pawslt = "su";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
		dataMangementMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restore));
		restore.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(folderpathExpandBtn));
		folderpathExpandBtn.click();

		Thread.sleep(3000);

		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\optionsCompanyRestore.exe");

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restoreCompanyBtn));
		restoreCompanyBtn.click();

		try {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(overRideYesBtn));
			overRideYesBtn.click();
			
			Thread.sleep(130000);

		} catch (Exception e) {
			System.err.println("NO OLDER COMPANY EXISTS");
		}

		if (getIsAlertPresent()) {
			getWaitForAlert();

			getAlert().accept();
		}

		//Thread.sleep(120000);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(3000);

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		Thread.sleep(2000);
		
				
		String compname="Transaction Authorization";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}


		Thread.sleep(2000);
		
		
		

		lp.clickOnSignInBtn();

		Thread.sleep(5000);

		String actUserInfo1 = userNameDisplay.getText();

		System.out.println("User Info  : " + actUserInfo1);

		System.out.println("User Info Capture Text  :  " + userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		String getCompanyTxt1 = companyName.getText();
		String getLoginCompanyName1 = getCompanyTxt1.substring(0, 25);
		System.out.println("company name  :  " + getLoginCompanyName1);
		companyLogo.click();

		String expUserInfo1 = "SU";
		String expLoginCompanyName1 = "Transaction Authorization";

		System.out.println("UserInfo1             : " + actUserInfo1 + " Value Expected : " + expUserInfo1);
		System.out.println(
				"LoginCompanyName1     : " + getLoginCompanyName1 + " Value Expected : " + expLoginCompanyName1);

		if (actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1)) {
			return true;
		} else {
			return false;
		}
	}
	
	
	public static boolean checkLogoutAndLogin()
			throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException {
		
		LoginPage lp = new LoginPage(getDriver());

		String unamelt = "su";

		String pawslt = "su";

		//checkEraseAllTransactions();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(3000);
		
		 prongHornOn();
	     
	     Thread.sleep(2500);

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		Thread.sleep(2000);
		
		String compname="Transaction Authorization";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}


		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		//checkEraseAllTransactions();

		//reLogin("su", "su");

		Thread.sleep(5000);

		String actUserInfo1 = userNameDisplay.getText();

		System.out.println("User Info  : " + actUserInfo1);

		System.out.println("User Info Capture Text  :  " + userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		String getCompanyTxt1 = companyName.getText();
		String getLoginCompanyName1 = getCompanyTxt1.substring(0, 25);
		System.out.println("company name  :  " + getLoginCompanyName1);
		companyLogo.click();

		String expUserInfo1 = "SU";
		String expLoginCompanyName1 = "Transaction Authorization";

		System.out.println("UserInfo1             : " + actUserInfo1 + " Value Expected : " + expUserInfo1);
		System.out.println(
				"LoginCompanyName1     : " + getLoginCompanyName1 + " Value Expected : " + expLoginCompanyName1);

		if (actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1)) {
			return true;
		} else {
			return false;
		}
	}

	public static boolean checkEraseAllTransactionsLogoutAndLogin()
			throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException {
		
		LoginPage lp = new LoginPage(getDriver());

		String unamelt = "su";

		String pawslt = "su";

		checkEraseAllTransactions();

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(3000);
		
		 prongHornOn();
	     
	     Thread.sleep(2500);

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		Thread.sleep(2000);*/
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(3000);
		
		 prongHornOn();
	     
	     Thread.sleep(2500);

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		Thread.sleep(2000);
		
	
		String compname="Transaction Authorization";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}


		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		//checkEraseAllTransactions();

		//reLogin("su", "su");

		Thread.sleep(5000);

		//lp.clickOnSignInBtn();

		//checkEraseAllTransactions();

		//reLogin("su", "su");

		Thread.sleep(5000);

		String actUserInfo1 = userNameDisplay.getText();

		System.out.println("User Info  : " + actUserInfo1);

		System.out.println("User Info Capture Text  :  " + userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		String getCompanyTxt1 = companyName.getText();
		String getLoginCompanyName1 = getCompanyTxt1.substring(0, 25);
		System.out.println("company name  :  " + getLoginCompanyName1);
		companyLogo.click();

		String expUserInfo1 = "SU";
		String expLoginCompanyName1 = "Transaction Authorization";

		System.out.println("UserInfo1             : " + actUserInfo1 + " Value Expected : " + expUserInfo1);
		System.out.println(
				"LoginCompanyName1     : " + getLoginCompanyName1 + " Value Expected : " + expLoginCompanyName1);

		if (actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1)) {
			return true;
		} else {
			return false;
		}
	}

	public static boolean checkEraseAllTransactions()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
		dataMangementMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
		eraseAll.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
		eraseTranscationsRadio.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
		eraseAllOkBtn.click();

		if (getIsAlertPresent()) {
			getWaitForAlert();

			getAlert().accept();
		}
		
		
		Thread.sleep(2000);

		String expValidationMsg = "Data deleted successfully.";

		String actValidationMsg = checkValidationMessage(expValidationMsg);

		System.out.println(
				"************************************* checkEraseAllTransactions  *********************************");
		System.out.println("Message  :  " + actValidationMsg + " Value Expected : " + expValidationMsg);

		if (actValidationMsg.equalsIgnoreCase(expValidationMsg)) {
			System.out.println("Voucher Saved");
			// excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
			return true;
		} else {
			System.out.println("Voucher Not Saved");
			// excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
			return false;
		}
	}

	public static boolean checkLoginAndRestoreOptionsCompanyAndLogin()
			throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException {
		LoginPage lp = new LoginPage(getDriver());

		String unamelt = "su";

		String pawslt = "su";

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		lp.clickOnSignInBtn();

		// checkRefershPopOnlogin();

		// checkPopUpWindow();

		Thread.sleep(5000);

		String actUserInfo = userNameDisplay.getText();

		System.out.println("User Info  : " + actUserInfo);

		System.out.println("User Info Capture Text  :  " + userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		String getCompanyTxt = companyName.getText();
		String getLoginCompanyName = getCompanyTxt.substring(0, 19);
		System.out.println("company name  :  " + getLoginCompanyName);
		companyLogo.click();

		String expUserInfo = "SU";
		String expLoginCompanyName = "Automation";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
		dataMangementMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restore));
		restore.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(folderpathExpandBtn));
		folderpathExpandBtn.click();

		Thread.sleep(3000);

		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\optionsCompanyRestore.exe");

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restoreCompanyBtn));
		restoreCompanyBtn.click();

		try {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(overRideYesBtn));
			overRideYesBtn.click();
			Thread.sleep(20000);
		} catch (Exception e) {
			System.err.println("NO OLDER COMPANY EXISTS");
		}

		if (getIsAlertPresent()) {
			getWaitForAlert();

			getAlert().accept();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(3000);

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		Thread.sleep(2000);

		Select s = new Select(companyDropDownList);
		int size = s.getOptions().size();

		System.err.println("SIZE : " + size);

		for (int i = 0; i < size; i++) {
			String data;

			data = s.getOptions().get(i).getText();

			System.err.println("DATA : " + data);

			if (data.contains("Automation Options")) {

				s.selectByVisibleText(data);

				break;
			}
		}

		lp.clickOnSignInBtn();

		Thread.sleep(5000);

		String actUserInfo1 = userNameDisplay.getText();

		System.out.println("User Info  : " + actUserInfo1);

		System.out.println("User Info Capture Text  :  " + userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		String getCompanyTxt1 = companyName.getText();
		String getLoginCompanyName1 = getCompanyTxt1.substring(0, 19);
		System.out.println("company name  :  " + getLoginCompanyName1);
		companyLogo.click();

		String expUserInfo1 = "SU";
		String expLoginCompanyName1 = "Automation Options ";

		System.out.println("UserInfo             : " + actUserInfo + " Value Expected : " + expUserInfo);
		System.out
				.println("LoginCompanyName     : " + getLoginCompanyName + " Value Expected : " + expLoginCompanyName);

		System.out.println("UserInfo1             : " + actUserInfo1 + " Value Expected : " + expUserInfo1);
		System.out.println(
				"LoginCompanyName1     : " + getLoginCompanyName1 + " Value Expected : " + expLoginCompanyName1);

		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName)

				&& actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1)) {
			return true;
		} else {
			return false;
		}
	}

	/*
	 * public static String checkDownloadedFileName(WebDriver driver) throws
	 * InterruptedException { String mainWindow = driver.getWindowHandle();
	 * 
	 * JavascriptExecutor js = (JavascriptExecutor)driver;
	 * js.executeScript("window.open()");
	 * 
	 * for(String winHandle : driver.getWindowHandles()) {
	 * driver.switchTo().window(winHandle); }
	 * 
	 * driver.get("chrome://downloads");
	 * 
	 * JavascriptExecutor js1 = (JavascriptExecutor)driver;
	 * 
	 * String fileName = (String) js1.
	 * executeScript("return document.querySelector('downloads-manager').shadowRoot.querySelector('#downloadsList downloads-item').shadowRoot.querySelector('div#content #file-link').text"
	 * );
	 * 
	 * System.err.println("Download deatils"); System.out.println("File Name :-"
	 * + fileName);
	 * 
	 * driver.close();
	 * 
	 * driver.switchTo().window(mainWindow);
	 * 
	 * return fileName; }
	 */

	public static boolean checkBackup()
			throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException {
		File Efile = new File(getBaseDir() + "\\autoIt\\ExportFiles\\Transaction Authorization.fbak");

		if (Efile.exists()) {
			Efile.delete();
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
		dataMangementMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(backup));
		backup.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(backupBtn));
		backupBtn.click();

		Thread.sleep(20000);

		String actBackupName = checkDownloadedFileName(getDriver());
		String expBackupName = "Transaction Authorization.fbak";

		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);

		Thread.sleep(4000);

		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());

		getDriver().switchTo().window(openTabs.get(1)).close();
		Thread.sleep(3000);
		getDriver().switchTo().window(openTabs.get(0));

		Thread.sleep(2000);

		System.err.println("Backup Downloaded : " + actBackupName + "  Value Expected  " + expBackupName);

		if (actBackupName.equalsIgnoreCase(expBackupName)) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkInputingWorkflowNameAsPurchasesFlow()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		String expworkflowNameTxt = "PurchasesFlow";
		String actworkflowNameTxt = workflowNameTxt.getAttribute("value");

		System.out.println("*********************************checkInputingWorkflowNameAsPurchasesFlow************");

		System.out.println("WorkflowNameTxt  :" + actworkflowNameTxt + " Value Expected : " + expworkflowNameTxt);

		Thread.sleep(2000);

		if (actworkflowNameTxt.equalsIgnoreCase(expworkflowNameTxt)) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkSavingOpeningStockVoucher1WithBatchItem()
			throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksVoucher));
		openingStocksVoucher.click();

		Thread.sleep(4000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		Thread.sleep(2000);

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
		warehouseTxt.click();
		warehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		warehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BATCH BR ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("B1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1Exp = Calendar.getInstance();
		R1Exp.add(Calendar.DATE, 2);

		String R1 = df.format(R1Exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME, R1);
		enter_Expirydate.sendKeys(Keys.TAB);

		// 2nd Row

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys("BATCH BR ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("2");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("B2");
		enter_Batch.sendKeys(Keys.TAB);

		Calendar R2Exp = Calendar.getInstance();
		R2Exp.add(Calendar.DATE, 1);

		String R2 = df.format(R2Exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME, R2);
		enter_Expirydate.sendKeys(Keys.TAB);

		// 3rd Row

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys("BATCH BR ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("3");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("B3");
		enter_Batch.sendKeys(Keys.TAB);

		Calendar R3Exp = Calendar.getInstance();
		R3Exp.add(Calendar.DATE, 4);

		String R3 = df.format(R3Exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME, R3);
		enter_Expirydate.sendKeys(Keys.TAB);

		// 4th Row

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("6");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("B4");
		enter_Batch.sendKeys(Keys.TAB);

		Calendar R4Exp = Calendar.getInstance();
		R4Exp.add(Calendar.DATE, 3);

		String R4 = df.format(R4Exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME, R4);
		enter_Expirydate.sendKeys(Keys.TAB);

		// 5th Row

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("4");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("B5");
		enter_Batch.sendKeys(Keys.TAB);

		Calendar R5Exp = Calendar.getInstance();
		R5Exp.add(Calendar.DATE, 5);

		String R5 = df.format(R5Exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME, R5);
		enter_Expirydate.sendKeys(Keys.TAB);

		// 6th Row

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("5");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("B6");
		enter_Batch.sendKeys(Keys.TAB);

		Calendar R6Exp = Calendar.getInstance();
		R6Exp.add(Calendar.DATE, 6);

		String R6 = df.format(R6Exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME, R6);
		enter_Expirydate.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		String expMessage1 = "Voucher saved successfully";
		String expMessage2 = "1";

		String actMessage = checkValidationMessage(expMessage1);

		System.out.println(
				"********* Error Message : " + actMessage + "  value expected  " + expMessage1 + " : " + expMessage2);

		if (actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkSavingShortageInStocksVoucher1()
			throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortagesInStockNewVoucher));
		shortagesInStockNewVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
		warehouseTxt.click();
		warehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		warehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BATCH BR ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		select1stRow_4thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("12");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(batchItemName));

		int BatchNoCount = batchPopupBatchNoList.size();

		for (int i = 0; i < BatchNoCount; i++) {
			String batchNo = batchPopupBatchNoList.get(i).getText();

			if (batchNo.equalsIgnoreCase("B1")) {
				getAction().doubleClick(batchPopupRowNosList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		// 2nd Row

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_4thColumn));
		select2ndRow_4thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("24");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(batchItemName));

		int BatchNoCount1 = batchPopupBatchNoList.size();

		for (int i = 0; i < BatchNoCount1; i++) {
			String batchNo = batchPopupBatchNoList.get(i).getText();

			if (batchNo.equalsIgnoreCase("B6")) {
				getAction().doubleClick(batchPopupRowNosList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		String expMessage1 = "Voucher saved successfully";
		String expMessage2 = "1";

		String actMessage = checkValidationMessage(expMessage1);

		System.out.println(
				"********** Error Message : " + actMessage + "  value expected  " + expMessage1 + " : " + expMessage2);

		if (actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		} else {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}

	public boolean checkExcessesInStocksVoucherBatchNosByConvertingPendingShortageInStocks()
			throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		Thread.sleep(2000);

		int count = stocksVouchersList.size();

		for (int i = 0; i < count; i++) {
			String data = stocksVouchersList.get(i).getText();

			System.err.println(data);

			ScrollIntoView(stocksVouchersList.get(i));

			if (data.equalsIgnoreCase("Excesses in Stocks New")) {
				stocksVouchersList.get(i).click();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePannelOpenBtn));
		homePannelOpenBtn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingShortageInStocksLink));
		pendingShortageInStocksLink.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();

		checkValidationMessage("Link data loaded");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		String actR1BatchNo = select1stRow_7thColumn.getText();
		String expR1BatchNo = "B1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
		String actR2BatchNo = select2ndRow_7thColumn.getText();
		String expR2BatchNo = "B6";

		System.out.println("1st Row Batch No : " + actR1BatchNo + "  Value Expected  " + expR1BatchNo);
		System.out.println("2nd Row Batch No : " + actR2BatchNo + "  Value Expected  " + expR2BatchNo);

		if (actR1BatchNo.equalsIgnoreCase(expR1BatchNo) && actR2BatchNo.equalsIgnoreCase(expR2BatchNo)) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkExcessesInStocksVoucherBatchNosByWorkFlow()
			throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();

		getWaitForAlert();
		getAlert().accept();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(20000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		String actR1BatchNo = select1stRow_7thColumn.getText();
		String expR1BatchNo = "B1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
		String actR2BatchNo = select2ndRow_7thColumn.getText();
		String expR2BatchNo = "B6";

		System.out.println("1st Row Batch No : " + actR1BatchNo + "  Value Expected  " + expR1BatchNo);
		System.out.println("2nd Row Batch No : " + actR2BatchNo + "  Value Expected  " + expR2BatchNo);

		if (actR1BatchNo.equalsIgnoreCase(expR1BatchNo) && actR2BatchNo.equalsIgnoreCase(expR2BatchNo)) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		} else {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}

	public boolean checkLinkBetweenPurchaseOrderAndPVN()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(draggedPurchasesVouchersN));
		moveToElement(draggedPurchasesVouchersN);

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		moveToElement(link3TO4);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DefinitionTab));
		boolean actDefinitionTab = DefinitionTab.isDisplayed();
		boolean actsettingTab = settingTab.isDisplayed();
		boolean actpropertiesTab = propertiesTab.isDisplayed();
		boolean actMapBtn = MapTab.isDisplayed();
		boolean actOkBtn = OkBtn.isDisplayed();
		boolean actCancelBtn = CancelBtn.isDisplayed();

		boolean expDefinitionTab = true;
		boolean expsettingTab = true;
		boolean exppropertiesTab = true;
		boolean expMapBtn = true;
		boolean expOkBtn = true;
		boolean expCancelBtn = true;

		boolean actDisplay = actDefinitionTab == expDefinitionTab && actsettingTab == expsettingTab
				&& actpropertiesTab == exppropertiesTab && actMapBtn == expMapBtn && actOkBtn == expOkBtn
				&& actCancelBtn == expCancelBtn;

		String actMethod = Boolean.toString(actDisplay);

		String expMethod = "true";

		System.out.println("**************************************checkLinkBetweenPurchaseVoucherNAndMRN*******");

		System.out.println("DefinitionTab   :" + actDefinitionTab + " Value Excepted :" + expDefinitionTab);
		System.out.println("SettingTab      :" + actsettingTab + " Value Excepted :" + expsettingTab);
		System.out.println("PropertiesTab   :" + actpropertiesTab + " Value Excepted :" + exppropertiesTab);
		System.out.println("MapBtn          :" + actMapBtn + " Value Excepted :" + expMapBtn);
		System.out.println("OkBtn           :" + actOkBtn + " Value Excepted :" + expOkBtn);
		System.out.println("CancelBtn       :" + actCancelBtn + " Value Excepted :" + expCancelBtn);

		if (actMethod.equalsIgnoreCase(expMethod)) {
			return true;
		} else {
			return false;
		}
	}

	public boolean CheckLinkValueDropDownOptions()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DefinitionLinkValueDropdown));
		Select s = new Select(DefinitionLinkValueDropdown);
		int size = s.getOptions().size();

		Set<String> linkValueDropdownArray = new HashSet<String>();

		for (int i = 0; i < size; i++) {
			String data = s.getOptions().get(i).getText();
			linkValueDropdownArray.add(data);
		}

		String actDefinitionLinkValueDropdown = linkValueDropdownArray.toString();
		String expDefinitionLinkValueDropdown = "[Transaction Gross, Quantity, Gross, Net]";

		System.out.println(
				"********************************checkSelectingQuantityinLinkValueOptionBetweenPurchaseVoucherNAndMRN***********");

		System.out.println("DefinitionLinkValueDropdown  : " + actDefinitionLinkValueDropdown + " Value Ecpected : "
				+ expDefinitionLinkValueDropdown);

		if (actDefinitionLinkValueDropdown.equals(expDefinitionLinkValueDropdown)) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkSelectingQuantityinLinkValueOptionBetweenPurchaseOrderAndPvn()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DefinitionLinkValueDropdown));
		Select s = new Select(DefinitionLinkValueDropdown);
		s.selectByVisibleText("Quantity");

		String actDefinitionLinkValueDropdown = s.getFirstSelectedOption().getText();
		String expDefinitionLinkValueDropdown = "Quantity";

		System.out.println(
				"********************************checkSelectingQuantityinLinkValueOptionBetweenPurchaseOrderAndPvn***********");

		System.out.println("DefinitionLinkValueDropdown  : " + actDefinitionLinkValueDropdown + " Value Ecpected : "
				+ expDefinitionLinkValueDropdown);

		if (actDefinitionLinkValueDropdown.equals(expDefinitionLinkValueDropdown)) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkSelectingItemOptionBetweenPurchaseOrderAndPvn()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		int definitionTabChkBoxNameListCount = definitionTabChkBoxNameList.size();

		for (int i = 1; i < definitionTabChkBoxNameListCount; i++) {
			String data = definitionTabChkBoxNameList.get(i).getText();

			if (data.equalsIgnoreCase("ITEM") && definitionTabChkBoxListIsSelected.get(i).isSelected() == false) {
				definitionTabChkBoxList.get(i).click();
				break;
			}
		}

		boolean selected = false;

		for (int i = 1; i < definitionTabChkBoxNameListCount; i++) {
			String data = definitionTabChkBoxNameList.get(i).getText();

			if (data.equalsIgnoreCase("Item")) {
				selected = definitionTabChkBoxListIsSelected.get(i).isSelected();
				break;

			}
		}

		boolean actDisplay = selected == true;

		String actMethod = Boolean.toString(actDisplay);

		String expMethod = "true";

		System.out.println(
				"*********************************checkSelectingItemOptionBetweenPurchaseOrderAndPvn*************");

		System.out.println("PurchaseVoucherNAndMRNitemchkbox  : " + actMethod + " Value Expected : " + expMethod);

		if (actMethod.equalsIgnoreCase(expMethod)) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkMapOptionAndMappedFields()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MapTab));
		MapTab.click();

		Thread.sleep(2000);

		Set<String> baseFieldListArray = new HashSet<String>();

		for (int i = 0; i < 20; i++) {
			String data = baseFieldList.get(i).getText();
			baseFieldListArray.add(data);
		}

		String actbaseFieldList = baseFieldListArray.toString();
		String expbaseFieldList = "[, Item, Warehouse, Discount, Vendor Account, Narration, Rate, Quantity, Time, Gross, Document No., Unit]";

		System.out.println("actbaseFieldList   : " + actbaseFieldList);
		System.out.println("expbaseFieldList   : " + expbaseFieldList);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		if (actbaseFieldList.equalsIgnoreCase(expbaseFieldList) && actMessage.equalsIgnoreCase(expMessage)) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkSavingPurchaseOrders()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");

		Thread.sleep(2000);

		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("10");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		System.out.println(
				"************************************* checkSavingPurchaseOrdersvoucher  *********************************");

		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");

		if (savingMessage == true) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkPendingPurchaseOrdersPurchaseVoucherNHomePage()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePannelOpenBtn));
		homePannelOpenBtn.click();

		Thread.sleep(2000);

		//click(homePageMoreBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePagePendingOrdersLinks));
		homePagePendingOrdersLinks.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));

		int actVouchersCount = voucherBodyGridRowCount.size() - 1;
		int expVouchersCount = 1;

		System.out.println(
				"************************************* checkPendingPurchaseOrdersPurchaseVoucherNewHomePage  *********************************");
		System.out.println(
				"Vouchers Count in Voucher Body : " + actVouchersCount + " Value Expected : " + expVouchersCount);

		if (actVouchersCount == expVouchersCount) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkPendingLinksThroughConvertOptionWithSelectingRow()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		grid_ChkBox1.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertBtn));
		convertBtn.click();

		Thread.sleep(1000);

		Boolean res = checkValidationMessage("").startsWith("Link data loaded");

		System.err.println("Result : " + res);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));

		String actvendorAccountTxt = vendorAccountTxt.getAttribute("data-focustext");
		String expvendorAccountTxt = "vendor A";

		System.out.println("actvendorAccountTxt : " + actvendorAccountTxt);
		System.out.println("expvendorAccountTxt : " + expvendorAccountTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));

		String actwareHouseTxt = warehouseTxt.getAttribute("data-focustext");
		String expwareHouseTxt = "HYDERABAD";

		System.out.println("actwareHouseTxt : " + actwareHouseTxt);
		System.out.println("expwareHouseTxt : " + expwareHouseTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();

		String actPvVoucherFooterQty, actPvVoucherFooterGross, actPvVoucherFooterNet, actPvVoucherFooterAvgRateO;

		String expPvVoucherFooterQty, expPvVoucherFooterGross, expPvVoucherFooterNet, expPvVoucherFooterAvgRateO;

		int voucherGridBodyListCount = voucherGridBodyList.size();

		ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();

		for (int i = 0; i < voucherGridBodyListCount; i++) {

			String data = voucherGridBodyList.get(i).getText();

			voucherGridBodyListArray.add(data);
		}

		String actvoucherGridBodyList = voucherGridBodyListArray.toString();

		String expvoucherGridBodyList = "[1, BR COGS ITEM, Dozs, 0, 0.00, 10.00, PurOrd:1, 15.00, 150.00, 0.00, 2, , , , , , , , , , 3, , , , , , , , , , 4, , , , , , , , , , 5, , , , , , , , , ]";

		System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
		System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);

		expPvVoucherFooterNet = "150.00";
		expPvVoucherFooterQty = "10.00";
		expPvVoucherFooterGross = "150.00";
		expPvVoucherFooterAvgRateO = "0.00";

		System.out.println(netAmount.getText());
		System.out.println(QtyAmount.getText());
		System.out.println(GrossAmount.getText());
		System.out.println(PVNFooterAvgRateO.getText());

		actPvVoucherFooterNet = netAmount.getText();
		actPvVoucherFooterQty = QtyAmount.getText();
		actPvVoucherFooterGross = GrossAmount.getText();
		actPvVoucherFooterAvgRateO = PVNFooterAvgRateO.getText();

		System.out.println(
				"************************************* checkPendingLinksThroughConvertOptionWithSelectingRow  *********************************");

		System.out.println("PvVoucherFooterNet          :  " + actPvVoucherFooterNet + " Value Expected : "
				+ expPvVoucherFooterNet);
		System.out.println("PvVoucherFooterQty          :  " + actPvVoucherFooterQty + " Value Expected : "
				+ expPvVoucherFooterQty);
		System.out.println("PvVoucherFooterGross        :  " + actPvVoucherFooterGross + " Value Expected : "
				+ expPvVoucherFooterGross);
		System.out.println("PvVoucherFooterAvgRateO     :  " + actPvVoucherFooterAvgRateO + " Value Expected : "
				+ expPvVoucherFooterAvgRateO);

		if (res == true && actPvVoucherFooterQty.equalsIgnoreCase(expPvVoucherFooterQty)
				&& actPvVoucherFooterGross.equalsIgnoreCase(expPvVoucherFooterGross)
				&& actPvVoucherFooterNet.equalsIgnoreCase(expPvVoucherFooterNet)
				&& actPvVoucherFooterAvgRateO.equalsIgnoreCase(expPvVoucherFooterAvgRateO)

				&& actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList)

				&& actvendorAccountTxt.equalsIgnoreCase(expvendorAccountTxt)
				&& actwareHouseTxt.equalsIgnoreCase(expwareHouseTxt)) {
			System.out.println("Test Pass : Saved Data is As Expected");
			return true;
		} else {
			System.out.println("Test Fail : Saved Data is NOT As Expected");
			return false;
		}

	}

	public boolean checkSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
		
		Thread.sleep(1500);

		boolean savingMessage = checkVoucherSavingMessage(docno);

		System.out.println(
				"************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");

		if (savingMessage == true) {
			System.out.println("Voucher Saved");
			return true;
		} else {
			System.out.println("Voucher Not Saved");
			return false;
		}
	}

	public boolean checkEraseAllTransactionsAfterIntialCheck()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
		dataMangementMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
		eraseAll.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
		eraseTranscationsRadio.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
		eraseAllOkBtn.click();

		if (getIsAlertPresent()) {
			getWaitForAlert();

			getAlert().accept();
		}

		Thread.sleep(2000);

		String expMessage = "Data deleted successfully.";

		String actMessage = checkValidationMessage(expMessage);

		System.out.println("Message  :  " + actMessage + " Value Expected : " + expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean checkUpdatingMapFieldsInBetweenPurchaseOrdersAndPvn()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(draggedPurchasesVouchersN));
		moveToElement(draggedPurchasesVouchersN);

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		moveToElement(link3TO4);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MapTab));
		MapTab.click();

		Thread.sleep(3000);

		for (int i = 0; i < 20; i++) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mapFirstRowIndex));
			mapFirstRowIndex.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mapdeleteRowBtn));
			mapdeleteRowBtn.click();

			getWaitForAlert();

			getAlert().accept();

		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseFieldRow1));
		baseFieldRow1.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseFieldDropDown));
		Select baseFieldDropDownselect = new Select(baseFieldDropDown);

		baseFieldDropDownselect.selectByVisibleText("Warehouse");
		baseFieldDropDown.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(linkFieldDropDown));
		Select linkFieldDropDownselect = new Select(linkFieldDropDown);

		linkFieldDropDownselect.selectByVisibleText("Warehouse");
		linkFieldDropDown.sendKeys(Keys.TAB);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		if (actMessage.equalsIgnoreCase(expMessage)) {
			System.out.println("Test Pass :itemchkbox is Enabled");

			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			userNameDisplayLogo.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();

			Thread.sleep(3000);

			LoginPage lp = new LoginPage(getDriver());

			String unamelt = "su";

			String pawslt = "su";

			lp.enterUserName(unamelt);

			lp.enterPassword(pawslt);

			lp.clickOnSignInBtn();

			Thread.sleep(5000);

			return true;
		} else {
			System.out.println("Test Fail : itemchkbox is NOT Enabled");

			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			userNameDisplayLogo.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();

			Thread.sleep(3000);

			LoginPage lp = new LoginPage(getDriver());

			String unamelt = "su";

			String pawslt = "su";

			lp.enterUserName(unamelt);

			lp.enterPassword(pawslt);

			lp.clickOnSignInBtn();

			Thread.sleep(5000);

			return false;
		}
	}

	public boolean checkSavingPurchaseOrdersAfterUpdatingMapFields()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");

		Thread.sleep(2000);

		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("10");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		System.out.println(
				"************************************* checkSavingPurchaseOrdersAfterUpdatingMapFields  *********************************");

		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");

		if (savingMessage == true) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkPendingLinksThroughConvertOptionAfterMapFieldsUpdating()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePannelOpenBtn));
		homePannelOpenBtn.click();

		Thread.sleep(2000);
		//click(homePageMoreBtn);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePagePendingOrdersLinks));
		homePagePendingOrdersLinks.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		grid_ChkBox1.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertBtn));
		convertBtn.click();

		String expMessage = "Link data loaded";
		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));

		String actvendorAccountTxt = vendorAccountTxt.getAttribute("value");
		String expvendorAccountTxt = "Vendor A";

		System.out.println("actvendorAccountTxt : " + actvendorAccountTxt);
		System.out.println("expvendorAccountTxt : " + expvendorAccountTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));

		String actwareHouseTxt = warehouseTxt.getAttribute("value");
		String expwareHouseTxt = "HYDERABAD";

		System.out.println("actwareHouseTxt : " + actwareHouseTxt);
		System.out.println("expwareHouseTxt : " + expwareHouseTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();

		String actPvVoucherFooterQty, actPvVoucherFooterGross, actPvVoucherFooterNet, actPvVoucherFooterAvgRateO;

		String expPvVoucherFooterQty, expPvVoucherFooterGross, expPvVoucherFooterNet, expPvVoucherFooterAvgRateO;

		int voucherGridBodyListCount = voucherGridBodyList.size();

		ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();

		for (int i = 0; i < voucherGridBodyListCount; i++) {

			String data = voucherGridBodyList.get(i).getText();

			voucherGridBodyListArray.add(data);
		}

		String actvoucherGridBodyList = voucherGridBodyListArray.toString();

		String expvoucherGridBodyList = "[1, BR COGS ITEM, Dozs, 0, 0.00, 10.00, PurOrd:1, 15.00, 150.00, 0.00, 2, , , , , , , , , , 3, , , , , , , , , , 4, , , , , , , , , , 5, , , , , , , , , ]";

		System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
		System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);

		expPvVoucherFooterNet = "150.00";
		expPvVoucherFooterQty = "10.00";
		expPvVoucherFooterGross = "150.00";
		expPvVoucherFooterAvgRateO = "0.00";

		System.out.println(netAmount.getText());
		System.out.println(QtyAmount.getText());
		System.out.println(GrossAmount.getText());
		System.out.println(PVNFooterAvgRateO.getText());

		actPvVoucherFooterNet = netAmount.getText();
		actPvVoucherFooterQty = QtyAmount.getText();
		actPvVoucherFooterGross = GrossAmount.getText();
		actPvVoucherFooterAvgRateO = PVNFooterAvgRateO.getText();

		System.out.println(
				"************************************* checkPendingLinksThroughConvertOptionWithSelectingRow  *********************************");

		System.out.println("PvVoucherFooterNet          :  " + actPvVoucherFooterNet + " Value Expected : "
				+ expPvVoucherFooterNet);
		System.out.println("PvVoucherFooterQty          :  " + actPvVoucherFooterQty + " Value Expected : "
				+ expPvVoucherFooterQty);
		System.out.println("PvVoucherFooterGross        :  " + actPvVoucherFooterGross + " Value Expected : "
				+ expPvVoucherFooterGross);
		System.out.println("PvVoucherFooterAvgRateO     :  " + actPvVoucherFooterAvgRateO + " Value Expected : "
				+ expPvVoucherFooterAvgRateO);

		if (actMessage.startsWith(expMessage) && actPvVoucherFooterQty.equalsIgnoreCase(expPvVoucherFooterQty)
				&& actPvVoucherFooterGross.equalsIgnoreCase(expPvVoucherFooterGross)
				&& actPvVoucherFooterNet.equalsIgnoreCase(expPvVoucherFooterNet)
				&& actPvVoucherFooterAvgRateO.equalsIgnoreCase(expPvVoucherFooterAvgRateO)

				&& actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList)

				&& actvendorAccountTxt.equalsIgnoreCase(expvendorAccountTxt)
				&& actwareHouseTxt.equalsIgnoreCase(expwareHouseTxt)) {
			return true;
		} else {
			return false;
		}
	}

	public boolean CheckSavingAndDeleteAllTransactions()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.END);
		vendorAccountTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		System.out.println(
				"************************************* CheckSavingAndDeleteAllTransactions  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		checkEraseAllTransactionsLogoutAndLogin();

		if (savingMessage == true) {
			return true;
		} else {
			return false;
		}
	}
	
	public static void prongHornExit() throws AWTException, InterruptedException, IOException
	{
	 
		
		
		/* Robot robot = new Robot();
		 robot.keyPress(KeyEvent.VK_WINDOWS);
		 robot.keyPress(KeyEvent.VK_R); 
		 robot.keyRelease(KeyEvent.VK_R);
		 robot.keyRelease(KeyEvent.VK_WINDOWS);*/
		 
		 
	     
	     Thread.sleep(4000);
	     
	   Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\pronghornexit.exe");
	    

	     
	   
	     //Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\inetmgrRestart.exe");
	     //Thread.sleep(3000);
	     
	     
		/*
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * 
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * 
		 * 
		 * robot.keyPress(KeyEvent.VK_ENTER); robot.keyRelease(KeyEvent.VK_ENTER);
		 */
  
  Thread.sleep(4000);

	  
	
	}
	
	public static void  prongHornOn() throws AWTException, InterruptedException, IOException
	{
	 
		
		/*
		 * Robot robot = new Robot(); robot.keyPress(KeyEvent.VK_WINDOWS);
		 * robot.keyPress(KeyEvent.VK_R); robot.keyRelease(KeyEvent.VK_R);
		 * robot.keyRelease(KeyEvent.VK_WINDOWS);
		 */
		 
	     
	     Thread.sleep(3000);
	     
	  Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\PronghornOn.exe");
	   
	     //Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\inetmgrRestart.exe");
	     //Thread.sleep(3000);
	     
	     
		/*
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * 
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * 
		 * 
		 * robot.keyPress(KeyEvent.VK_ENTER); robot.keyRelease(KeyEvent.VK_ENTER);
		 */
  
	  Thread.sleep(5000);
	  
	  Robot robot = new Robot(); 
	  robot.keyPress(KeyEvent.VK_ALT);
	  robot.keyPress(KeyEvent.VK_TAB);
	  
	  robot.keyRelease(KeyEvent.VK_ALT);
	  robot.keyRelease(KeyEvent.VK_TAB);
	  
	  

	     
	     
	   // Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\proghornExit.exe");
	     
	     
	}
	
	public static boolean checkLogoutAndLoginWithoutPronghorn()
			throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException {
		/*
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * checkEraseAllTransactions();
		 * 
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplayLogo));
		 * userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * Thread.sleep(3000);
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * Thread.sleep(2000);
		 * 
		 * lp.clickOnSignInBtn();
		 */

		//checkEraseAllTransactions();

		reLogin1("su", "su");

		Thread.sleep(5000);

		String actUserInfo1 = userNameDisplay.getText();

		System.out.println("User Info  : " + actUserInfo1);

		System.out.println("User Info Capture Text  :  " + userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		String getCompanyTxt1 = companyName.getText();
		String getLoginCompanyName1 = getCompanyTxt1.substring(0, 25);
		System.out.println("company name  :  " + getLoginCompanyName1);
		companyLogo.click();

		String expUserInfo1 = "SU";
		String expLoginCompanyName1 = "Transaction Authorization";

		System.out.println("UserInfo1             : " + actUserInfo1 + " Value Expected : " + expUserInfo1);
		System.out.println(
				"LoginCompanyName1     : " + getLoginCompanyName1 + " Value Expected : " + expLoginCompanyName1);

		if (actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1)) {
			return true;
		} else {
			return false;
		}
	}
	

	public boolean checkRaiseLinkDocumentWhenBaseIsSavedOption()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();
		
		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//ScrollToElement(designWorkflowbtn);
		//designWorkflowbtn.click(); */
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		//draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		//link3TO4.click();
		//click(link3TO4);
		moveToElement(link3TO4);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingTab));
		settingTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(raiseLinkDocumentWhenbaseIsSavedChkbox));

		if (raiseLinkDocumentWhenbaseIsSavedChkboxIsSelected.isSelected() == false) {
			raiseLinkDocumentWhenbaseIsSavedChkbox.click();
		}

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();
		
		checkLogoutAndLogin();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("10");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(3000);

		int actrowCount = voucherBodyGridRowCount.size() - 1;
		int exprowCount = 1;

		System.out.println(
				"************************************* checkRaiseLinkDocumentWhenBaseIsSavedOption  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");
		System.out.println("rowCount  : " + actrowCount + " Value Expected : " + exprowCount);

		Thread.sleep(3000);		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingTab));
		settingTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(raiseLinkDocumentWhenbaseIsSavedChkbox));

		if (raiseLinkDocumentWhenbaseIsSavedChkboxIsSelected.isSelected() == true) {
			raiseLinkDocumentWhenbaseIsSavedChkbox.click();
		}

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();

		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		checkEraseAllTransactionsLogoutAndLogin();

		if (savingMessage == true && actrowCount == exprowCount) {
			System.out.println("Voucher Saved");
			return true;
		} else {
			System.out.println("Voucher Not Saved");
			return false;
		}
	}

	public boolean checkAutoCLoseInDaysOption()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("10");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		// Create a calendar object with today date. Calendar is in java.util
		// pakage.

		Calendar calendar = Calendar.getInstance();

		// Move calendar to yesterday

		calendar.add(Calendar.DATE, 2);

		// Get current date of calendar which point to the yesterday now

		Date yesterday = calendar.getTime();

		DateFormat dfr = new SimpleDateFormat("dd/MM/yyyy");

		System.err.println(dfr.format(yesterday).toString());

		dateTxt.sendKeys(Keys.LEFT);

		Thread.sleep(2000);

		dateTxt.sendKeys(Keys.HOME);

		Thread.sleep(2000);

		dateTxt.sendKeys(dfr.format(yesterday).toString());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		boolean actworkFlowHeaderChkBoxCL = workFlowHeaderChkBoxCL.isDisplayed();
		boolean expworkFlowHeaderChkBoxCL = true;

		System.err.println("WorkFlowHeaderChkBoxCL : " + actworkFlowHeaderChkBoxCL + "  " + expworkFlowHeaderChkBoxCL);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
		workFlowCtrlPlusLCloseBtn.click();

		Thread.sleep(2000);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingTab));
		settingTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(autoCloseTxt));
		autoCloseTxt.click();
		autoCloseTxt.clear();
		autoCloseTxt.sendKeys("1");

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);
		
		checkLogoutAndLogin();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		dateTxt.sendKeys(Keys.LEFT);
		Thread.sleep(2000);
		dateTxt.sendKeys(Keys.HOME);
		Thread.sleep(2000);
		dateTxt.sendKeys(dfr.format(yesterday).toString());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		boolean actpurchaseVoucherWorlFlowText;
		boolean exppurchaseVoucherWorlFlowText = true;

		try {
			if (workFlowPopupCtrlPlusL.isDisplayed() == true) {
				actpurchaseVoucherWorlFlowText = false;
				System.err.println(workFlowTableBody.getText());
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
				workFlowCtrlPlusLCloseBtn.click();
			} else {
				actpurchaseVoucherWorlFlowText = true;
			}
		} catch (Exception e) {
			System.err.println(e.getMessage());
			actpurchaseVoucherWorlFlowText = true;
		}

		System.out.println(
				"************************************* checkAutoCLoseInDaysOption  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");
		System.out.println("workFlowHeaderChkBoxCL : " + actworkFlowHeaderChkBoxCL + " Value Expected : "
				+ expworkFlowHeaderChkBoxCL);
		System.out.println("purchaseVoucherWorlFlowText : " + actpurchaseVoucherWorlFlowText + " Value Expected : "
				+ exppurchaseVoucherWorlFlowText);
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingTab));
		settingTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(autoCloseTxt));
		autoCloseTxt.click();
		autoCloseTxt.sendKeys(Keys.END);
		autoCloseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		autoCloseTxt.sendKeys("0");

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		checkEraseAllTransactionsLogoutAndLogin();

		if (savingMessage == true && actworkFlowHeaderChkBoxCL == expworkFlowHeaderChkBoxCL
				&& actpurchaseVoucherWorlFlowText == exppurchaseVoucherWorlFlowText) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkConsolidateOnDocumentWhenDisplayingInSelection()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		for (int a = 1; a < 4; a++) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			// pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys(Keys.END);
			pvWareHouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
			pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
			pvWareHouseTxt.sendKeys("HYDERABAD");
			Thread.sleep(2000);
			pvWareHouseTxt.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(2000);
			enter_ItemTxt.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			enter_Quantity.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.click();
			enter_Discount.sendKeys(Keys.TAB);
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen = LinkRowCount;

		int actLinkRowCountValue = rowCountInLinkScreen.size();
		int expLinkRowCountValue = 3;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
		workFlowCtrlPlusLCloseBtn.click();
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		getFluentWebDriverWait()
				.until(ExpectedConditions.elementToBeClickable(checkConsolidateDocWhenDisplayingInSelectionChkBox));

		if (checkConsolidateDocWhenDisplayingInSelectionChkBoxIsSelected.isSelected() == false) {
			checkConsolidateDocWhenDisplayingInSelectionChkBox.click();
		}

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);
		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */
		//reLogin("su", "su");
		checkLogoutAndLogin();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen1 = LinkRowCount;

		int actLinkRowCountValueAfterOptionSelection = rowCountInLinkScreen1.size();
		int expLinkRowCountValueAfterOptionSelection = 1;

		String actQuantity = workFlowRow1Column4CL.getText();
		String expQuantity = "36.00";

		System.out.println(
				"************************************* checkConsolidateOnDocumentWhenDisplayingInSelection  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");
		System.out
				.println("LinkRowCountValue  : " + actLinkRowCountValue + " Value Expected : " + expLinkRowCountValue);
		System.out.println("LinkRowCountValueAfterOptionSelection : " + actLinkRowCountValueAfterOptionSelection
				+ " Value Expected : " + expLinkRowCountValueAfterOptionSelection);
		System.out.println("Quantity : " + actQuantity + " Value Expected : " + expQuantity);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
		workFlowCtrlPlusLCloseBtn.click();
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		getFluentWebDriverWait()
				.until(ExpectedConditions.elementToBeClickable(checkConsolidateDocWhenDisplayingInSelectionChkBox));

		if (checkConsolidateDocWhenDisplayingInSelectionChkBoxIsSelected.isSelected() == true) {
			checkConsolidateDocWhenDisplayingInSelectionChkBox.click();
		}

		/// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		checkEraseAllTransactionsLogoutAndLogin();

		if (savingMessage == true && actLinkRowCountValue == expLinkRowCountValue
				&& actLinkRowCountValueAfterOptionSelection == expLinkRowCountValueAfterOptionSelection
				&& actQuantity.equalsIgnoreCase(expQuantity)) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkCheckStockWhileLinkingOption()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoyTransactionsSalesMenu));
		inventoyTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys("Customer A");
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("6");
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);

		try {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
			res_CloseBtn.click();
		} catch (Exception e) {
			System.err.println("No Pop Up Displayed");
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		Thread.sleep(1000);

		checkValidationMessage("");
		/*if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}*/

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen = LinkRowCount;

		int actLinkRowCountValue = rowCountInLinkScreen.size();
		int expLinkRowCountValue = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		String expMessageinSalesInvoice = "Items having no stock have been removed from list.";
		String actMessageinSalesInvoice = checkValidationMessage(expMessageinSalesInvoice);

		System.out.println("actMessageinSalesInvoice : " + actMessageinSalesInvoice);
		System.out.println("expMessageinSalesInvoice : " + expMessageinSalesInvoice);

		int voucherGridBodyListCount = voucherGridBodyList.size();

		ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();

		for (int i = 10; i < voucherGridBodyListCount; i++) {
			String data = voucherGridBodyList.get(i).getText();
			voucherGridBodyListArray.add(data);
		}

		String actvoucherGridBodyList = voucherGridBodyListArray.toString();

		String expvoucherGridBodyList = "[]";
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("Sales Flow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedSalesInvoicesVAT.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line5 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link5TO6));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link5TO6));
		link5TO6.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(checkstockWhileLinkingChkbox));

		if (checkstockWhileLinkingChkboxIsSelected.isSelected() == true) {
			checkstockWhileLinkingChkbox.click();
		}

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessageDW = "WorkFlow Saved Successfully";

		String actMessageDW = checkValidationMessage(expMessageDW);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */

		//reLogin("su", "su");
		checkLogoutAndLogin();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen1 = LinkRowCount;

		int actLinkRowCountValueAfterChange = rowCountInLinkScreen1.size();
		int expLinkRowCountValueAfterChange = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		int voucherGridBodyListCountAfterChange = voucherGridBodyList.size();

		ArrayList<String> voucherGridBodyListArrayAfterChange = new ArrayList<String>();

		for (int i = 10; i < voucherGridBodyListCountAfterChange; i++) {
			String data = voucherGridBodyList.get(i).getText();
			voucherGridBodyListArrayAfterChange.add(data);
		}

		String actvoucherGridBodyListAfterChange = voucherGridBodyListArrayAfterChange.toString();

		String expvoucherGridBodyListAfterChange = "[]";

		System.out.println(
				"************************************* checkCheckStockWhileLinkingOption  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");
		System.out
				.println("LinkRowCountValue  : " + actLinkRowCountValue + " Value Expected : " + expLinkRowCountValue);
		System.out.println("MessageinSalesInvoice : " + actMessageinSalesInvoice + " Value Expected : "
				+ expMessageinSalesInvoice);
		System.out.println("LinkRowCountValueAfterOptionSelection : " + actLinkRowCountValueAfterChange
				+ " Value Expected : " + expLinkRowCountValueAfterChange);
		System.out.println("MessageDW : " + actMessageDW + " Value Expected : " + expMessageDW);
		
		Thread.sleep(1500);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("Sales Flow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedSalesInvoicesVAT.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line5 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link5TO6));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link5TO6));
		link5TO6.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(checkstockWhileLinkingChkbox));

		if (checkstockWhileLinkingChkboxIsSelected.isSelected() == false) {
			checkstockWhileLinkingChkbox.click();
		}

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessageDW1 = "WorkFlow Saved Successfully";

		String actMessageDW1 = checkValidationMessage(expMessageDW1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		checkEraseAllTransactionsLogoutAndLogin();

		if (savingMessage == true && actLinkRowCountValue == expLinkRowCountValue
				&& actMessageinSalesInvoice.equalsIgnoreCase(expMessageinSalesInvoice)
				&& actLinkRowCountValueAfterChange == expLinkRowCountValueAfterChange
				&& actMessageDW.equalsIgnoreCase(expMessageDW)) {
			System.out.println("Voucher Saved");
			return true;
		} else {
			System.out.println("Voucher Not Saved");
			return false;
		}
	}

	public boolean checkCannotExceedTheBaseValueOption()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		// pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
		warehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(2000);
		warehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("2");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
		workFlowHeaderChkBox.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("2");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno1 = documentNumberTxt.getAttribute("value");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		boolean savingMessage1 = checkVoucherSavingMessage(docno1);

		Thread.sleep(2000);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cannotExceedTheBaseValueChkbox));

		if (cannotExceedTheBaseValueChkboxIsSelected.isSelected() == false) {
			cannotExceedTheBaseValueChkbox.click();
		}

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);
		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */
		//reLogin("su", "su");
		checkLogoutAndLogin();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		grid_ChkBox1.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomedeleteBtn));
		voucherHomedeleteBtn.click();

		if (getIsAlertPresent()) {
			getWaitForAlert();

			getAlert().accept();
		}

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();

		checkUserFriendlyMessage();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
		warehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(2000);
		warehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("2");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
		workFlowHeaderChkBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("2");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expValidationMessage = "Link has already been consumed by another voucher. Please re-check the links.";
		String actValidationMessage = checkValidationMessage(expValidationMessage);

		System.out.println(
				"************************************* checkCannotExceedTheBaseValueOption  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");
		System.out.println("SavingMessage1  :  " + savingMessage1 + " Value Expected : " + "TRUE");
		System.out.println("ValidationMessage : " + actValidationMessage + " Value Expected : " + expValidationMessage);
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		if (cannotExceedTheBaseValueChkboxIsSelected.isSelected() == true) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cannotExceedTheBaseValueChkbox));
			cannotExceedTheBaseValueChkbox.click();
		}

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		checkEraseAllTransactionsLogoutAndLogin();

		if (savingMessage == true && savingMessage1 == true
				&& actValidationMessage.equalsIgnoreCase(expValidationMessage)) {
			System.out.println("Voucher Saved");
			return true;
		} else {
			System.out.println("Voucher Not Saved");
			return false;
		}
	}

	public boolean checkBaseDocumentCannotBeEditiedAfterItIsLinkedOption()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		// pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
		warehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(2000);
		warehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
		workFlowHeaderChkBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno1 = documentNumberTxt.getAttribute("value");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		boolean savingMessage1 = checkVoucherSavingMessage(docno1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
		voucherhomeCloseBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("8");
		enter_Rate.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		String expValidationMessage = "This document is already linked to another document, and, cannot be edited.";
		String actValidationMessage = checkValidationMessage(expValidationMessage);

		System.out.println("ValidationMessage : " + actValidationMessage + " Value Expected : " + expValidationMessage);

		Thread.sleep(2000);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		getFluentWebDriverWait()
				.until(ExpectedConditions.elementToBeClickable(baseDocumentCannotBeEditedAfterItIsLinkedChkbox));
		if (baseDocumentCannotBeEditedAfterItIsLinkedChkboxIsSelected.isSelected() == true) {
			baseDocumentCannotBeEditedAfterItIsLinkedChkbox.click();
		}

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);
		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */
		//reLogin("su", "su");
		checkLogoutAndLogin();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("8");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno2 = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage2 = checkVoucherSavingMessage(docno2);

		System.out.println(
				"************************************* checkBaseDocumentCannotBeEditiedAfterItIsLinkedOption  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");
		System.out.println("SavingMessage1  :  " + savingMessage1 + " Value Expected : " + "TRUE");
		System.out.println("SavingMessage2  :  " + savingMessage2 + " Value Expected : " + "TRUE");
		System.out.println("validationConfirmationMessage : " + actValidationMessage + " Value Expected : "
				+ expValidationMessage);
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		getFluentWebDriverWait()
				.until(ExpectedConditions.elementToBeClickable(baseDocumentCannotBeEditedAfterItIsLinkedChkbox));

		if (baseDocumentCannotBeEditedAfterItIsLinkedChkboxIsSelected.isSelected() == false) {
			baseDocumentCannotBeEditedAfterItIsLinkedChkbox.click();
		}

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		checkEraseAllTransactionsLogoutAndLogin();

		if (savingMessage == true && savingMessage1 == true && savingMessage2 == true
				&& actValidationMessage.equalsIgnoreCase(expValidationMessage)) {
			System.out.println("Voucher Saved");
			return true;
		} else {
			System.out.println("Voucher Not Saved");
			return false;
		}
	}

	public boolean checkCloseLinkAfterDueDateElapses()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		// Create a calendar object with today date. Calendar is in java.util
		// pakage.
		Calendar calendar = Calendar.getInstance();

		// Move calendar to yesterday
		calendar.add(Calendar.DATE, -2);

		// Get current date of calendar which point to the yesterday now
		Date yesterday = calendar.getTime();

		DateFormat dfr = new SimpleDateFormat("dd/MM/yyyy");

		System.out.println(dfr.format(yesterday).toString());

		dateTxt.sendKeys(Keys.LEFT);
		Thread.sleep(2000);
		dateTxt.sendKeys(Keys.HOME);
		Thread.sleep(2000);
		dateTxt.sendKeys(dfr.format(yesterday).toString());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		// pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		// pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno2 = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage2 = checkVoucherSavingMessage(docno2);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen = LinkRowCount;

		int actLinkRowCountValue = rowCountInLinkScreen.size();
		int expLinkRowCountValue = 2;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
		workFlowCtrlPlusLCloseBtn.click();
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeLinkAfterTheDueDateElapsesChkbox));

		if (closeLinkAfterTheDueDateElapsesChkboxIsSelected.isSelected() == false) {
			closeLinkAfterTheDueDateElapsesChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		/*
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */

		//reLogin("su", "su");
		checkLogoutAndLogin();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen1 = LinkRowCount;

		int actLinkRowCountValueAfterOptionSelection = rowCountInLinkScreen1.size();
		int expLinkRowCountValueAfterOptionSelection = 1;

		System.out.println(
				"************************************* checkCloseLinkAfterDueDateElapses  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");
		System.out
				.println("LinkRowCountValue  : " + actLinkRowCountValue + " Value Expected : " + expLinkRowCountValue);
		System.out.println("LinkRowCountValueAfterOptionSelection : " + actLinkRowCountValueAfterOptionSelection
				+ " Value Expected : " + expLinkRowCountValueAfterOptionSelection);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
		workFlowCtrlPlusLCloseBtn.click();
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeLinkAfterTheDueDateElapsesChkbox));

		if (closeLinkAfterTheDueDateElapsesChkboxIsSelected.isSelected() == true) {
			closeLinkAfterTheDueDateElapsesChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		checkEraseAllTransactionsLogoutAndLogin();

		if (savingMessage == true && actLinkRowCountValue == expLinkRowCountValue
				&& actLinkRowCountValueAfterOptionSelection == expLinkRowCountValueAfterOptionSelection) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkLinkIsMandatoryOption()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));

		departmentTxt.sendKeys(Keys.SPACE);
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
		warehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(2000);
		warehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno1 = documentNumberTxt.getAttribute("value");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		boolean savingMessage1 = checkVoucherSavingMessage(docno1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
		voucherhomeCloseBtn.click();

		Thread.sleep(2000);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(linkIsMandatoryChkbox));

		if (linkIsMandatoryChkboxIsSelected.isSelected() == false) {
			linkIsMandatoryChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(CloseBtn)); CloseBtn.click();
		 * 
		 * Thread.sleep(2000);
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */
		//reLogin("su", "su");
		checkLogoutAndLogin();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
		warehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(2000);
		warehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		String expValidationMessage = "Provide data for mandatory fieldsL-Purchases Orders";
		String actValidationMessage = checkValidationMessage(expValidationMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		if (getIsAlertPresent()) {
			getWaitForAlert();

			getAlert().accept();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
		voucherhomeCloseBtn.click();

		System.out.println(
				"************************************* checkLinkIsMandatoryOption  *********************************");
		System.out.println("SavingMessage  :  " + actMessage + " Value Expected : " + expMessage);
		System.out.println("ValidationMessage : " + actValidationMessage + " Value Expected : " + expValidationMessage);
		
		Thread.sleep(1500);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(linkIsMandatoryChkbox));

		if (linkIsMandatoryChkboxIsSelected.isSelected() == true) {
			linkIsMandatoryChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();

		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		checkEraseAllTransactionsLogoutAndLogin();

		if (actMessage.equalsIgnoreCase(expMessage) && actValidationMessage.equalsIgnoreCase(expValidationMessage)) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	@FindBy(xpath = "//*[@id='chkBaseDocCannotEdited']")
	private static WebElement baseDocCannotEditedBaseChkboxisSelected;

	@FindBy(xpath = "//*[@id='chkBaseDocCannotEdited']/following-sibling::span")
	private static WebElement baseDocCannotEditedBaseChkbox;

	public static boolean baseDocumentCannotbeEditedAfterItisLinked()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		


		draggedPurchasesOrders.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line4 > path').setAttribute('stroke-width', '13')");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link4TO5));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link4TO5));
		link4TO5.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		if (baseDocCannotEditedBaseChkboxisSelected.isSelected() == false) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseDocCannotEditedBaseChkbox));
			baseDocCannotEditedBaseChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);
		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplay.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */
		//reLogin("su", "su");
		checkLogoutAndLogin();
		Thread.sleep(3000);
		if (actMessage.equalsIgnoreCase(expMessage)) {
			return true;
		} else {
			return false;
		}

	}

	public boolean checkDoNotClubWithCommonBaseOption()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		Thread.sleep(2000);
		
		baseDocumentCannotbeEditedAfterItisLinked();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen = LinkRowCount;

		int actLinkRowCountValue = rowCountInLinkScreen.size();
		int expLinkRowCountValue = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(Keys.END, Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno1 = documentNumberTxt.getAttribute("value");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		boolean savingMessage1 = checkVoucherSavingMessage(docno1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
		voucherhomeCloseBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePannelOpenBtn));
		homePannelOpenBtn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePagePendingOrdersLinks));
		homePagePendingOrdersLinks.click();

		Thread.sleep(4000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));

		String VoucherBodyTxt = voucherBodyGrid.getText();
		boolean actVoucherBody = voucherBodyGrid.getText().isEmpty();
		boolean expVoucherBody = true;

		Thread.sleep(2000);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesOrders.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line4 > path').setAttribute('stroke-width', '13')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link4TO5));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link4TO5));
		link4TO5.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotClubWithCommonBaseChkbox));

		if (doNotClubWithCommonBaseChkboxIsSelected.isSelected() == false) {
			doNotClubWithCommonBaseChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);
		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */

		//reLogin("su", "su");

		checkLogoutAndLogin();
		
		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePannelOpenBtn));
		homePannelOpenBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePagePendingOrdersLinks));
		homePagePendingOrdersLinks.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));

		int actrowCountAfterSelection = voucherBodyGridRowCount.size() - 1;
		int exprowCountAfterSelection = 1;

		System.out.println(
				"************************************* checkDoNotClubWithCommonBaseOption  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");
		System.out
				.println("LinkRowCountValue  : " + actLinkRowCountValue + " Value Expected : " + expLinkRowCountValue);
		System.out.println("VoucherBody : " + actVoucherBody + " Value Expected : " + expVoucherBody);
		System.err.println(VoucherBodyTxt);
		System.out.println("rowCountAfterSelection : " + actrowCountAfterSelection + " Value Expected : "
				+ exprowCountAfterSelection);
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesOrders.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line4 > path').setAttribute('stroke-width', '13')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link4TO5));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link4TO5));
		link4TO5.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotClubWithCommonBaseChkbox));

		if (doNotClubWithCommonBaseChkboxIsSelected.isSelected() == true) {
			doNotClubWithCommonBaseChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		checkEraseAllTransactionsLogoutAndLogin();

		if (savingMessage == true && actLinkRowCountValue == expLinkRowCountValue && actVoucherBody == expVoucherBody
				&& actrowCountAfterSelection == exprowCountAfterSelection) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkDoNotAllowSelectionIfLinksFieldsAreNotSelectedOption()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen = LinkRowCount;

		int actLinkRowCountValue = rowCountInLinkScreen.size();
		int expLinkRowCountValue = 1;

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
		workFlowCtrlPlusLCloseBtn.click();
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		int definitionTabChkBoxNameListCount = definitionTabChkBoxNameList.size();

		for (int i = 1; i < definitionTabChkBoxNameListCount; i++) {
			String data = definitionTabChkBoxNameList.get(i).getText();

			if (data.equalsIgnoreCase("Vendor Account")) {
				definitionTabChkBoxList.get(i).click();

				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait()
				.until(ExpectedConditions.elementToBeClickable(doNotAllowSelectionIfLinksFieldsAreNotSelectedChkbox));

		if (doNotAllowSelectionIfLinksFieldsAreNotSelectedChkboxIsSelected.isSelected() == false) {
			doNotAllowSelectionIfLinksFieldsAreNotSelectedChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		/*
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */

		//reLogin("su", "su");
		
		checkLogoutAndLogin();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		String expValidationMessage = "Select all the link fields to load pending links";
		String actValidationMessage = checkValidationMessage(expValidationMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen1 = LinkRowCount;

		int actLinkRowCountValueAfterOptionSelection = rowCountInLinkScreen1.size();
		int expLinkRowCountValueAfterOptionSelection = 1;

		System.out.println(
				"************************************* checkDoNotAllowSelectionIfLinksFieldsAreNotSelectedOption  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");
		System.out
				.println("LinkRowCountValue  : " + actLinkRowCountValue + " Value Expected : " + expLinkRowCountValue);
		System.out.println("ValidationMessage : " + actValidationMessage + " Value Expected : " + expValidationMessage);
		System.out.println("LinkRowCountValueAfterOptionSelection : " + actLinkRowCountValueAfterOptionSelection
				+ " Value Expected : " + expLinkRowCountValueAfterOptionSelection);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
		workFlowCtrlPlusLCloseBtn.click();
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		for (int i = 1; i < definitionTabChkBoxNameListCount; i++) {
			String data = definitionTabChkBoxNameList.get(i).getText();

			if (data.equalsIgnoreCase("Vendor Account")) {
				definitionTabChkBoxList.get(i).click();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait()
				.until(ExpectedConditions.elementToBeClickable(doNotAllowSelectionIfLinksFieldsAreNotSelectedChkbox));

		if (doNotAllowSelectionIfLinksFieldsAreNotSelectedChkboxIsSelected.isSelected() == true) {
			doNotAllowSelectionIfLinksFieldsAreNotSelectedChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		checkEraseAllTransactionsLogoutAndLogin();

		if (savingMessage == true && actLinkRowCountValue == expLinkRowCountValue
				&& actValidationMessage.equalsIgnoreCase(expValidationMessage)
				&& actLinkRowCountValueAfterOptionSelection == expLinkRowCountValueAfterOptionSelection) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkAllowBackDatedLinkingOption()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		System.out.println();

		// Create a calendar object with today date. Calendar is in java.util
		// pakage.
		Calendar calendar = Calendar.getInstance();

		// Move calendar to yesterday
		calendar.add(Calendar.DATE, 10);

		// Get current date of calendar which point to the futuredate now
		Date futuredate = calendar.getTime();

		DateFormat dfr = new SimpleDateFormat("dd/MM/yyyy");

		System.out.println(dfr.format(futuredate).toString());

		dateTxt.sendKeys(Keys.LEFT);
		Thread.sleep(2000);
		dateTxt.sendKeys(Keys.HOME);
		Thread.sleep(2000);
		dateTxt.sendKeys(dfr.format(futuredate).toString());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		// pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
		warehouseTxt.click();
		warehouseTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		boolean actpurchaseVoucherWorlFlowText;
		boolean exppurchaseVoucherWorlFlowText = true;

		try {
			if (workFlowPopupCtrlPlusL.isDisplayed() == true) {
				actpurchaseVoucherWorlFlowText = false;
				System.err.println(workFlowTableBody.getText());
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
				workFlowCtrlPlusLCloseBtn.click();
			} else {
				actpurchaseVoucherWorlFlowText = true;
			}
		} catch (Exception e) {
			System.err.println(e.getMessage());
			actpurchaseVoucherWorlFlowText = true;
		}
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allowBackdatedLinkingChkbox));

		if (allowBackdatedLinkingChkboxIsSelected.isSelected() == false) {
			allowBackdatedLinkingChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);
		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */

		//reLogin("su", "su");
		
		checkLogoutAndLogin();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen1 = LinkRowCount;

		int actLinkRowCountValueAfterOptionSelection = rowCountInLinkScreen1.size();
		int expLinkRowCountValueAfterOptionSelection = 1;

		System.out.println(
				"************************************* checkAllowBackDatedLinkingOption  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");
		System.out.println("purchaseVoucherWorlFlowText : " + actpurchaseVoucherWorlFlowText + " Value Expected : "
				+ exppurchaseVoucherWorlFlowText);
		System.out.println("LinkRowCountValueAfterOptionSelection : " + actLinkRowCountValueAfterOptionSelection
				+ " Value Expected : " + expLinkRowCountValueAfterOptionSelection);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
		workFlowCtrlPlusLCloseBtn.click();
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allowBackdatedLinkingChkbox));

		if (allowBackdatedLinkingChkboxIsSelected.isSelected() == true) {
			allowBackdatedLinkingChkbox.click();
		}

		Thread.sleep(1000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();

		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		checkEraseAllTransactionsLogoutAndLogin();

		if (savingMessage == true && actpurchaseVoucherWorlFlowText == exppurchaseVoucherWorlFlowText
				&& actLinkRowCountValueAfterOptionSelection == expLinkRowCountValueAfterOptionSelection) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkRecheckBeforeTheSavingIfLinkIsConsumedElseWhereOnTheNetWorkOption()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions
				.elementToBeClickable(recheckBeforeTheSavingIfLinkIsConsumeEelsewhereOnTheNetworkChkbox));

		if (recheckBeforeTheSavingIfLinkIsConsumeEelsewhereOnTheNetworkChkboxIsSelected.isSelected() == false) {
			recheckBeforeTheSavingIfLinkIsConsumeEelsewhereOnTheNetworkChkbox.click();
		}

		Thread.sleep(1000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		/*
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */
		reLogin("su", "su");

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(Keys.END, Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno1 = documentNumberTxt.getAttribute("value");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);

		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_T);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_T);

		Thread.sleep(4000);

		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());

		System.out.println("openTabs" + openTabs);

		getDriver().switchTo().window(openTabs.get(0));

		getDriver().switchTo().window(openTabs.get(1));

		enterUrl("http://localhost/FocusX#");

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(Keys.END, Keys.SHIFT, Keys.HOME);
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno2 = documentNumberTxt.getAttribute("value");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		boolean savingMessage1 = checkVoucherSavingMessage(docno2);

		getDriver().switchTo().window(openTabs.get(0));

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expValidationMessage = "The link which you are trying to use, has been closed in base document.";
		String actValidationMessage = checkValidationMessage(expValidationMessage);

		System.out.println(
				"************************************* checkRecheckBeforeTheSavingIfLinkIsConsumedElseWhereOnTheNetWorkOption  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");
		System.out.println("ValidationMessage : " + actValidationMessage + " Value Expected : " + expValidationMessage);

		getDriver().switchTo().window(openTabs.get(1));

		Robot robot1 = new Robot();
		robot1.keyPress(KeyEvent.VK_CONTROL);
		robot1.keyPress(KeyEvent.VK_W);
		robot1.keyRelease(KeyEvent.VK_CONTROL);
		robot1.keyRelease(KeyEvent.VK_W);

		System.err.println("Before Restore");

		getDriver().switchTo().window(openTabs.get(0));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions
				.elementToBeClickable(recheckBeforeTheSavingIfLinkIsConsumeEelsewhereOnTheNetworkChkbox));

		if (recheckBeforeTheSavingIfLinkIsConsumeEelsewhereOnTheNetworkChkboxIsSelected.isSelected() == true) {
			recheckBeforeTheSavingIfLinkIsConsumeEelsewhereOnTheNetworkChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		checkEraseAllTransactionsLogoutAndLogin();

		if (savingMessage == true && actValidationMessage.equalsIgnoreCase(expValidationMessage)) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkUseThisLinkOnlyForLoadingOption()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen = LinkRowCount;

		int actLinkRowCountValue = rowCountInLinkScreen.size();
		int expLinkRowCountValue = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_T);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_T);

		Thread.sleep(4000);

		LoginPage lp = new LoginPage(getDriver());

		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());

		System.out.println("openTabs" + openTabs);

		getDriver().switchTo().window(openTabs.get(0));

		getDriver().switchTo().window(openTabs.get(1));

		enterUrl("http://localhost/FocusX#");

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		boolean actpurchaseVoucherWorlFlowText = purchaseVoucherWorlFlowText1.isDisplayed();
		boolean exppurchaseVoucherWorlFlowText = true;

		Thread.sleep(2000);

		Robot robot1 = new Robot();
		robot1.keyPress(KeyEvent.VK_CONTROL);
		robot1.keyPress(KeyEvent.VK_W);
		robot1.keyRelease(KeyEvent.VK_CONTROL);
		robot1.keyRelease(KeyEvent.VK_W);

		Thread.sleep(2000);

		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(useThisLinkOnlyForLoadingChkbox));

		if (useThisLinkOnlyForLoadingChkboxIsSelected.isSelected() == false) {
			useThisLinkOnlyForLoadingChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */
		//reLogin("su", "su");
		checkLogoutAndLogin();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(Keys.END, Keys.SHIFT, Keys.HOME);
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno1 = documentNumberTxt.getAttribute("value");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);

		Robot robot3 = new Robot();
		robot3.keyPress(KeyEvent.VK_CONTROL);
		robot3.keyPress(KeyEvent.VK_T);
		robot3.keyRelease(KeyEvent.VK_CONTROL);
		robot3.keyRelease(KeyEvent.VK_T);

		Thread.sleep(2000);

		ArrayList<String> openTabs1 = new ArrayList<String>(getDriver().getWindowHandles());

		System.out.println("openTabs1" + openTabs1);

		getDriver().switchTo().window(openTabs1.get(0));

		getDriver().switchTo().window(openTabs1.get(1));

		enterUrl("http://localhost/FocusX#");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		List<WebElement> rowCountInLinkScreen1 = LinkRowCount;

		int actLinkRowCountValue1 = rowCountInLinkScreen1.size();
		int expLinkRowCountValue1 = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(Keys.END, Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno2 = documentNumberTxt.getAttribute("value");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		boolean savingMessage1 = checkVoucherSavingMessage(docno2);

		Robot robot2 = new Robot();
		robot2.keyPress(KeyEvent.VK_CONTROL);
		robot2.keyPress(KeyEvent.VK_W);
		robot2.keyRelease(KeyEvent.VK_CONTROL);
		robot2.keyRelease(KeyEvent.VK_W);

		System.out.println(
				"************************************* checkUseThisLinkOnlyForLoadingOption  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");
		System.out.println("LinkRowCountValue : " + actLinkRowCountValue + " Value Expected : " + expLinkRowCountValue);
		System.out.println(
				"LinkRowCountValue1 : " + actLinkRowCountValue1 + " Value Expected : " + expLinkRowCountValue1);

		System.err.println("Before Restore");

		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(useThisLinkOnlyForLoadingChkbox));

		if (useThisLinkOnlyForLoadingChkboxIsSelected.isSelected() == true) {
			useThisLinkOnlyForLoadingChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();

		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		checkEraseAllTransactionsLogoutAndLogin();

		System.err.println("After Restore");

		if (savingMessage == true && actLinkRowCountValue == expLinkRowCountValue
				&& actLinkRowCountValue1 == expLinkRowCountValue1) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean checkLoadTheBaseDocumentDetailsAtTheTimeOfLinkingOption()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen = LinkRowCount;

		int actLinkRowCountValue = rowCountInLinkScreen.size();
		int expLinkRowCountValue = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		int voucherGridBodyListCount = voucherGridBodyList.size();

		ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();

		for (int i = 0; i < voucherGridBodyListCount; i++) {
			String data = voucherGridBodyList.get(i).getText();
			voucherGridBodyListArray.add(data);
		}

		String actvoucherGridBodyList = voucherGridBodyListArray.toString();

		String expvoucherGridBodyList = "[1, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, , , , , , , , , , 3, , , , , , , , , , 4, , , , , , , , , , 5, , , , , , , , , ]";
		String expvoucherGridBodyListS = "[1, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, , , , , , , , , , 3, , , , , , , , , , 4, , , , , , , , , , 5, , , , , , , , , ]";

		System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
		System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);

		boolean actvoucherGridBodyListResult = false;
		boolean expvoucherGridBodyListResult = true;

		if (actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList)
				|| actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyListS)) {
			actvoucherGridBodyListResult = true;
		}

		System.err.println("VoucherGridBodyListResult : " + actvoucherGridBodyListResult + "  Value Expected  "
				+ expvoucherGridBodyListResult);
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait()
				.until(ExpectedConditions.elementToBeClickable(loadTheBaseDocumentDetailsAtTheTimeOfLinkingChkbox));

		if (loadTheBaseDocumentDetailsAtTheTimeOfLinkingChkboxIsSelected.isSelected() == false) {
			loadTheBaseDocumentDetailsAtTheTimeOfLinkingChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);
		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(CloseBtn)); CloseBtn.click();
		 * 
		 * Thread.sleep(2000);
		 * 
		 * 
		 * 
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */
		//reLogin("su", "su");
		checkLogoutAndLogin();
		

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen1 = LinkRowCount;

		int actLinkRowCountValue1 = rowCountInLinkScreen1.size();
		int expLinkRowCountValue1 = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		int voucherGridBodyListCount1 = voucherGridBodyList.size();

		ArrayList<String> voucherGridBodyListArray1 = new ArrayList<String>();

		for (int i = 0; i < voucherGridBodyListCount1; i++) {
			String data = voucherGridBodyList.get(i).getText();

			voucherGridBodyListArray1.add(data);
		}

		String actvoucherGridBodyList1 = voucherGridBodyListArray1.toString();

		String expvoucherGridBodyList1 = "[1, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, , , , , , , , , , 3, , , , , , , , , , 4, , , , , , , , , , 5, , , , , , , , , ]";
		String expvoucherGridBodyList1S = "[1, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, , , , , , , , , , 3, , , , , , , , , , 4, , , , , , , , , , 5, , , , , , , , , ]";

		System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList1);
		System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList1);

		boolean actvoucherGridBodyList1Result = false;
		boolean expvoucherGridBodyList1Result = true;

		if (actvoucherGridBodyList1.equalsIgnoreCase(expvoucherGridBodyList1)
				|| actvoucherGridBodyList1.equalsIgnoreCase(expvoucherGridBodyList1S)) {
			actvoucherGridBodyList1Result = true;
		}

		System.err.println("VoucherGridBodyList1Result : " + actvoucherGridBodyList1Result + "  Value Expected  "
				+ expvoucherGridBodyList1Result);

		System.out.println(
				"************************************* checkLoadTheBaseDocumentDetailsAtTheTimeOfLinkingOption  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");
		System.out.println("LinkRowCountValue : " + actLinkRowCountValue + " Value Expected : " + expLinkRowCountValue);
		System.out.println(
				"LinkRowCountValue1 : " + actLinkRowCountValue1 + " Value Expected : " + expLinkRowCountValue1);
		System.out.println(
				"voucherGridBodyList : " + actvoucherGridBodyList + " Value Expected : " + expvoucherGridBodyList);
		System.out.println(
				"voucherGridBodyList1 : " + actvoucherGridBodyList1 + " Value Expected : " + expvoucherGridBodyList1);
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait()
				.until(ExpectedConditions.elementToBeClickable(loadTheBaseDocumentDetailsAtTheTimeOfLinkingChkbox));

		if (loadTheBaseDocumentDetailsAtTheTimeOfLinkingChkboxIsSelected.isSelected() == false) {
			loadTheBaseDocumentDetailsAtTheTimeOfLinkingChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		checkEraseAllTransactionsLogoutAndLogin();

		if (savingMessage == true && actLinkRowCountValue == expLinkRowCountValue
				&& actLinkRowCountValue1 == expLinkRowCountValue1
				&& actvoucherGridBodyListResult == expvoucherGridBodyListResult
				&& actvoucherGridBodyList1Result == expvoucherGridBodyList1Result) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean checkLinkIsOptionalIfTheDocumentIsLinkedToOtherBaseDocumentOption()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(materialRequisitionDragAndDrop));
		materialRequisitionDragAndDrop.click();

		getAction().dragAndDropBy(materialRequisitionDragAndDrop, 350, -150).build().perform();
		 //getAction().dragAndDropBy(materialRequisitionDragAndDrop, 350, -50).build().perform();

		getAction().contextClick(draggedMaterialRequisition).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(draggedlinkBtn));
		draggedlinkBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(linkNode0Left));
		linkNode0Left.click();

		Thread.sleep(2000);
		// getAction().moveToElement(link5TO6).doubleClick(link5TO6).build().perform();

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line5 > path').setAttribute('stroke-width', '14')");

		Thread.sleep(3000);

		System.err.println(link5TO6.isEnabled());
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link5TO6));
		//link5TO6.click();
		 getAction().moveToElement(link5TO6).click().build().perform();
		//moveToElement(link5TO6);
		
		Thread.sleep(2000);

		/*
		 * ScrollToElement(link5TO6); ClickUsingJs(link5TO6);
		 */

		// getAction().moveToElement(link5TO6).click().build().perform();
		/*
		 * System.err.println(link5TO6.isDisplayed());
		 * getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(
		 * link5TO6)); getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(link5TO6)); click(link5TO6);
		 * //getAction().moveToElement(link5TO6).click().build().perform();
		 * //ClickUsingJs(link5TO6);
		 * 
		 * 
		 * 
		 * 
		 * 
		 * 
		 * 
		 */
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DefinitionTab));
		DefinitionTab.click();

		Select s = new Select(DefinitionLinkValueDropdown);

		s.selectByVisibleText("Quantity");

		int definitionTabChkBoxNameListCount = definitionTabChkBoxNameList.size();

		for (int i = 1; i < definitionTabChkBoxNameListCount; i++) {
			String data = definitionTabChkBoxNameList.get(i).getText();

			if (data.equalsIgnoreCase("ITEM")) {
				definitionTabChkBoxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(linkIsMandatoryChkbox));

		if (linkIsMandatoryChkboxIsSelected.isSelected() == false) {
			linkIsMandatoryChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */
		//reLogin("su", "su");
		
		checkLogoutAndLogin();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		Select workflowVoucher = new Select(workFlowDropdown);
		workflowVoucher.selectByVisibleText("Purchases Orders");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen = LinkRowCount;

		int actLinkRowCountValue = rowCountInLinkScreen.size();
		int expLinkRowCountValue = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(Keys.END, Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		String expValidationMessage = "Provide data for mandatory fieldsL-Material Requisition";
		String actValidationMessage = checkValidationMessage(expValidationMessage);

		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(draggedPurchasesVouchersN));
		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line5 > path').setAttribute('stroke-width', '14')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link5TO6));
		link5TO6.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions
				.elementToBeClickable(linkIsOptionalIfTheDocumentIsLinkedToAnotherbasedocumentChkbox));

		if (linkIsOptionalIfTheDocumentIsLinkedToAnotherbasedocumentChkboxIsSelected.isSelected() == false) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(linkIsMandatoryChkbox));
			linkIsMandatoryChkbox.click();
			Thread.sleep(1000);
			linkIsMandatoryChkbox.click();
			linkIsOptionalIfTheDocumentIsLinkedToAnotherbasedocumentChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		/*
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */

		//reLogin("su", "su");
		checkLogoutAndLogin();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		workflowVoucher.selectByVisibleText("Purchases Orders");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen1 = LinkRowCount;

		int actLinkRowCountValue1 = rowCountInLinkScreen.size();
		int expLinkRowCountValue1 = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(Keys.END, Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno1 = documentNumberTxt.getAttribute("value");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		boolean savingMessage1 = checkVoucherSavingMessage(docno1);

		System.out.println(
				"************************************* checkLoadTheBaseDocumentDetailsAtTheTimeOfLinkingOption  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");
		System.out.println("LinkRowCountValue : " + actLinkRowCountValue + " Value Expected : " + expLinkRowCountValue);
		System.out.println("savingMessage1 : " + savingMessage1 + " Value Expected : " + "TRUE");

		System.out
				.println("Validation Message : " + actValidationMessage + " Value Expected : " + expValidationMessage);

		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		checkEraseAllTransactions();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(draggedMaterialRequisition));
		getAction().contextClick(draggedMaterialRequisition).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(draggeddeleteBtn));
		draggeddeleteBtn.click();

		Thread.sleep(2000);

		if (getIsAlertPresent() == true) {
			getAlert().accept();
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage2 = "WorkFlow Saved Successfully";

		String actMessage2 = checkValidationMessage(expMessage2);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		checkEraseAllTransactionsLogoutAndLogin();

		if (actValidationMessage.equalsIgnoreCase(expValidationMessage) && actLinkRowCountValue == expLinkRowCountValue
				&& actLinkRowCountValue1 == expLinkRowCountValue1 && savingMessage == true && savingMessage1 == true) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean checkRaiseLinkDocumentWhenBaseIsSaved()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));

		boolean actVoucherBody = voucherBodyGrid.getText().isEmpty();
		boolean expVoucherBody = true;
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingTab));
		settingTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(raiseLinkDocumentWhenbaseIsSavedChkbox));

		if (raiseLinkDocumentWhenbaseIsSavedChkboxIsSelected.isSelected() == false) {
			raiseLinkDocumentWhenbaseIsSavedChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		/*
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */

		//reLogin("su", "su");
		checkLogoutAndLogin();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getAction().doubleClick(grid_ChkBox1).build().perform();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
		voucherhomeCloseBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));

		int actrowCountAfterSelection = voucherBodyGridRowCount.size() - 1;
		int exprowCountAfterSelection = 1;

		System.out.println(
				"************************************* checkRaiseLinkDocumentWhenBaseIsSaved  *********************************");
		System.out.println("SavingMessage  :  " + savingMessage + " Value Expected : " + "TRUE");
		System.out.println("VoucherBody : " + actVoucherBody + " Value Expected : " + expVoucherBody);
		System.out.println("rowCountAfterSelection : " + actrowCountAfterSelection + " Value Expected : "
				+ exprowCountAfterSelection);
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingTab));
		settingTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(raiseLinkDocumentWhenbaseIsSavedChkbox));

		if (raiseLinkDocumentWhenbaseIsSavedChkboxIsSelected.isSelected() == true) {
			raiseLinkDocumentWhenbaseIsSavedChkbox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage2 = checkValidationMessage(expMessage1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		checkEraseAllTransactionsLogoutAndLogin();

		if (savingMessage == true && actVoucherBody == expVoucherBody
				&& actrowCountAfterSelection == exprowCountAfterSelection) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean checkLoadPendingDocumentsAndBasedOnFieldOption()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		String expPOSaveMessage1 = "Voucher saved successfully";
		String expPOSaveMessage2 = "1";
		String actPOSaveMessage = checkValidationMessage(expPOSaveMessage1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNewNarration));
		purchaseVoucherNewNarration.click();
		purchaseVoucherNewNarration.sendKeys("1");
		purchaseVoucherNewNarration.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		int voucherGridBodyListCount = voucherGridBodyList.size();

		ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();

		for (int i = 0; i < voucherGridBodyListCount; i++) {
			String data = voucherGridBodyList.get(i).getText();

			voucherGridBodyListArray.add(data);
		}

		String actvoucherGridBodyList = voucherGridBodyListArray.toString();
		String expvoucherGridBodyList = "[1, , , , , , , , , , 2, , , , , , , , , , 3, , , , , , , , , , 4, , , , , , , , , , 5, , , , , , , , , ]";

		System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
		System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);
		
		Thread.sleep(1500);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(MapTab)); MapTab.click();
		 * 
		 * Thread.sleep(3000);
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(baseFieldRow2)); baseFieldRow2.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(baseFieldDropDown)); Select
		 * baseFieldDropDownselect = new Select(baseFieldDropDown);
		 * 
		 * baseFieldDropDownselect.selectByVisibleText("Rate");
		 * baseFieldDropDown.sendKeys(Keys.TAB);
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(linkFieldDropDown)); Select
		 * linkFieldDropDownselect = new Select(linkFieldDropDown);
		 * 
		 * linkFieldDropDownselect.selectByVisibleText("Rate");
		 * linkFieldDropDown.sendKeys(Keys.TAB);
		 * 
		 * Thread.sleep(2000);
		 */

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingTab));
		settingTab.click();

		Thread.sleep(2000);

		Select loadpendingDocuments = new Select(loadpendingDocumentsDropdown);
		loadpendingDocuments.selectByVisibleText("Based On Field");

		Thread.sleep(2000);

		Select loadFields = new Select(loadFieldsDropdown);
		loadFields.selectByVisibleText("Narration");

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */

		//reLogin("su", "su");
		checkLogoutAndLogin();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNewNarration));
		purchaseVoucherNewNarration.click();
		purchaseVoucherNewNarration.sendKeys("1");
		purchaseVoucherNewNarration.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		int voucherGridBodyListCount1 = voucherGridBodyList.size();

		ArrayList<String> voucherGridBodyListArray1 = new ArrayList<String>();

		for (int i = 0; i < voucherGridBodyListCount1; i++) {

			String data = voucherGridBodyList.get(i).getText();

			voucherGridBodyListArray1.add(data);
		}

		String actvoucherGridBodyListAfterSelection = voucherGridBodyListArray1.toString();

		String expvoucherGridBodyListAfterSelection = "[1, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, , , , , , , , , , 3, , , , , , , , , , 4, , , , , , , , , , 5, , , , , , , , , ]";
		String expvoucherGridBodyListAfterSelectionS = "[1, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, , , , , , , , , , 3, , , , , , , , , , 4, , , , , , , , , , 5, , , , , , , , , ]";

		System.out.println("voucherGridBodyListAfterSelection Actual    : " + actvoucherGridBodyListAfterSelection);
		System.out.println("voucherGridBodyListAfterSelection Expected  : " + expvoucherGridBodyListAfterSelection);

		boolean actVoucherGridBodyListAfterSelection = false;
		boolean expVoucherGridBodyListAfterSelection = true;

		if (actvoucherGridBodyListAfterSelection.equalsIgnoreCase(expvoucherGridBodyListAfterSelection)
				|| actvoucherGridBodyListAfterSelection.equalsIgnoreCase(expvoucherGridBodyListAfterSelectionS)) {
			actVoucherGridBodyListAfterSelection = true;
		}

		System.err.println("VoucherGridBodyListAfterSelection : " + actVoucherGridBodyListAfterSelection
				+ "  Value Expected  " + expVoucherGridBodyListAfterSelection);

		System.out.println(
				"************************************* checkRaiseLinkDocumentWhenBaseIsSaved  *********************************");
		System.out.println("SavingMessage  :  " + actPOSaveMessage + " Value Expected : " + expPOSaveMessage1 + " "
				+ expPOSaveMessage2);
		System.out.println(
				"voucherGridBodyList : " + actvoucherGridBodyList + " Value Expected : " + expvoucherGridBodyList);
		System.out.println("voucherGridBodyListAfterSelection : " + actvoucherGridBodyListAfterSelection
				+ " Value Expected : " + expvoucherGridBodyListAfterSelection);
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingTab));
		settingTab.click();

		Thread.sleep(2000);

		loadpendingDocuments.selectByIndex(0);

		// loadFields.selectByIndex(1);

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		checkEraseAllTransactionsLogoutAndLogin();

		if (actPOSaveMessage.startsWith(expPOSaveMessage1) && actPOSaveMessage.endsWith(expPOSaveMessage2)
				&& actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList)
				&& actVoucherGridBodyListAfterSelection == expVoucherGridBodyListAfterSelection) {
			System.out.println("Voucher Saved");
			return true;
		} else {
			System.out.println("Voucher Not Saved");
			return false;
		}
	}

	public boolean checkLoadPendingDocumentsAndBasedOnFieldOptionWithExtraField()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsMenu));
		SettingsMenu.click();

		Thread.sleep(2000);

		int count = SettingsSubMenusList.size();

		for (int i = 0; i < count; i++) {
			String data = SettingsSubMenusList.get(i).getText();

			System.err.println(data);

			ScrollIntoView(SettingsSubMenusList.get(i));

			if (data.equalsIgnoreCase("Configure Transactions")) {
				SettingsSubMenusList.get(i).click();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(configureTransactionPreferencesMinus));
		configureTransactionPreferencesMinus.click();

		Thread.sleep(2000);

		getFluentWebDriverWait()
				.until(ExpectedConditions.elementToBeClickable(configureTransactionDocumentCustomiztionMinus));
		configureTransactionDocumentCustomiztionMinus.click();

		Thread.sleep(1000);
		
		ScrollIntoView(purchaseOrdersBtn);
		
		ClickUsingJs(purchaseOrdersBtn);

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseOrdersBtn));
		//purchaseOrdersBtn.click();

		Thread.sleep(6000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		Thread.sleep(6000);

		Select s = new Select(editLayoutLoadFieldsDropdown);
		s.selectByVisibleText("Purchase Vouchers N");
		Thread.sleep(2200);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();

		Thread.sleep(4000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		ScrollIntoView(updateBtn);
		moveToElement(updateBtn);

		String expMessage = "Data Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);
		
		checkLogoutAndLogin();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		// pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		String expPOSaveMessage1 = "Voucher saved successfully";
		String expPOSaveMessage2 = "1";
		String actPOSaveMessage = checkValidationMessage(expPOSaveMessage1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNewTest));
		purchaseVoucherNewTest.click();
		purchaseVoucherNewTest.sendKeys("1");
		purchaseVoucherNewTest.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		int voucherGridBodyListCount = voucherGridBodyList.size();

		ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();

		for (int i = 0; i < voucherGridBodyListCount; i++) {

			String data = voucherGridBodyList.get(i).getText();

			voucherGridBodyListArray.add(data);
		}

		String actvoucherGridBodyList = voucherGridBodyListArray.toString();

		String expvoucherGridBodyList = "[1, , , , , , , , , , 2, , , , , , , , , , 3, , , , , , , , , , 4, , , , , , , , , , 5, , , , , , , , , ]";

		System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
		System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingTab));
		settingTab.click();

		Thread.sleep(2000);

		Select loadpendingDocuments = new Select(loadpendingDocumentsDropdown);
		loadpendingDocuments.selectByVisibleText("Based On Field");

		Select loadFields = new Select(loadFieldsDropdown);
		loadFields.selectByVisibleText("Test");

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */
		//reLogin("su", "su");
		
		checkLogoutAndLogin();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNewTest));
		purchaseVoucherNewTest.click();
		purchaseVoucherNewTest.sendKeys("1");
		purchaseVoucherNewTest.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();

		Thread.sleep(2000);

		int voucherGridBodyListCount1 = voucherGridBodyList.size();

		ArrayList<String> voucherGridBodyListArray1 = new ArrayList<String>();

		for (int i = 0; i < voucherGridBodyListCount1; i++) {
			String data = voucherGridBodyList.get(i).getText();
			voucherGridBodyListArray1.add(data);
		}

		String actvoucherGridBodyListAfterSelection = voucherGridBodyListArray1.toString();

		String expvoucherGridBodyListAfterSelection = "[1, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, , , , , , , , , , 3, , , , , , , , , , 4, , , , , , , , , , 5, , , , , , , , , ]";
		String expvoucherGridBodyListAfterSelectionS = "[1, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, , , , , , , , , , 3, , , , , , , , , , 4, , , , , , , , , , 5, , , , , , , , , ]";

		System.out.println("voucherGridBodyListAfterSelection Actual    : " + actvoucherGridBodyListAfterSelection);
		System.out.println("voucherGridBodyListAfterSelection Expected  : " + expvoucherGridBodyListAfterSelection);

		boolean actVoucherGridBodyListAfterSelection = false;
		boolean expVoucherGridBodyListAfterSelection = true;

		if (actvoucherGridBodyListAfterSelection.equalsIgnoreCase(expvoucherGridBodyListAfterSelection)
				|| actvoucherGridBodyListAfterSelection.equalsIgnoreCase(expvoucherGridBodyListAfterSelectionS)) {
			actVoucherGridBodyListAfterSelection = true;
		}

		System.err.println("VoucherGridBodyListAfterSelection : " + actVoucherGridBodyListAfterSelection
				+ "  Value Expected  " + expVoucherGridBodyListAfterSelection);

		System.out.println(
				"************************************* checkLoadPendingDocumentsAndBasedOnFieldOptionWithExtraField  *********************************");
		System.out.println("SavingMessage  :  " + actPOSaveMessage + " Value Expected : " + expPOSaveMessage1 + " "
				+ expPOSaveMessage2);
		System.out.println(
				"voucherGridBodyList : " + actvoucherGridBodyList + " Value Expected : " + expvoucherGridBodyList);
		System.out.println("voucherGridBodyListAfterSelection : " + actvoucherGridBodyListAfterSelection
				+ " Value Expected : " + expvoucherGridBodyListAfterSelection);
		
		Thread.sleep(1500);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingTab));
		settingTab.click();

		Thread.sleep(2000);

		loadpendingDocuments.selectByIndex(0);

		// loadFields.selectByIndex(2);

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage2 = "WorkFlow Saved Successfully";

		String actMessage2 = checkValidationMessage(expMessage2);

		checkEraseAllTransactionsLogoutAndLogin();

		if (actPOSaveMessage.startsWith(expPOSaveMessage1) && actPOSaveMessage.endsWith(expPOSaveMessage2)
				&& actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList)
				&& actVoucherGridBodyListAfterSelection == expVoucherGridBodyListAfterSelection) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean CheckToleranceValueAndUseItemWiseToleranceWhenAvailableOption()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		
		Thread.sleep(1500);

		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		Thread.sleep(2000);

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingTab));
		settingTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tolerance2Txt));
		tolerance2Txt.click();
		tolerance2Txt.sendKeys(Keys.END);
		tolerance2Txt.sendKeys(Keys.SHIFT, Keys.HOME);
		tolerance2Txt.sendKeys("10");
		tolerance2Txt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cannotExceedTheBaseValueChkbox));

		if (cannotExceedTheBaseValueChkboxIsSelected.isSelected() == false) {
			cannotExceedTheBaseValueChkbox.click();
		}

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "WorkFlow Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		/*
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */

		//reLogin("su", "su");
		
		checkLogoutAndLogin();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("100");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen1 = LinkRowCount;

		int actLinkRowCountValue1 = rowCountInLinkScreen1.size();
		int expLinkRowCountValue1 = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(Keys.END, Keys.SHIFT, Keys.HOME);
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno1 = documentNumberTxt.getAttribute("value");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		boolean savingMessage1 = checkVoucherSavingMessage(docno1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("105");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		boolean savingMessage2 = checkVoucherSavingMessage(docno1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("111");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expValidationMessage = "Tolerance quantity has been exceeded .";
		String actValidationMessage = checkValidationMessage(expValidationMessage);

		checkEraseAllTransactionsAfterIntialCheck();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterMenu));
		homeMasterMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterItemMenu));
		homeMasterItemMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterItem_ItemMenu));
		homeMasterItem_ItemMenu.click();

		int ItemList = itemList.size();

		for (int i = 0; i < ItemList; i++) {
			String data = itemList.get(i).getText();

			if (data.equalsIgnoreCase("STD RATE COGS ITEM")) {
				itemList.get(i).click();
				itemListChkBox.get(i).click();

				break;
			}
		}

		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(itemFirstCheckBox)); itemFirstCheckBox.click();
		 */

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemPropertiesBtn));
		itemPropertiesBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemToleranceTxt));
		itemToleranceTxt.click();
		itemToleranceTxt.sendKeys(Keys.END);
		itemToleranceTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		itemToleranceTxt.sendKeys("20");
		itemToleranceTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesOkBtn));
		ItemPropertiesOkBtn.click();

		if (validationConfirmationMessage.getText().isEmpty() == false) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
		}

		Thread.sleep(2000);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		Thread.sleep(3000);

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait()
				.until(ExpectedConditions.elementToBeClickable(useItemWiseToleranceWhenAvailableChkBox));

		if (useItemWiseToleranceWhenAvailableChkBoxIsSelected.isSelected() == false) {
			useItemWiseToleranceWhenAvailableChkBox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessageWorkFLow = "WorkFlow Saved Successfully";

		String actMessageWorkFLow = checkValidationMessage(expMessageWorkFLow);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */

		//reLogin("su", "su");
		
		checkLogoutAndLogin();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		//// pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("100");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno3 = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage5 = checkVoucherSavingMessage(docno3);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen = LinkRowCount;

		int actLinkRowCountValue = rowCountInLinkScreen.size();
		int expLinkRowCountValue = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys(Keys.END, Keys.SHIFT, Keys.HOME);
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno2 = documentNumberTxt.getAttribute("value");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		boolean savingMessage3 = checkVoucherSavingMessage(docno2);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("111");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		Thread.sleep(1000);

		boolean savingMessage4 = checkVoucherSavingMessage(docno2);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("121");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expValidationMessageOnItemTolerance = "Tolerance quantity has been exceeded .";
		String actValidationMessageOnItemTolerance = checkValidationMessage(expValidationMessageOnItemTolerance);

		System.out.println(
				"************************************* CheckToleranceValueAndUseItemWiseToleranceWhenAvailableOption  *********************************");
		System.out.println("SavingMessage   :  " + savingMessage + " Value Expected : " + "TRUE");
		System.out.println("SavingMessage1  :  " + savingMessage1 + " Value Expected : " + "TRUE");
		System.out.println("SavingMessage2  :  " + savingMessage2 + " Value Expected : " + "TRUE");
		System.out.println("SavingMessage3  :  " + savingMessage3 + " Value Expected : " + "TRUE");
		System.out.println("SavingMessage4  :  " + savingMessage4 + " Value Expected : " + "TRUE");
		System.out.println("LinkRowCountValue                : " + actLinkRowCountValue + " Value Expected : "
				+ expLinkRowCountValue);
		System.out.println("LinkRowCountValue1               : " + actLinkRowCountValue1 + " Value Expected : "
				+ expLinkRowCountValue1);
		System.out.println("ValidationMessage                : " + actValidationMessage + " Value Expected : "
				+ expValidationMessage);
		System.out.println("ValidationMessageOnItemTolerance : " + actValidationMessageOnItemTolerance
				+ " Value Expected : " + expValidationMessageOnItemTolerance);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterMenu));
		homeMasterMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterItemMenu));
		homeMasterItemMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterItem_ItemMenu));
		homeMasterItem_ItemMenu.click();

		Thread.sleep(2000);

		for (int i = 0; i < ItemList; i++) {
			String data = itemList.get(i).getText();
			Thread.sleep(1000);

			if (data.equalsIgnoreCase("STD RATE COGS ITEM")) {
				itemList.get(i).click();
				itemListChkBox.get(i).click();

				break;
			}
		}

		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(itemFirstCheckBox)); itemFirstCheckBox.click();
		 */

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemPropertiesBtn));
		itemPropertiesBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemToleranceTxt));
		itemToleranceTxt.click();
		itemToleranceTxt.sendKeys(Keys.END);
		itemToleranceTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		itemToleranceTxt.sendKeys("0");
		itemToleranceTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesOkBtn));
		ItemPropertiesOkBtn.click();

		if (/*validationConfirmationMessage*/errorMessage.getText().isEmpty() == false) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
		}

		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		Thread.sleep(3000);

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		draggedPurchasesVouchersN.click();

		Thread.sleep(2000);

		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingTab));
		settingTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tolerance2Txt));
		tolerance2Txt.click();
		tolerance2Txt.sendKeys(Keys.END);
		tolerance2Txt.sendKeys(Keys.SHIFT, Keys.HOME);
		tolerance2Txt.sendKeys("0.0000");
		tolerance2Txt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cannotExceedTheBaseValueChkbox));

		if (cannotExceedTheBaseValueChkboxIsSelected.isSelected() == true) {
			cannotExceedTheBaseValueChkbox.click();
		}

		Thread.sleep(2000);

		getFluentWebDriverWait()
				.until(ExpectedConditions.elementToBeClickable(useItemWiseToleranceWhenAvailableChkBox));

		if (useItemWiseToleranceWhenAvailableChkBoxIsSelected.isSelected() == true) {
			useItemWiseToleranceWhenAvailableChkBox.click();
		}

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();

		ClickUsingJs(OkBtn);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage1 = "WorkFlow Saved Successfully";

		String actMessage1 = checkValidationMessage(expMessage1);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		Thread.sleep(2000);

		checkEraseAllTransactionsLogoutAndLogin();

		if (savingMessage == true && savingMessage1 == true && savingMessage2 == true && savingMessage3 == true
				&& savingMessage4 == true && actValidationMessage.equalsIgnoreCase(expValidationMessage)
				&& actValidationMessageOnItemTolerance.equalsIgnoreCase(expValidationMessageOnItemTolerance)
				&& actLinkRowCountValue == expLinkRowCountValue && actLinkRowCountValue1 == expLinkRowCountValue1) {
			System.out.println("Voucher Saved");
			return true;
		} else {
			System.out.println("Voucher Not Saved");
			return false;
		}
	}

	public boolean checkCustomizeOptionAndHideThisColumnInControlPlusL()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(3000);

		List<WebElement> rowCountInLinkScreen1 = LinkRowCount;

		int actLinkRowCountValue1 = rowCountInLinkScreen1.size();
		int expLinkRowCountValue1 = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCustomizeBtnCL));
		workFlowCustomizeBtnCL.click();

		Thread.sleep(5000);

		int cusHeaderListCount = cusHeaderList.size();

		String actcusHeaderList = Integer.toString(cusHeaderListCount);
		String expcusHeaderList = "5";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendTab));
		suspendTab.click();

		Thread.sleep(5000);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(hideThisColumnChkbox));
		hideThisColumnChkbox.click();*/
		
		if (hideThisColumnChkboxisSelected.isSelected() == false) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(hideThisColumnChkbox));
			hideThisColumnChkbox.click();
		}
		
		System.err.println(errorMessage.getText().isEmpty());

		try {
			
			if (/*validationConfirmationMessage*/errorMessage.getText().isEmpty() == true) {
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				errorMessageCloseBtn.click();
				System.err.println("error msg closed");
			}
			
		} catch (Exception e) {
			System.err.println("error msg not displaying");
		}
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
		custSaveBtn.click();

		String expSaveMessage = "Data saved successfully";
		String actSaveMessage = checkValidationMessage(expSaveMessage);

		Thread.sleep(2000);

		/*int cusHeaderListCount1 = cusHeaderList.size();

		String actcusHeaderList1 = Integer.toString(cusHeaderListCount1);
		String expcusHeaderList1 = "4";*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCustomizeBtnCL));
		workFlowCustomizeBtnCL.click();

		Thread.sleep(5000);		
		
		
		int cusHeaderListCount1 = cusHeaderList.size();

		String actcusHeaderList1 = Integer.toString(cusHeaderListCount1);
		String expcusHeaderList1 = "4";
		
		

		Thread.sleep(5000);

		String expworkFlowHeaderList = "[Voucher No, Date, Name, Quantity]";

		int workFlowHeaderListCount = workFlowHeaderList.size();

		ArrayList<String> workFlowHeaderListArray = new ArrayList<String>();

		for (int i = 0; i < workFlowHeaderListCount; i++) {
			String data = workFlowHeaderList.get(i).getText();

			workFlowHeaderListArray.add(data);
		}

		String actworkFlowHeaderList = workFlowHeaderListArray.toString();

		System.out.println("actworkFlowHeaderList : " + actworkFlowHeaderList);
		System.out.println("expworkFlowHeaderList : " + expworkFlowHeaderList);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCustomizeBtnCL));
		workFlowCustomizeBtnCL.click();

		Thread.sleep(5000);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendTab));
		suspendTab.click();

		Thread.sleep(5000);

		if (hideThisColumnChkboxisSelected.isSelected() == true) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(hideThisColumnChkbox));
			hideThisColumnChkbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
		custSaveBtn.click();

		String expSaveMessage1 = "Data saved successfully";
		String actSaveMessage1 = checkValidationMessage(expSaveMessage1);

		Thread.sleep(2000);

		System.out.println(
				"************************************* checkCustomizeOptionInControlPlusL  *********************************");
		/*
		 * System.out.println("SavingMessage   :  "+savingMessage
		 * +" Value Expected : "+"TRUE");
		 */
		System.out.println("SaveMessage  :  " + actSaveMessage + " Value Expected : " + expSaveMessage);
		System.out.println("cusHeaderList  :  " + actcusHeaderList + " Value Expected : " + expcusHeaderList);
		System.out.println("cusHeaderList1  :  " + actcusHeaderList1 + " Value Expected : " + expcusHeaderList1);

		if (actSaveMessage.equalsIgnoreCase(expSaveMessage)
				&& actworkFlowHeaderList.equalsIgnoreCase(expworkFlowHeaderList)
				&& actcusHeaderList.equalsIgnoreCase(expcusHeaderList)) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean checkCustomizeOptionAndAddingExtraFieldsInControlPlusL()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCustomizeBtnCL));
		workFlowCustomizeBtnCL.click();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custLeftPannelTransExpandBtn));
		custLeftPannelTransExpandBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custTransExtraFieldExpandBtn));
		custTransExtraFieldExpandBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseExpandBtn));
		warehouseExpandBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseName));
		getAction().doubleClick(warehouseName).build().perform();

		int cusHeaderListCount = cusHeaderList.size();

		String actcusHeaderList = Integer.toString(cusHeaderListCount);
		String expcusHeaderList = "6";

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
		custSaveBtn.click();

		String expSaveMessage = "Data saved successfully";
		String actSaveMessage = checkValidationMessage(expSaveMessage);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		/*Thread.sleep(3000);

		String expworkFlowHeaderList = "[Voucher No, Date, Name, Quantity, Suspended, Warehouse Name]";

		int workFlowHeaderListCount = workFlowHeaderList.size();

		ArrayList<String> workFlowHeaderListArray = new ArrayList<String>();

		for (int i = 0; i < workFlowHeaderListCount; i++) {
			String data = workFlowHeaderList.get(i).getText();

			workFlowHeaderListArray.add(data);
		}

		String actworkFlowHeaderList = workFlowHeaderListArray.toString();

		System.out.println("actworkFlowHeaderList : " + actworkFlowHeaderList);
		System.out.println("expworkFlowHeaderList : " + expworkFlowHeaderList);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCustomizeBtnCL));
		workFlowCustomizeBtnCL.click();

		Thread.sleep(5000);
		
		
		Thread.sleep(3000);

		String expworkFlowHeaderList = "[Voucher Number, Date, Name, Quantity, Suspended, Warehouse Name]";

		int workFlowHeaderListCount = workFlowHeaderList.size();

		ArrayList<String> workFlowHeaderListArray = new ArrayList<String>();

		for (int i = 0; i < workFlowHeaderListCount; i++) {
			String data = workFlowHeaderList.get(i).getText();

			workFlowHeaderListArray.add(data);
		}

		String actworkFlowHeaderList = workFlowHeaderListArray.toString();

		System.out.println("actworkFlowHeaderList : " + actworkFlowHeaderList);
		System.out.println("expworkFlowHeaderList : " + expworkFlowHeaderList);

		int custBodyHeader = custBodyHeaderList.size();

		for (int i = 0; i < custBodyHeader; i++) {
			String data = custBodyHeaderList.get(i).getText();

			if (data.equalsIgnoreCase("Warehouse Name")) {
				custBodyHeaderList.get(i).click();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custExtraFieldRemoveBtn));
		custExtraFieldRemoveBtn.click();

		int cusHeaderListCountAfterRemoving = cusHeaderList.size();

		String actcusHeaderListCountAfterRemoving = Integer.toString(cusHeaderListCountAfterRemoving);
		String expcusHeaderListCountAfterRemoving = "5";

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
		custSaveBtn.click();

		String actSaveMessage1 = checkValidationMessage(expSaveMessage);

		Thread.sleep(3000);

		System.out.println(
				"************************************* checkCustomizeOptionAndAddingExtraFieldsInControlPlusL  *********************************");
		System.out.println("SaveMessage  :  " + actSaveMessage + " Value Expected : " + expSaveMessage);
		System.out.println("cusHeaderList  :  " + actcusHeaderList + " Value Expected : " + expcusHeaderList);
		System.out.println("cusHeaderListCountAfterRemoving  :  " + actcusHeaderListCountAfterRemoving
				+ " Value Expected : " + expcusHeaderListCountAfterRemoving);

		checkEraseAllTransactionsAfterIntialCheck();

		if (actSaveMessage.equalsIgnoreCase(expSaveMessage)
				&& actworkFlowHeaderList.equalsIgnoreCase(expworkFlowHeaderList)
				&& actcusHeaderList.equalsIgnoreCase(expcusHeaderList)
				&& actcusHeaderListCountAfterRemoving.equalsIgnoreCase(expcusHeaderListCountAfterRemoving)) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean checkCustomizeOptionAndHideThisColumnInLineWise()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		// pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
		warehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(2000);
		warehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(3000);

		List<WebElement> rowCountInLinkScreen1 = LinkRowCountLineWise;

		int actLinkRowCountValue1 = rowCountInLinkScreen1.size();
		int expLinkRowCountValue1 = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCustomizeBtnCL));
		workFlowCustomizeBtnCL.click();

		Thread.sleep(5000);

		int cusHeaderListCount = cusHeaderList.size();

		String actcusHeaderList = Integer.toString(cusHeaderListCount);
		String expcusHeaderList = "5";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendTab));
		suspendTab.click();
		
		Thread.sleep(5000);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(hideThisColumnChkbox));
		hideThisColumnChkbox.click();*/
		
		if (hideThisColumnChkboxisSelected.isSelected() == false) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(hideThisColumnChkbox));
			hideThisColumnChkbox.click();
		}

		if (/*validationConfirmationMessage*/errorMessage.getText().isEmpty() == false) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
		custSaveBtn.click();

		String expSaveMessage = "Data saved successfully";
		String actSaveMessage = checkValidationMessage(expSaveMessage);

		Thread.sleep(2000);
		
		/*click(vouchersaveBtn);
		
		Thread.sleep(1500);
		
		boolean savingMessage1 = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);*/
		
		reLogin1("su", "su");

		
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		Thread.sleep(2000);
		
		/*int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}*/

		

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
		select1stRow_6thColumn.click();*/
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCustomizeBtnCL));
		workFlowCustomizeBtnCL.click();

		Thread.sleep(5000);
		
		String expworkFlowHeaderList = "[Voucher Number, Date, Name, Quantity, Suspended]";

		int workFlowHeaderListCount = workFlowHeaderListLineWise.size();

		ArrayList<String> workFlowHeaderListArray = new ArrayList<String>();

		for (int i = 0; i < workFlowHeaderListCount; i++) {
			String data = workFlowHeaderListLineWise.get(i).getText();

			workFlowHeaderListArray.add(data);
		}

		String actworkFlowHeaderList = workFlowHeaderListArray.toString();

		System.out.println("actworkFlowHeaderList : " + actworkFlowHeaderList);
		System.out.println("expworkFlowHeaderList : " + expworkFlowHeaderList);

		int cusHeaderListCountAfterHiding = cusHeaderList.size();

		String actcusHeaderListCountAfterHiding = Integer.toString(cusHeaderListCountAfterHiding);
		String expcusHeaderListCountAfterHiding = "4";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendTab));
		suspendTab.click();
		
		Thread.sleep(5000);

		if (hideThisColumnChkboxisSelected.isSelected() == true) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(hideThisColumnChkbox));
			hideThisColumnChkbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
		custSaveBtn.click();

		String expSaveMessage1 = "Data saved successfully";
		String actSaveMessage1 = checkValidationMessage(expSaveMessage1);

		System.out.println(
				"************************************* checkCustomizeOptionInControlPlusL  *********************************");
		/*
		 * System.out.println("SavingMessage   :  "+savingMessage
		 * +" Value Expected : "+"TRUE");
		 */
		System.out.println("SaveMessage  :  " + actSaveMessage + " Value Expected : " + expSaveMessage);
		System.out.println("cusHeaderList  :  " + actcusHeaderList + " Value Expected : " + expcusHeaderList);
		System.out.println("cusHeaderListCountAfterHiding  :  " + actcusHeaderListCountAfterHiding
				+ " Value Expected : " + expcusHeaderListCountAfterHiding);

		if (/* savingMessage==true && */ actSaveMessage.equalsIgnoreCase(expSaveMessage)
				&& actworkFlowHeaderList.equalsIgnoreCase(expworkFlowHeaderList)
				&& actcusHeaderList.equalsIgnoreCase(expcusHeaderList)
				&& actcusHeaderListCountAfterHiding == expcusHeaderListCountAfterHiding) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean checkCustomizeOptionAndAddingExtraFieldsInLineWise()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		Thread.sleep(3000);
		
		reLogin1("su", "su");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		Thread.sleep(2000);
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
		select1stRow_6thColumn.click();
*/
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCustomizeBtnCL));
		workFlowCustomizeBtnCL.click();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custLeftPannelTransExpandBtn));
		custLeftPannelTransExpandBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custTransExtraFieldExpandBtn));
		custTransExtraFieldExpandBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseExpandBtn));
		warehouseExpandBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseName));
		getAction().doubleClick(warehouseName).build().perform();

		int cusHeaderListCount = cusHeaderList.size();

		String actcusHeaderList = Integer.toString(cusHeaderListCount);
		String expcusHeaderList = "6";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
		custSaveBtn.click();

		String expSaveMessage = "Data saved successfully";
		String actSaveMessage = checkValidationMessage(expSaveMessage);

		Thread.sleep(3000);
		
		
		reLogin1("su", "su");

	/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
		select1stRow_6thColumn.click();*/
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		Thread.sleep(2000);
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		
		Thread.sleep(3000);

		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCustomizeBtnCL));
		workFlowCustomizeBtnCL.click();

		Thread.sleep(5000);
		
		
		String expworkFlowHeaderList = "[Voucher Number, Date, Name, Quantity, Suspended, Warehouse Name]";

		int workFlowHeaderListCount = workFlowHeaderListLineWise.size();

		ArrayList<String> workFlowHeaderListArray = new ArrayList<String>();

		for (int i = 0; i < workFlowHeaderListCount; i++) {
			String data = workFlowHeaderListLineWise.get(i).getText();

			workFlowHeaderListArray.add(data);
		}

		String actworkFlowHeaderList = workFlowHeaderListArray.toString();

		System.out.println("actworkFlowHeaderList : " + actworkFlowHeaderList);
		System.out.println("expworkFlowHeaderList : " + expworkFlowHeaderList);
		
		Thread.sleep(3000);

		int custBodyHeader = custBodyHeaderList.size();

		for (int i = 0; i < custBodyHeader; i++) {
			String data = custBodyHeaderList.get(i).getText();

			if (data.equalsIgnoreCase("Warehouse Name")) {
				custBodyHeaderList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custExtraFieldRemoveBtn));
		custExtraFieldRemoveBtn.click();

		int cusHeaderListCountAfterRemoving = cusHeaderList.size();

		String actcusHeaderListCountAfterRemoving = Integer.toString(cusHeaderListCountAfterRemoving);
		String expcusHeaderListCountAfterRemoving = "5";

		System.out.println(
				"************************************* checkCustomizeOptionAndAddingExtraFieldsInControlPlusL  *********************************");
		System.out.println("SaveMessage  :  ." + actSaveMessage + ". Value Expected : " + expSaveMessage);
		System.out.println("cusHeaderList  :  " + actcusHeaderList + " Value Expected : " + expcusHeaderList);
		System.out.println("cusHeaderListCountAfterRemoving  :  " + actcusHeaderListCountAfterRemoving
				+ " Value Expected : " + expcusHeaderListCountAfterRemoving);

		if (actSaveMessage.equalsIgnoreCase(expSaveMessage)
				&& actworkFlowHeaderList.equalsIgnoreCase(expworkFlowHeaderList)
				&& actcusHeaderList.equalsIgnoreCase(expcusHeaderList)
				&& actcusHeaderListCountAfterRemoving.equalsIgnoreCase(expcusHeaderListCountAfterRemoving)) {
			System.out.println("Voucher Saved");
			return true;
		} else {
			System.out.println("Voucher Not Saved");
			return false;
		}
	}

	@FindBy(xpath = "//tbody[@id='id_transaction_entry_detail_workflow_popup_body']/tr/td")
	private static List<WebElement> workflowTableList;

	public boolean checkCloseLinkAndPartialOptionInPurchaseOrderHavingTwoLinkDocuments()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen = LinkRowCount;

		int actLinkRowCountValue = rowCountInLinkScreen.size();
		int expLinkRowCountValue = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
		workFlowCtrlPlusLCloseBtn.click();

		/*click(voucherEntryPageCloseBtn);
		Thread.sleep(1000);
		click(voucherHomePageCloseBtn);*/

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstRowIndex));
		getAction().contextClick(firstRowIndex).build().perform();
		// firstRowIndex.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectRowBtn));
		selectRowBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeLinksOption));
		closeLinksOption.click();

		String expValidationMessage = "Link satus has been updated.";
		String actValidationMessage = checkValidationMessage(expValidationMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");
		Thread.sleep(2000);

		/*
		 * boolean actpurchaseVoucherWorlFlowText =
		 * purchaseVoucherWorlFlowText.isDisplayed(); boolean
		 * exppurchaseVoucherWorlFlowText = true;
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(workFlowCtrlPlusLCloseBtn));
		 * workFlowCtrlPlusLCloseBtn.click();
		 */

		boolean actpurchaseVoucherWorlFlowText;
		boolean exppurchaseVoucherWorlFlowText = true;

		try {
			if (workFlowPopupCtrlPlusL.isDisplayed() == true) {
				actpurchaseVoucherWorlFlowText = false;
				System.err.println(workFlowTableBody.getText());
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
				workFlowCtrlPlusLCloseBtn.click();

				click(voucherEntryPageCloseBtn);
				Thread.sleep(1000);
				click(voucherHomePageCloseBtn);

				Thread.sleep(2000);
			} else {
				actpurchaseVoucherWorlFlowText = true;
			}
		} catch (Exception e) {
			System.err.println(e.getMessage());
			actpurchaseVoucherWorlFlowText = true;
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstRowIndex));
		getAction().contextClick(firstRowIndex).build().perform();
		// firstRowIndex.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectRowBtn));
		selectRowBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(partialLinksOption));
		partialLinksOption.click();

		String expValidationMessageonPartial = "Link satus has been updated.";
		String actValidationMessageonPartial = checkValidationMessage(expValidationMessageonPartial);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen1 = LinkRowCount;

		int actLinkRowCountValue1 = rowCountInLinkScreen1.size();
		int expLinkRowCountValue1 = 1;

		System.out.println(
				"************************************* checkCloseLinkAndPartialOptionInPurchaseOrderHavingTwoLinkDocuments  *********************************");
		System.out
				.println("ValidationMessage  :  " + actValidationMessage + " Value Expected : " + expValidationMessage);
		System.out.println("ValidationMessageonPartial  :  " + actValidationMessageonPartial + " Value Expected : "
				+ expValidationMessageonPartial);
		System.out
				.println("LinkRowCountValue  :  " + actLinkRowCountValue + " Value Expected : " + expLinkRowCountValue);
		System.out.println(
				"LinkRowCountValue1  :  " + actLinkRowCountValue1 + " Value Expected : " + expLinkRowCountValue1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
		workFlowCtrlPlusLCloseBtn.click();

		checkEraseAllTransactions();

		if (actLinkRowCountValue == expLinkRowCountValue && actLinkRowCountValue1 == expLinkRowCountValue1
				&& actValidationMessage.equalsIgnoreCase(expValidationMessage)
				&& actValidationMessageonPartial.equalsIgnoreCase(expValidationMessageonPartial)) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean checkCloseLinkOptionOnPartialRowSelectionInPurchaseOrderHavingTwoLinkDocuments()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */

		reLogin1("su", "su");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		for (int a = 1; a <= 5; a++) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			// pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys(Keys.END);
			pvWareHouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
			pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
			pvWareHouseTxt.sendKeys("HYDERABAD");
			Thread.sleep(2000);
			pvWareHouseTxt.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(2000);
			enter_ItemTxt.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			enter_Quantity.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.click();
			enter_Discount.sendKeys(Keys.TAB);
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);
		
		click(voucherEntryPageCloseBtn);
		Thread.sleep(1000);
		click(voucherHomePageCloseBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		int voucherGridBodyListCount = voucherGridBodyList.size();

		ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();

		for (int i = 0; i < voucherGridBodyListCount; i++) {

			String data = voucherGridBodyList.get(i).getText();

			voucherGridBodyListArray.add(data);
		}

		String actvoucherGridBodyList = voucherGridBodyListArray.toString();

		String expvoucherGridBodyList = "[1, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 3, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 4, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 5, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 6, , , , , , , , , ]";
		String expvoucherGridBodyListS = "[1, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 3, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 4, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 5, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 6, , , , , , , , , ]";

		System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
		System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);

		Thread.sleep(2000);

		boolean actVoucherGridBodyList = false;
		boolean expVoucherGridBodyList = true;

		if (actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList)
				|| actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyListS)) {
			actVoucherGridBodyList = true;
		}

		System.err.println(
				"VoucherGridBodyList : " + actVoucherGridBodyList + "  Value Expected  " + expVoucherGridBodyList);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
		workFlowCtrlPlusLCloseBtn.click();*/
		
		Thread.sleep(2000);

		click(voucherEntryPageCloseBtn);
		Thread.sleep(2000);
		getAlert().accept();
		Thread.sleep(2000);
		click(voucherHomePageCloseBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();

		checkUserFriendlyMessage();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
		// thirdRowIndex.click();
		getAction().contextClick(thirdRowIndex).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectRowBtn));
		selectRowBtn.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeLinksOption));
		closeLinksOption.click();

		String expValidationMessage = "Link satus has been updated.";
		String actValidationMessage = checkValidationMessage(expValidationMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		int voucherGridBodyListCount1 = voucherGridBodyList.size();

		ArrayList<String> voucherGridBodyListArray1 = new ArrayList<String>();

		for (int i = 0; i < voucherGridBodyListCount1; i++) {

			String data = voucherGridBodyList.get(i).getText();

			voucherGridBodyListArray1.add(data);
		}

		String actvoucherGridBodyListOnCloseLink = voucherGridBodyListArray1.toString();

		String expvoucherGridBodyListOnCloseLink = "[1, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 3, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 4, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 5, , , , , , , , , ]";
		String expvoucherGridBodyListOnCloseLinkS = "[1, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 3, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 4, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 5, , , , , , , , , ]";

		System.out.println("voucherGridBodyListOnCloseLink Actual    : " + actvoucherGridBodyListOnCloseLink);
		System.out.println("voucherGridBodyListOnCloseLink Expected  : " + expvoucherGridBodyListOnCloseLink);

		Thread.sleep(3000);

		boolean actVoucherGridBodyListOnCloseLink = false;
		boolean expVoucherGridBodyListOnCloseLink = true;

		if (actvoucherGridBodyListOnCloseLink.equalsIgnoreCase(expvoucherGridBodyListOnCloseLink)
				|| actvoucherGridBodyListOnCloseLink.equalsIgnoreCase(expvoucherGridBodyListOnCloseLinkS)) {
			actVoucherGridBodyListOnCloseLink = true;
		}

		System.err.println("VoucherGridBodyListOnCloseLink : " + actVoucherGridBodyListOnCloseLink
				+ "  Value Expected  " + expVoucherGridBodyListOnCloseLink);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
		workFlowCtrlPlusLCloseBtn.click();*/

		click(voucherEntryPageCloseBtn);
		Thread.sleep(1000);
		getAlert().accept();
		Thread.sleep(2000);
		click(voucherHomePageCloseBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();

		checkUserFriendlyMessage();

		Thread.sleep(4000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
		// thirdRowIndex.click();
		getAction().contextClick(thirdRowIndex).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectRowBtn));
		selectRowBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(partialLinksOption));
		partialLinksOption.click();

		String expValidationMessageOnPartial = "Link satus has been updated.";
		String actValidationMessageOnPartial = checkValidationMessage(expValidationMessageOnPartial);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		int voucherGridBodyListCount2 = voucherGridBodyList.size();

		ArrayList<String> voucherGridBodyListArray2 = new ArrayList<String>();

		for (int i = 0; i < voucherGridBodyListCount2; i++) {

			String data = voucherGridBodyList.get(i).getText();

			voucherGridBodyListArray2.add(data);
		}

		String actvoucherGridBodyListOnPartialLink = voucherGridBodyListArray1.toString();

		String expvoucherGridBodyListOnPartialLink = "[1, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 3, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 4, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 5, , , , , , , , , ]";
		String expvoucherGridBodyListOnPartialLinkS = "[1, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 3, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 4, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 5, , , , , , , , , ]";

		boolean actVoucherGridBodyListOnPartialLink = false;
		boolean expVoucherGridBodyListOnPartialLink = true;

		if (actvoucherGridBodyListOnPartialLink.equalsIgnoreCase(expvoucherGridBodyListOnPartialLink)
				|| actvoucherGridBodyListOnPartialLink.equalsIgnoreCase(expvoucherGridBodyListOnPartialLinkS)) {
			actVoucherGridBodyListOnPartialLink = true;
		}

		System.err.println("VoucherGridBodyListOnPartialLink : " + actVoucherGridBodyListOnPartialLink
				+ "  Value Expected  " + expVoucherGridBodyListOnPartialLink);

		System.out.println(
				"************************************* checkCloseLinkOptionOnPartialRowSelectionInPurchaseOrderHavingTwoLinkDocuments  *********************************");

		System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
		System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);

		System.out.println("voucherGridBodyListOnCloseLink Actual    : " + actvoucherGridBodyListOnCloseLink);
		System.out.println("voucherGridBodyListOnCloseLink Expected  : " + expvoucherGridBodyListOnCloseLink);

		System.out.println("voucherGridBodyListOnPartialLink Actual    : " + actvoucherGridBodyListOnPartialLink);
		System.out.println("voucherGridBodyListOnPartialLink Expected  : " + expvoucherGridBodyListOnPartialLink);

		System.out.println("ValidationMessage                 :  " + actValidationMessage + " Value Expected : "
				+ expValidationMessage);
		System.out.println("ValidationMessageOnPartial        :  " + actValidationMessageOnPartial
				+ " Value Expected : " + expValidationMessageOnPartial);

		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(homeMenu)); homeMenu.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(dataMangementMenu)); dataMangementMenu.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(restore)); restore.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(folderpathExpandBtn));
		 * folderpathExpandBtn.click();
		 * 
		 * Thread.sleep(3000);
		 * 
		 * Runtime.getRuntime().exec(getBaseDir()+
		 * "\\autoIt\\scripts\\optionsCompanyRestore.exe");
		 * 
		 * Thread.sleep(3000);
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(restoreCompanyBtn)); restoreCompanyBtn.click();
		 * 
		 * try { getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(overRideYesBtn)); overRideYesBtn.click();
		 * Thread.sleep(20000); } catch(Exception e) {
		 * System.err.println("NO OLDER COMPANY EXISTS"); }
		 * 
		 * if(getIsAlertPresent()) { getWaitForAlert();
		 * 
		 * getAlert().accept(); }
		 */

		// checkEraseAllTransactionsLogoutAndLogin();

		checkEraseAllTransactions();

		if (actVoucherGridBodyList == expVoucherGridBodyList
				&& actValidationMessage.equalsIgnoreCase(expValidationMessage)
				&& actVoucherGridBodyListOnCloseLink == expVoucherGridBodyListOnCloseLink
				&& actValidationMessageOnPartial.equalsIgnoreCase(expValidationMessageOnPartial)
				&& actVoucherGridBodyListOnPartialLink == expVoucherGridBodyListOnPartialLink) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean checkDeletingPurchaseFlowAndSavingNewFlowWithOneBaseAndOneLinkDocument()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		
		Thread.sleep(1500);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		Thread.sleep(3000);

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		//designWorkflowbtn.click();
		
		ClickUsingJs(designWorkflowbtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		Thread.sleep(2000);

		if (getIsAlertPresent()) {
			getWaitForAlert();

			getAlert().accept();
		}

		checkUserFriendlyMessage();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersDragAndDrop));
		purchasesOrdersDragAndDrop.click();
		Thread.sleep(2000);

		// getAction().dragAndDropBy(purchasesOrdersDragAndDrop, 350,
		// -250).build().perform();
		getAction().dragAndDropBy(purchasesOrdersDragAndDrop, 350, -100).build().perform();

		click(purchasesVouchersExpandBtn);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNDragAndDrop));
		purchaseVoucherNDragAndDrop.click();

		getAction().dragAndDropBy(purchaseVoucherNDragAndDrop, 650, 0).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(FirstDraggedElement));

		boolean actFirstDraggedElement = FirstDraggedElement.isDisplayed();
		boolean actdraggedPurchasesVouchersN = draggedPurchasesVouchersN1.isDisplayed();

		System.err.println(actFirstDraggedElement);
		System.err.println(actdraggedPurchasesVouchersN);

		boolean expFirstDraggedElement = true;
		boolean expdraggedPurchasesVouchersN = true;

		getAction().contextClick(FirstDraggedElement).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(draggedlinkBtn));

		boolean actdraggedlinkBtn = draggedlinkBtn.isDisplayed();
		boolean actdraggeddeleteBtn = draggeddeleteBtn.isDisplayed();

		System.err.println(actdraggedlinkBtn);
		System.err.println(actdraggeddeleteBtn);

		boolean expdraggedlinkBtn = true;
		boolean expdraggeddeleteBtn = true;

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(draggedlinkBtn));
		// draggedlinkBtn.click();
		moveToElement(draggedlinkBtn);
		System.err.println("hello");

		Thread.sleep(2000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(linkNode1Left));
		// linkNode1Left.click();
		moveToElement(linkNode6Left);

		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line5 > path').setAttribute('stroke-width', '12')");

		boolean actlink0TO1 = link5TO6.isDisplayed();
		boolean explink0TO1 = true;

		Thread.sleep(2000);
		System.err.println(actlink0TO1);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(linkNode1Left));
		// linkNode1Left.click();

		Thread.sleep(2000);
		moveToElement(link5TO6);

		// Thread.sleep(2000);
		// moveToElement(link0TO1);
		// ScrollIntoView(link0TO1);
		// Thread.sleep(2000);
		// click(link0TO1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DefinitionTab));
		DefinitionTab.click();

		Thread.sleep(2000);

		Select s = new Select(DefinitionLinkValueDropdown);

		s.selectByVisibleText("Quantity");

		int definitionTabChkBoxNameListCount = definitionTabChkBoxNameList.size();

		for (int i = 1; i < definitionTabChkBoxNameListCount; i++) {
			String data = definitionTabChkBoxNameList.get(i).getText();

			if (data.equalsIgnoreCase("ITEM")) {
				definitionTabChkBoxList.get(i).click();
			}
		}

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		// OkBtn.click();
		ClickUsingJs(OkBtn);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(FirstDraggedElement));

		boolean actFirstDraggedElementAfter = FirstDraggedElement.isDisplayed();
		boolean actdraggedPurchasesVouchersNAfter = draggedPurchasesVouchersN1.isDisplayed();
		boolean actlink0TO1After = link5TO6.isDisplayed();

		boolean expFirstDraggedElementAfter = true;
		boolean expdraggedPurchasesVouchersNAfter = true;
		boolean explink0TO1After = true;

		boolean actDisplay = actFirstDraggedElement == expFirstDraggedElement
				&& actdraggedPurchasesVouchersN == expdraggedPurchasesVouchersN
				&& actdraggedlinkBtn == expdraggedlinkBtn && actdraggeddeleteBtn == expdraggeddeleteBtn
				&& actlink0TO1 == explink0TO1 && actFirstDraggedElementAfter == expFirstDraggedElementAfter
				&& actdraggedPurchasesVouchersNAfter == expdraggedPurchasesVouchersNAfter
				&& actlink0TO1After == explink0TO1After;

		String actMethod = Boolean.toString(actDisplay);

		String expMethod = "true";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "Workflow saved successfully";

		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();

		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */
		//reLogin("su", "su");
		checkLogoutAndLogin();

		Thread.sleep(5000);

		System.out.println(
				"**********************************************checkSelectBaseAndLinkVouchersToDrag*********************************");

		System.out.println("FirstDraggedElement          : " + actFirstDraggedElement + " Value Expected : "
				+ expFirstDraggedElement);
		System.out.println("draggedPurchasesVouchersN     : " + actdraggedPurchasesVouchersN + " Value Expected : "
				+ expdraggedPurchasesVouchersN);
		System.out.println(
				"DraggedlinkBtn               : " + actdraggedlinkBtn + " Value Expected : " + expdraggedlinkBtn);
		System.out.println(
				"DraggeddeleteBtn             : " + actdraggeddeleteBtn + " Value Expected : " + expdraggeddeleteBtn);
		System.out.println("Link0TO1                     : " + actlink0TO1 + " Value Excepted : " + explink0TO1);
		System.out.println("FirstDraggedElementAfter     :" + actFirstDraggedElementAfter + " Value Expected : "
				+ expFirstDraggedElementAfter);
		System.out.println("draggedPurchasesVouchersNAfter :" + actdraggedPurchasesVouchersNAfter + " Value Expected : "
				+ expdraggedPurchasesVouchersNAfter);
		System.out
				.println("Link0TO1After                :" + actlink0TO1After + " Value Expected : " + explink0TO1After);

		if (actMessage.equalsIgnoreCase(
				expMessage) /* && actMethod.equalsIgnoreCase(expMethod) */) {
			System.out.println("Test Pass : Error Message is as Expected");

			return true;
		} else {
			System.out.println("Test Fail : Error Message is NOT as Expected");

			return false;
		}
	}

	public boolean checkCloseLinkAndPartialOptionInPurchaseOrderHavingOneLinkDocument()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		// pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(1900);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);
		
		click(voucherEntryPageCloseBtn);
		Thread.sleep(1000);

		click(voucherHomePageCloseBtn);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen = LinkRowCount;

		int actLinkRowCountValue = rowCountInLinkScreen.size();
		int expLinkRowCountValue = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
		workFlowCtrlPlusLCloseBtn.click();
		
		/*click(voucherEntryPageCloseBtn);
		Thread.sleep(1500);
		click(voucherHomePageCloseBtn);*/

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		Thread.sleep(1500);

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstRowIndex));
		getAction().contextClick(firstRowIndex).build().perform();
		// firstRowIndex.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectRowBtn));
		selectRowBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeLinksOption));
		closeLinksOption.click();

		String expValidationMessage = "Link satus has been updated.";
		String actValidationMessage = checkValidationMessage(expValidationMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");
		Thread.sleep(3000);
		/*
		 * boolean actpurchaseVoucherWorlFlowText =
		 * purchaseVoucherWorlFlowText.isDisplayed(); boolean
		 * exppurchaseVoucherWorlFlowText = true;
		 */

		boolean actpurchaseVoucherWorlFlowText;
		boolean exppurchaseVoucherWorlFlowText = true;

		try {
			if (workFlowPopupCtrlPlusL.isDisplayed() == true) {
				actpurchaseVoucherWorlFlowText = false;
				System.err.println(workFlowTableBody.getText());
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
				workFlowCtrlPlusLCloseBtn.click();
				
				click(voucherEntryPageCloseBtn);
				Thread.sleep(1500);
				click(voucherHomePageCloseBtn);
			} else {
				actpurchaseVoucherWorlFlowText = true;
			}
		} catch (Exception e) {
			System.err.println(e.getMessage());
			actpurchaseVoucherWorlFlowText = true;
		}
		
		click(voucherEntryPageCloseBtn);
		
		Thread.sleep(1500);
		click(voucherHomePageCloseBtn);

		Thread.sleep(3000);

		// getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
		// workFlowCtrlPlusLCloseBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		Thread.sleep(1500);

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstRowIndex));
		/// firstRowIndex.click();
		getAction().contextClick(firstRowIndex).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectRowBtn));
		selectRowBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openLinksOption));
		openLinksOption.click();

		String expValidationMessageonOpen = "Link satus has been updated.";
		String actValidationMessageonOpen = checkValidationMessage(expValidationMessageonOpen);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		List<WebElement> rowCountInLinkScreen1 = LinkRowCount;

		int actLinkRowCountValue1 = rowCountInLinkScreen1.size();
		int expLinkRowCountValue1 = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCtrlPlusLCloseBtn));
		workFlowCtrlPlusLCloseBtn.click();
		
		/*click(voucherEntryPageCloseBtn);
		Thread.sleep(1000);
		getAlert().accept();
		Thread.sleep(1500);
		click(voucherHomePageCloseBtn);*/

		System.out.println(
				"************************************* checkCloseLinkAndOpenOptionInPurchaseOrderHavingOneLinkDocument  *********************************");
		System.out
				.println("ValidationMessage  :  " + actValidationMessage + " Value Expected : " + expValidationMessage);
		System.out.println("ValidationMessageonOpen  :  " + actValidationMessageonOpen + " Value Expected : "
				+ expValidationMessageonOpen);
		System.out
				.println("LinkRowCountValue  :  " + actLinkRowCountValue + " Value Expected : " + expLinkRowCountValue);
		System.out.println(
				"LinkRowCountValue1  :  " + actLinkRowCountValue1 + " Value Expected : " + expLinkRowCountValue1);

		checkEraseAllTransactionsAfterIntialCheck();

		if (actLinkRowCountValue == expLinkRowCountValue && actLinkRowCountValue1 == expLinkRowCountValue1
				&& actValidationMessage.equalsIgnoreCase(expValidationMessage)
				&& actValidationMessageonOpen.equalsIgnoreCase(expValidationMessageonOpen)) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean checkCloseLinkOptionOnPartialRowSelectionInPurchaseOrderHavingOneLinkDocument()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="su";
		 * 
		 * String pawslt="su";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */

		reLogin1("su", "su");

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		for (int a = 1; a <= 5; a++) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			// pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys(Keys.END);
			pvWareHouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
			pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
			pvWareHouseTxt.sendKeys("HYDERABAD");
			Thread.sleep(2000);
			pvWareHouseTxt.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(2000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			Thread.sleep(1500);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			enter_Quantity.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.click();
			enter_Discount.sendKeys(Keys.TAB);
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		int voucherGridBodyListCount = voucherGridBodyList.size();

		ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();

		for (int i = 0; i < voucherGridBodyListCount; i++) {

			String data = voucherGridBodyList.get(i).getText();

			voucherGridBodyListArray.add(data);
		}

		String actvoucherGridBodyList = voucherGridBodyListArray.toString();

		String expvoucherGridBodyList = "[1, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 3, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 4, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 5, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 6, , , , , , , , , ]";
		String expvoucherGridBodyListS = "[1, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 3, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 4, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 5, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 6, , , , , , , , , ]";

		System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
		System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);

		Thread.sleep(3000);

		boolean actVoucherGridBodyList = false;
		boolean expVoucherGridBodyList = true;

		if (actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList)
				|| actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyListS)) {
			actVoucherGridBodyList = true;
		}

		System.err.println(
				"VoucherGridBodyList : " + actVoucherGridBodyList + "  Value Expected  " + expVoucherGridBodyList);
		
		
		click(voucherEntryPageCloseBtn);
		Thread.sleep(1000);
		getAlert().accept();
		Thread.sleep(1500);
		click(voucherHomePageCloseBtn);

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		Thread.sleep(1500);

		checkUserFriendlyMessage();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
		getAction().contextClick(thirdRowIndex).build().perform();
		// thirdRowIndex.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectRowBtn));
		selectRowBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeLinksOption));
		closeLinksOption.click();

		String expValidationMessage = "Link satus has been updated.";
		String actValidationMessage = checkValidationMessage(expValidationMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		int voucherGridBodyListCount1 = voucherGridBodyList.size();

		ArrayList<String> voucherGridBodyListArray1 = new ArrayList<String>();

		for (int i = 0; i < voucherGridBodyListCount1; i++) {
			String data = voucherGridBodyList.get(i).getText();
			voucherGridBodyListArray1.add(data);
		}

		String actvoucherGridBodyListOnCloseLink = voucherGridBodyListArray1.toString();

		String expvoucherGridBodyListOnCloseLink = "[1, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 3, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 4, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 5, , , , , , , , , ]";
		String expvoucherGridBodyListOnCloseLinkS = "[1, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 3, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 4, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 5, , , , , , , , , ]";

		System.out.println("voucherGridBodyListOnCloseLink Actual    : " + actvoucherGridBodyListOnCloseLink);
		System.out.println("voucherGridBodyListOnCloseLink Expected  : " + expvoucherGridBodyListOnCloseLink);

		boolean actVoucherGridBodyListOnCloseLink = false;
		boolean expVoucherGridBodyListOnCloseLink = true;

		if (actvoucherGridBodyListOnCloseLink.equalsIgnoreCase(expvoucherGridBodyListOnCloseLink)
				|| actvoucherGridBodyListOnCloseLink.equalsIgnoreCase(expvoucherGridBodyListOnCloseLinkS)) {
			actVoucherGridBodyListOnCloseLink = true;
		}

		click(voucherEntryPageCloseBtn);
		Thread.sleep(1000);
		getAlert().accept();
		Thread.sleep(1500);
		click(voucherHomePageCloseBtn);
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		Thread.sleep(1500);

		checkUserFriendlyMessage();
		
		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
		// thirdRowIndex.click();
		getAction().contextClick(thirdRowIndex).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectRowBtn));
		selectRowBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(partialLinksOption));
		partialLinksOption.click();

		Thread.sleep(3000);

		String expValidationMessageOnPartial = "Link satus has been updated.";
		String actValidationMessageOnPartial = checkValidationMessage(expValidationMessageOnPartial);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.CONTROL + "l");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		int voucherGridBodyListCount2 = voucherGridBodyList.size();

		ArrayList<String> voucherGridBodyListArray2 = new ArrayList<String>();

		for (int i = 0; i < voucherGridBodyListCount2; i++) {

			String data = voucherGridBodyList.get(i).getText();

			voucherGridBodyListArray2.add(data);
		}

		String actvoucherGridBodyListOnPartialLink = voucherGridBodyListArray1.toString();

		String expvoucherGridBodyListOnPartialLink = "[1, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 3, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 4, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 5, , , , , , , , , ]";
		String expvoucherGridBodyListOnPartialLinkS = "[1, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 2, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 3, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 4, STD RATE COGS ITEM, Dozs, 0, 0.00, 1.00, PurOrd:1, 10.00, 10.00, 0.00, 5, , , , , , , , , ]";

		boolean actVoucherGridBodyListOnPartialLink = false;
		boolean expVoucherGridBodyListOnPartialLink = true;

		if (actvoucherGridBodyListOnPartialLink.equalsIgnoreCase(expvoucherGridBodyListOnPartialLink)
				|| actvoucherGridBodyListOnPartialLink.equalsIgnoreCase(expvoucherGridBodyListOnPartialLinkS)) {
			actVoucherGridBodyListOnPartialLink = true;
		}

		System.err.println("VoucherGridBodyListOnPartialLink : " + actVoucherGridBodyListOnPartialLink
				+ "  Value Expected  " + expVoucherGridBodyListOnPartialLink);

		System.out.println(
				"************************************* checkCloseLinkOptionOnPartialRowSelectionInPurchaseOrderHavingOneLinkDocument  *********************************");

		System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
		System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);

		System.out.println("voucherGridBodyListOnCloseLink Actual    : " + actvoucherGridBodyListOnCloseLink);
		System.out.println("voucherGridBodyListOnCloseLink Expected  : " + expvoucherGridBodyListOnCloseLink);

		System.out.println("voucherGridBodyListOnPartialLink Actual    : " + actvoucherGridBodyListOnPartialLink);
		System.out.println("voucherGridBodyListOnPartialLink Expected  : " + expvoucherGridBodyListOnPartialLink);

		System.out.println("ValidationMessage                 :  " + actValidationMessage + " Value Expected : "
				+ expValidationMessage);
		System.out.println("ValidationMessageOnPartial        :  " + actValidationMessageOnPartial
				+ " Value Expected : " + expValidationMessageOnPartial);

		checkEraseAllTransactionsAfterIntialCheck();

		if (actVoucherGridBodyList == expVoucherGridBodyList
				&& actVoucherGridBodyListOnCloseLink == expVoucherGridBodyListOnCloseLink
				&& actVoucherGridBodyListOnPartialLink == expVoucherGridBodyListOnPartialLink) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean checkSavingPurchaseOrderAndPurchaseVoucherNPartialConsumeCloseLink()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		String expMessage1 = "Voucher saved successfully";
		String expMessage2 = "1";

		String actMessage = checkValidationMessage(expMessage1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
		warehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(2000);
		warehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("0.5");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		int linkVoucherNameListCount = linkVoucherNameList.size();

		for (int i = 0; i < linkVoucherNameListCount; i++) {
			String data = linkVoucherNameList.get(i).getText();

			if (data.equalsIgnoreCase("PurOrd:1")) {
				linkChkBoxList.get(i).click();

				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno1 = documentNumberTxt.getAttribute("value");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		boolean savingMessage1 = checkVoucherSavingMessage(docno1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstRowIndex));
		getAction().contextClick(firstRowIndex).build().perform();
		// firstRowIndex.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectRowBtn));
		selectRowBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeLinksOption));
		closeLinksOption.click();

		String expValidationMessage = "Link satus has been updated.";
		String actValidationMessage = checkValidationMessage(expValidationMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("0.5");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(3000);

		boolean actLPurchaseOrderCloumn = select2ndRow_6thColumn.getText().isEmpty();
		boolean expLPurchaseOrderCloumn = true;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		if (getIsAlertPresent()) {
			getWaitForAlert();

			getAlert().accept();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
		voucherhomeCloseBtn.click();

		System.out.println(
				"************************************* checkSavingPurchaseOrderAndPurchaseVoucherNPartialConsumeCloseLink  *********************************");
		System.out
				.println("ValidationMessage  :  " + actValidationMessage + " Value Expected : " + expValidationMessage);
		System.out.println(
				"LPurchaseOrderCloumn  :  " + actLPurchaseOrderCloumn + " Value Expected : " + expLPurchaseOrderCloumn);

		if (actValidationMessage.equalsIgnoreCase(expValidationMessage)
				&& actLPurchaseOrderCloumn == expLPurchaseOrderCloumn) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean checkSavingPurchaseOrderAndPurchaseVoucherNRowWisePartialConsumeCloseLink()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		for (int a = 0; a <= 1; a++) {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			// pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys(Keys.END);
			pvWareHouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);	
			pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
			pvWareHouseTxt.sendKeys("HYDERABAD");
			Thread.sleep(2000);
			pvWareHouseTxt.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(2000);
			enter_ItemTxt.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			enter_Quantity.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.click();
			enter_Discount.sendKeys(Keys.TAB);
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.sendKeys("Purchase");
		Thread.sleep(2000);
		purchaseAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
		warehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(2000);
		warehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		int actlinkVoucherNameListCount = linkVoucherNameList.size();
		int explinkVoucherNameListCount = 2;

		for (int i = 0; i < actlinkVoucherNameListCount; i++) {
			String data = linkVoucherNameList.get(i).getText();

			if (data.equalsIgnoreCase("PurOrd:2")) {
				linkChkBoxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();
		
		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno1 = documentNumberTxt.getAttribute("value");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		Thread.sleep(2000);
		click(billRefNewReferenceTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		boolean savingMessage1 = checkVoucherSavingMessage(docno1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		Thread.sleep(3000);

		int voucherGridDocNoCount = voucherGridDocNo.size();

		for (int i = 0; i < voucherGridDocNoCount; i++) {
			String data = voucherGridDocNo.get(i).getText();

			if (data.equalsIgnoreCase("2")) {
				voucherGridIndexChkBox.get(i).click();

				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editBtn));
		editBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		getAction().contextClick(secondRowIndex).build().perform();
		// secondRowIndex.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectRowBtn));
		selectRowBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(partialLinksOption));
		partialLinksOption.click();

		String expValidationMessage = "Link satus has been updated.";
		String actValidationMessage = checkValidationMessage(expValidationMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("0.5");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(3000);

		boolean actLPurchaseOrderCloumn = select2ndRow_6thColumn.getText().isEmpty();
		boolean expLPurchaseOrderCloumn = true;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		if (getIsAlertPresent()) {
			getWaitForAlert();
			getAlert().accept();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
		voucherhomeCloseBtn.click();

		System.out.println(
				"************************************* checkSavingPurchaseOrderAndPurchaseVoucherNRowWisePartialConsumeCloseLink  *********************************");
		System.out
				.println("ValidationMessage  :  " + actValidationMessage + " Value Expected : " + expValidationMessage);
		System.out.println(
				"LPurchaseOrderCloumn  :  " + actLPurchaseOrderCloumn + " Value Expected : " + expLPurchaseOrderCloumn);
		System.out.println("linkVoucherNameListCount : " + actlinkVoucherNameListCount + " Value Expected : "
				+ explinkVoucherNameListCount);

		if (actValidationMessage.equalsIgnoreCase(expValidationMessage)
				&& actLPurchaseOrderCloumn == expLPurchaseOrderCloumn
				&& actlinkVoucherNameListCount == explinkVoucherNameListCount) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean checkSavingPurchaseOrderVoucherForCloseLinkAndEditingLinkOptionAndSlabChangeVoucherSave()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkUserFriendlyMessage();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		// pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage = checkVoucherSavingMessage(docno);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstRowIndex));
		getAction().contextClick(firstRowIndex).build().perform();
		// firstRowIndex.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectRowBtn));
		selectRowBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeLinksOption));
		closeLinksOption.click();

		Thread.sleep(1000);

		String expValidationMessage = "Link satus has been updated.";
		String actValidationMessage = checkValidationMessage(expValidationMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno1 = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage1 = checkVoucherSavingMessage(docno1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkUserFriendlyMessage();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstRowIndex));
		getAction().contextClick(firstRowIndex).build().perform();
		// firstRowIndex.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectRowBtn));
		selectRowBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeLinksOption));
		closeLinksOption.click();

		String expValidationMessageClose = "Link satus has been updated.";
		String actValidationMessageClose = checkValidationMessage(expValidationMessageClose);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openLinksOption));
		openLinksOption.click();

		String expValidationMessageOpen = "Link satus has been updated.";
		String actValidationMessageOpen = checkValidationMessage(expValidationMessageOpen);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		Calendar calendar = Calendar.getInstance();

		calendar.add(Calendar.DATE, -31);

		Date yesterday = calendar.getTime();

		DateFormat dfr = new SimpleDateFormat("dd/MM/yyyy");

		System.out.println(dfr.format(yesterday).toString());

		dateTxt.sendKeys(Keys.LEFT);
		Thread.sleep(2000);
		dateTxt.sendKeys(Keys.HOME);
		Thread.sleep(2000);
		dateTxt.sendKeys(dfr.format(yesterday).toString());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno2 = documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();

		boolean savingMessage2 = checkVoucherSavingMessage(docno2);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
		voucherhomeCloseBtn.click();

		System.out.println(
				"************************************* checkSavingPurchaseOrderVoucherForCloseLinkAndEditingLinkOptionAndSlabChangeVoucherSave  *********************************");
		System.out
				.println("ValidationMessage  :  " + actValidationMessage + " Value Expected : " + expValidationMessage);
		System.out.println("savingMessage   :  " + savingMessage + " Value Expected : " + "true");
		System.out.println("savingMessage1  :  " + savingMessage1 + " Value Expected : " + "true");
		System.out.println("savingMessage2  :  " + savingMessage2 + " Value Expected : " + "true");
		System.out.println("ValidationMessageClose : " + actValidationMessageClose + " Value Expected : "
				+ expValidationMessageClose);
		System.out.println("ValidationMessageOpen : " + actValidationMessageOpen + " Value Expected : "
				+ expValidationMessageOpen);

		if (actValidationMessage.equalsIgnoreCase(expValidationMessage)
				&& actValidationMessageClose.equalsIgnoreCase(expValidationMessageClose)
				&& actValidationMessageOpen.equalsIgnoreCase(expValidationMessageOpen) && savingMessage == true
				&& savingMessage1 == true && savingMessage2 == true) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean checkAuthorizingPurchaseVoucher()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException {
		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * LoginPage lp=new LoginPage(getDriver());
		 * 
		 * String unamelt="UserAllOptions";
		 * 
		 * String pawslt="12345";
		 * 
		 * lp.enterUserName(unamelt);
		 * 
		 * lp.enterPassword(pawslt);
		 * 
		 * lp.clickOnSignInBtn();
		 */

		reLogin1("UserAllOptions", "12345");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		int voucherGridDocNoCount = voucherGridDocNo.size();

		for (int i = 0; i < voucherGridDocNoCount; i++) {
			String data = voucherGridDocNo.get(i).getText();

			if (data.equalsIgnoreCase("1")) {
				voucherGridIndexChkBox.get(i).click();

				break;
			}
		}

		getWebDriverWait().until(ExpectedConditions.visibilityOf(editBtn));
		editBtn.click();

		checkUserFriendlyMessage();

		getWebDriverWait().until(ExpectedConditions.visibilityOf(new_authorizeBtn));
		new_authorizeBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(remarksOfAuthorizeRemarks));
		remarksOfAuthorizeRemarks.click();
		remarksOfAuthorizeRemarks.sendKeys("Test Smoke");

		// getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(remarksOfAuthorizeRemarksOkButton));
		// remarksOfAuthorizeRemarksOkButton.click();
		ClickUsingJs(remarksOfAuthorizeRemarksOkButton);

		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.visibilityOf(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String acthomePageAuthStatusAuthorizeRowOne = homePageAuthStatusAuthorizeRowOne.getText();
		String exphomePageAuthStatusAuthorizeRowOne = "Authorized";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
		voucherhomeCloseBtn.click();

		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(userNameDisplay)); userNameDisplayLogo.click();
		 * 
		 * getFluentWebDriverWait().until(ExpectedConditions.
		 * elementToBeClickable(logoutOption)); logoutOption.click();
		 * 
		 * 
		 * String unamelt1="su";
		 * 
		 * String pawslt1="su";
		 * 
		 * lp.enterUserName(unamelt1);
		 * 
		 * lp.enterPassword(pawslt1);
		 * 
		 * lp.clickOnSignInBtn();
		 */

		reLogin1("su", "su");

		Thread.sleep(3000);

		System.out.println(
				"************************************* checkAuthorizingPurchaseVoucher  *********************************");
		System.out.println("homePageAuthStatusAuthorizeRowOne  :  " + acthomePageAuthStatusAuthorizeRowOne
				+ " Value Expected : " + exphomePageAuthStatusAuthorizeRowOne);

		if (acthomePageAuthStatusAuthorizeRowOne.equalsIgnoreCase(exphomePageAuthStatusAuthorizeRowOne)) {
			System.out.println("Voucher Saved");

			return true;
		} else {
			System.out.println("Voucher Not Saved");

			return false;
		}
	}

	public boolean checkListingOfDocumentsReport()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(orderManagementMenu));
		orderManagementMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(analysisOfLinkedORUnlinkedDocumentsMenu));
		analysisOfLinkedORUnlinkedDocumentsMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(listingOfDocuments));
		listingOfDocuments.click();

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s = new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		// s.selectByVisibleText(" As on date ");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(listingOfDocWorkFlowTxt));
		listingOfDocWorkFlowTxt.click();
		listingOfDocWorkFlowTxt.sendKeys("Purchases Orders vs Purchase Vouchers N");
		Thread.sleep(2000);
		listingOfDocWorkFlowTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);

		int reportRow1Count = reportRow1.size();

		ArrayList<String> reportRow1Array = new ArrayList<String>();

		for (int i = 2; i < reportRow1Count; i++) {
			String data = reportRow1.get(i).getText();

			reportRow1Array.add(data);
		}

		String actreportRow1 = reportRow1Array.toString();
		String expreportRow1 = "[PurOrd:1, STD RATE COGS ITEM, 12.00, , Manually Closed]";
		//String expreportRow1 = "[PurOrd:1, STD RATE COGS ITEM, 12.00, 6.00, Manual Closed]";

		int reportRow2Count = reportRow2.size();

		ArrayList<String> reportRow2Array = new ArrayList<String>();

		for (int i = 2; i < reportRow2Count; i++) {
			String data = reportRow2.get(i).getText();

			reportRow2Array.add(data);
		}

		String actreportRow2 = reportRow2Array.toString();
		String expreportRow2 = "[NDT45:1, STD RATE COGS ITEM, 6.00, , Manually Closed]";
		//String expreportRow2 = "[NDT45:1, STD RATE COGS ITEM, 6.00, , ]";

		int reportRow3Count = reportRow3.size();

		ArrayList<String> reportRow3Array = new ArrayList<String>();

		for (int i = 2; i < reportRow3Count; i++) {
			String data = reportRow3.get(i).getText();

			reportRow3Array.add(data);
		}

		String actreportRow3 = reportRow3Array.toString();
		String expreportRow3 = "[PurOrd:2, STD RATE COGS ITEM, 12.00, , Closed]";
		//String expreportRow3 = "[PurOrd:2, STD RATE COGS ITEM, 12.00, , Closed]";

		int reportRow4Count = reportRow4.size();

		ArrayList<String> reportRow4Array = new ArrayList<String>();

		for (int i = 2; i < reportRow4Count; i++) {
			String data = reportRow4.get(i).getText();

			reportRow4Array.add(data);
		}

		String actreportRow4 = reportRow4Array.toString();
		String expreportRow4 = "[PurOrd:2, STD RATE COGS ITEM, 12.00, , Manually Closed]";
		//String expreportRow4 = "[PurOrd:2, STD RATE COGS ITEM, 12.00, 12.00, Manual Closed]";

		int reportRow5Count = reportRow5.size();

		ArrayList<String> reportRow5Array = new ArrayList<String>();

		for (int i = 2; i < reportRow5Count; i++) {
			String data = reportRow5.get(i).getText();

			reportRow5Array.add(data);
		}

		String actreportRow5 = reportRow5Array.toString();
		String expreportRow5 = "[PurOrd:3, STD RATE COGS ITEM, 12.00, , Manually Closed]";
		//String expreportRow5 = "[PurOrd:3, STD RATE COGS ITEM, 12.00, 12.00, Manual Closed]";

		int reportRow6Count = reportRow6.size();

		ArrayList<String> reportRow6Array = new ArrayList<String>();

		for (int i = 2; i < reportRow6Count; i++) {
			String data = reportRow6.get(i).getText();

			reportRow6Array.add(data);
		}

		String actreportRow6 = reportRow6Array.toString();
		String expreportRow6 = "[PurOrd:4, STD RATE COGS ITEM, 12.00, 12.00, Pending]";
		//String expreportRow6 = "[PurOrd:4, STD RATE COGS ITEM, 12.00, 12.00, Partial Consumed]";

		int reportRow7Count = reportRow7.size();

		ArrayList<String> reportRow7Array = new ArrayList<String>();

		for (int i = 2; i < reportRow7Count; i++) {
			String data = reportRow7.get(i).getText();

			reportRow7Array.add(data);
		}

		String actreportRow7 = reportRow7Array.toString();
		String expreportRow7 = "[PurOrd:5, STD RATE COGS ITEM, 12.00, 12.00, Pending]";

		int reportRow8Count = reportRow8.size();

		ArrayList<String> reportRow8Array = new ArrayList<String>();

		for (int i = 1; i < reportRow8Count; i++) {
			String data = reportRow8.get(i).getText();

			reportRow8Array.add(data);
		}

		String actreportRow8 = reportRow8Array.toString();
		String expreportRow8 = "[Grand Total, , , 78.00, 24.00, ]";
		//String expreportRow8 = "[Grand Total, , , 78.00, 54.00, ]";

		System.out.println(
				"*********************************checkListingOfDocumentsReport*****************************************");

		System.out.println(actreportRow1);
		System.out.println(expreportRow1);
		System.out.println(actreportRow2);
		System.out.println(expreportRow2);
		System.out.println(actreportRow3);
		System.out.println(expreportRow3);
		System.out.println(actreportRow4);
		System.out.println(expreportRow4);
		System.out.println(actreportRow5);
		System.out.println(expreportRow5);
		System.out.println(actreportRow6);
		System.out.println(expreportRow6);
		System.out.println(actreportRow7);
		System.out.println(expreportRow7);
		System.out.println(actreportRow8);
		System.out.println(expreportRow8);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();

		if (actreportRow1.equalsIgnoreCase(expreportRow1) && actreportRow2.equalsIgnoreCase(expreportRow2)
				&& actreportRow3.equalsIgnoreCase(expreportRow3) && actreportRow4.equalsIgnoreCase(expreportRow4)
				&& actreportRow5.equalsIgnoreCase(expreportRow5) && actreportRow6.equalsIgnoreCase(expreportRow6)
				&& actreportRow7.equalsIgnoreCase(expreportRow7) && actreportRow8.equalsIgnoreCase(expreportRow8)) {
			System.out.println("Test Pass : Reports Are As Expected");

			return true;
		} else {
			System.out.println("Test Fail : Reports Are NOT As Expected");
			return false;
		}
	}

	public boolean checkListingOfDocumentsByDueDateReport()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(orderManagementMenu));
		orderManagementMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(analysisOfLinkedORUnlinkedDocumentsMenu));
		analysisOfLinkedORUnlinkedDocumentsMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(listingOfDocumentsByDueDate));
		listingOfDocumentsByDueDate.click();

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s = new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		// s.selectByVisibleText(" As on date ");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(listingOfDocWorkFlowTxt));
		listingOfDocWorkFlowTxt.click();
		listingOfDocWorkFlowTxt.sendKeys("Purchases Orders vs Purchase Vouchers N");
		Thread.sleep(2000);
		listingOfDocWorkFlowTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);

		int reportRow1Count = reportRow1.size();

		ArrayList<String> reportRow1Array = new ArrayList<String>();

		for (int i = 3; i < reportRow1Count; i++) {
			String data = reportRow1.get(i).getText();

			reportRow1Array.add(data);
		}

		String actreportRow1 = reportRow1Array.toString();
		String expreportRow1 = "[PurOrd:5, STD RATE COGS ITEM, 12.00, 12.00, Pending]";
		//String expreportRow1 = "[PurOrd:5, STD RATE COGS ITEM, 12.00, 12.00, Pending]";

		int reportRow2Count = reportRow2.size();

		ArrayList<String> reportRow2Array = new ArrayList<String>();

		for (int i = 3; i < reportRow2Count; i++) {
			String data = reportRow2.get(i).getText();

			reportRow2Array.add(data);
		}

		String actreportRow2 = reportRow2Array.toString();
		String expreportRow2 = "[PurOrd:1, STD RATE COGS ITEM, 12.00, , Manually Closed]";
		//String expreportRow2 = "[PurOrd:3, STD RATE COGS ITEM, 12.00, 12.00, Manual Closed]";

		int reportRow3Count = reportRow3.size();

		ArrayList<String> reportRow3Array = new ArrayList<String>();

		for (int i = 3; i < reportRow3Count; i++) {
			String data = reportRow3.get(i).getText();

			reportRow3Array.add(data);
		}

		String actreportRow3 = reportRow3Array.toString();
		String expreportRow3 = "[NDT45:1, STD RATE COGS ITEM, 6.00, , Manually Closed]";
		//String expreportRow3 = "[PurOrd:4, STD RATE COGS ITEM, 12.00, 12.00, Manual Closed]";

		int reportRow4Count = reportRow4.size();

		ArrayList<String> reportRow4Array = new ArrayList<String>();

		for (int i = 3; i < reportRow4Count; i++) {
			String data = reportRow4.get(i).getText();

			reportRow4Array.add(data);
		}

		String actreportRow4 = reportRow4Array.toString();
		String expreportRow4 = "[PurOrd:2, STD RATE COGS ITEM, 12.00, , Closed]";

		int reportRow5Count = reportRow5.size();

		ArrayList<String> reportRow5Array = new ArrayList<String>();

		for (int i = 3; i < reportRow5Count; i++) {
			String data = reportRow5.get(i).getText();

			reportRow5Array.add(data);
		}

		String actreportRow5 = reportRow5Array.toString();
		String expreportRow5 = "[PurOrd:2, STD RATE COGS ITEM, 12.00, , Manually Closed]";
		//String expreportRow5 = "[PurOrd:2, STD RATE COGS ITEM, 12.00, 12.00, Manual Closed]";

		int reportRow6Count = reportRow6.size();

		ArrayList<String> reportRow6Array = new ArrayList<String>();

		for (int i = 3; i < reportRow6Count; i++) {
			String data = reportRow6.get(i).getText();

			reportRow6Array.add(data);
		}

		String actreportRow6 = reportRow6Array.toString();
		String expreportRow6 = "[PurOrd:3, STD RATE COGS ITEM, 12.00, , Manually Closed]";
		//String expreportRow6 = "[PurOrd:1, STD RATE COGS ITEM, 12.00, 6.00, Manual Closed]";

		int reportRow7Count = reportRow7.size();

		ArrayList<String> reportRow7Array = new ArrayList<String>();

		for (int i = 3; i < reportRow7Count; i++) {
			String data = reportRow7.get(i).getText();

			reportRow7Array.add(data);
		}

		String actreportRow7 = reportRow7Array.toString();
		String expreportRow7 = "[PurOrd:4, STD RATE COGS ITEM, 12.00, 12.00, Pending]";
		//String expreportRow7 = "[NDT45:1, STD RATE COGS ITEM, 6.00, , ]";

		int reportRow8Count = reportRow8.size();

		ArrayList<String> reportRow8Array = new ArrayList<String>();

		for (int i = 1; i < reportRow8Count; i++) {
			String data = reportRow8.get(i).getText();

			reportRow8Array.add(data);
		}

		String actreportRow8 = reportRow8Array.toString();
		String expreportRow8 = "[Grand Total, , , , 78.00, 24.00, ]";
		//String expreportRow8 = "[Grand Total, , , , 78.00, 54.00, ]";

		System.out.println(
				"*********************************checkListingOfDocumentsByDueDateReport*****************************************");

		System.out.println(actreportRow1);
		System.out.println(expreportRow1);
		System.out.println(actreportRow2);
		System.out.println(expreportRow2);
		System.out.println(actreportRow3);
		System.out.println(expreportRow3);
		System.out.println(actreportRow4);
		System.out.println(expreportRow4);
		System.out.println(actreportRow5);
		System.out.println(expreportRow5);
		System.out.println(actreportRow6);
		System.out.println(expreportRow6);
		System.out.println(actreportRow7);
		System.out.println(expreportRow7);
		System.out.println(actreportRow8);
		System.out.println(expreportRow8);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();

		if (actreportRow1.equalsIgnoreCase(expreportRow1) && actreportRow2.equalsIgnoreCase(expreportRow2)
				&& actreportRow3.equalsIgnoreCase(expreportRow3) && actreportRow4.equalsIgnoreCase(expreportRow4)
				&& actreportRow5.equalsIgnoreCase(expreportRow5) && actreportRow6.equalsIgnoreCase(expreportRow6)
				&& actreportRow7.equalsIgnoreCase(expreportRow7) && actreportRow8.equalsIgnoreCase(expreportRow8)) {
			return true;
		} else/* {
			if (actreportRow8.equalsIgnoreCase(expreportRow8)) {
				return true;
			} else */{
				return false;
			}
		}
	//}

	public boolean checkAgeingOfPendingDocumentsReport()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(orderManagementMenu));
		orderManagementMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(analysisOfLinkedORUnlinkedDocumentsMenu));
		analysisOfLinkedORUnlinkedDocumentsMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingOfPendingDocuments));
		ageingOfPendingDocuments.click();

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s = new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		// s.selectByVisibleText(" As on date ");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(listingOfDocWorkFlowTxt));
		listingOfDocWorkFlowTxt.click();
		listingOfDocWorkFlowTxt.sendKeys("Purchases Orders vs Purchase Vouchers N");
		Thread.sleep(2000);
		listingOfDocWorkFlowTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);

		int reportRow1Count = reportRow1.size();

		ArrayList<String> reportRow1Array = new ArrayList<String>();

		for (int i = 2; i < reportRow1Count; i++) {
			String data = reportRow1.get(i).getText();

			reportRow1Array.add(data);
		}

		String actreportRow1 = reportRow1Array.toString();
		String expreportRow1 = "[PurOrd:5, STD RATE COGS ITEM, 12.00, 12.00, , 12.00, , , , , , ]";

		int reportRow2Count = reportRow2.size();

		ArrayList<String> reportRow2Array = new ArrayList<String>();

		for (int i = 2; i < reportRow2Count; i++) {
			String data = reportRow2.get(i).getText();

			reportRow2Array.add(data);
		}

		String actreportRow2 = reportRow2Array.toString();
		String expreportRow2 = "[PurOrd:4, STD RATE COGS ITEM, 12.00, 12.00, 12.00, , , , , , , ]";

		int reportRow3Count = reportRow3.size();

		ArrayList<String> reportRow3Array = new ArrayList<String>();

		for (int i = 1; i < reportRow3Count; i++) {
			String data = reportRow3.get(i).getText();

			reportRow3Array.add(data);
		}

		String actreportRow3 = reportRow3Array.toString();
		String expreportRow3 = "[Grand Total, , , 24.00, 24.00, 12.00, 12.00, , , , , , ]";

		System.out.println(
				"*********************************checkAgeingOfPendingDocumentsReport*****************************************");

		System.out.println("reportRow1 : " + actreportRow1 + " Value Expected : " + expreportRow1);
		System.out.println("reportRow2 : " + actreportRow2 + " Value Expected : " + expreportRow2);
		System.out.println("reportRow3 : " + actreportRow3 + " Value Expected : " + expreportRow3);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();

		if (actreportRow1.equalsIgnoreCase(expreportRow1) && actreportRow2.equalsIgnoreCase(expreportRow2)
				&& actreportRow3.equalsIgnoreCase(expreportRow3)) {
			System.out.println("Test Pass : Reports Are As Expected");

			return true;
		} else {
			System.out.println("Test Fail : Reports Are NOT As Expected");
			return false;
		}
	}

	public boolean checkAgeingOfPendingDocumentsByDueDateReport()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(orderManagementMenu));
		orderManagementMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(analysisOfLinkedORUnlinkedDocumentsMenu));
		analysisOfLinkedORUnlinkedDocumentsMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingOfPendingDocumentsByDueDate));
		ageingOfPendingDocumentsByDueDate.click();

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s = new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		// s.selectByVisibleText(" As on date ");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(listingOfDocWorkFlowTxt));
		listingOfDocWorkFlowTxt.click();
		listingOfDocWorkFlowTxt.sendKeys("Purchases Orders vs Purchase Vouchers N");
		Thread.sleep(2000);
		listingOfDocWorkFlowTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);

		int reportRow1Count = reportRow1.size();

		ArrayList<String> reportRow1Array = new ArrayList<String>();

		for (int i = 3; i < reportRow1Count; i++) {
			String data = reportRow1.get(i).getText();

			reportRow1Array.add(data);
		}

		String actreportRow1 = reportRow1Array.toString();
		String expreportRow1 = "[PurOrd:5, STD RATE COGS ITEM, 12.00, 12.00, , 12.00, , , , , , ]";

		int reportRow2Count = reportRow2.size();

		ArrayList<String> reportRow2Array = new ArrayList<String>();

		for (int i = 3; i < reportRow2Count; i++) {
			String data = reportRow2.get(i).getText();

			reportRow2Array.add(data);
		}

		String actreportRow2 = reportRow2Array.toString();
		String expreportRow2 = "[PurOrd:5, STD RATE COGS ITEM, 12.00, 12.00, , 12.00, , , , , , ]";

		int reportRow3Count = reportRow3.size();

		ArrayList<String> reportRow3Array = new ArrayList<String>();

		for (int i = 3; i < reportRow3Count; i++) {
			String data = reportRow3.get(i).getText();

			reportRow3Array.add(data);
		}

		String actreportRow3 = reportRow3Array.toString();
		String expreportRow3 = "[PurOrd:4, STD RATE COGS ITEM, 12.00, 12.00, 12.00, , , , , , , ]";

		int reportRow4Count = reportRow4.size();

		ArrayList<String> reportRow4Array = new ArrayList<String>();

		for (int i = 3; i < reportRow4Count; i++) {
			String data = reportRow4.get(i).getText();

			reportRow4Array.add(data);
		}

		String actreportRow4 = reportRow4Array.toString();
		String expreportRow4 = "[PurOrd:4, STD RATE COGS ITEM, 12.00, 12.00, 12.00, , , , , , , ]";

		int reportRow5Count = reportRow5.size();

		ArrayList<String> reportRow5Array = new ArrayList<String>();

		for (int i = 3; i < reportRow5Count; i++) {
			String data = reportRow5.get(i).getText();

			reportRow5Array.add(data);
		}

		String actreportRow5 = reportRow5Array.toString();
		String expreportRow5 = "[PurOrd:3, STD RATE COGS ITEM, 12.00, 12.00, 12.00, , , , , , , ]";

		int reportRow6Count = reportRow6.size();

		ArrayList<String> reportRow6Array = new ArrayList<String>();

		for (int i = 3; i < reportRow6Count; i++) {
			String data = reportRow6.get(i).getText();

			reportRow6Array.add(data);
		}

		String actreportRow6 = reportRow6Array.toString();
		String expreportRow6 = "[PurOrd:3, STD RATE COGS ITEM, 12.00, 12.00, 12.00, , , , , , , ]";

		int reportRow7Count = reportRow7.size();

		ArrayList<String> reportRow7Array = new ArrayList<String>();

		for (int i = 3; i < reportRow7Count; i++) {
			String data = reportRow7.get(i).getText();

			reportRow7Array.add(data);
		}

		String actreportRow7 = reportRow7Array.toString();
		String expreportRow7 = "[PurOrd:2, STD RATE COGS ITEM, 12.00, 12.00, 12.00, , , , , , , ]";

		int reportRow8Count = reportRow8.size();

		ArrayList<String> reportRow8Array = new ArrayList<String>();

		for (int i = 3; i < reportRow8Count; i++) {
			String data = reportRow8.get(i).getText();

			reportRow8Array.add(data);
		}

		String actreportRow8 = reportRow8Array.toString();
		String expreportRow8 = "[PurOrd:2, STD RATE COGS ITEM, 12.00, 12.00, 12.00, , , , , , , ]";

		int reportRow9Count = reportRow9.size();

		ArrayList<String> reportRow9Array = new ArrayList<String>();

		for (int i = 3; i < reportRow9Count; i++) {
			String data = reportRow9.get(i).getText();

			reportRow9Array.add(data);
		}

		String actreportRow9 = reportRow9Array.toString();
		String expreportRow9 = "[NDT45:2, STD RATE COGS ITEM, 12.00, 12.00, 12.00, , , , , , , ]";

		int reportRow10Count = reportRow10.size();

		ArrayList<String> reportRow10Array = new ArrayList<String>();

		for (int i = 3; i < reportRow10Count; i++) {
			String data = reportRow10.get(i).getText();

			reportRow10Array.add(data);
		}

		String actreportRow10 = reportRow10Array.toString();
		String expreportRow10 = "[PurOrd:1, STD RATE COGS ITEM, 12.00, 6.00, 6.00, , , , , , , ]";

		int reportRow11Count = reportRow11.size();

		ArrayList<String> reportRow11Array = new ArrayList<String>();

		for (int i = 3; i < reportRow11Count; i++) {
			String data = reportRow11.get(i).getText();

			reportRow11Array.add(data);
		}

		String actreportRow11 = reportRow11Array.toString();
		String expreportRow11 = "[PurOrd:1, STD RATE COGS ITEM, 12.00, 6.00, 6.00, , , , , , , ]";

		int reportRow12Count = reportRow12.size();

		ArrayList<String> reportRow12Array = new ArrayList<String>();

		for (int i = 3; i < reportRow12Count; i++) {
			String data = reportRow12.get(i).getText();

			reportRow12Array.add(data);
		}

		String actreportRow12 = reportRow12Array.toString();
		String expreportRow12 = "[NDT45:1, STD RATE COGS ITEM, 6.00, 6.00, 6.00, , , , , , , ]";

		int reportRow13Count = reportRow13.size();

		ArrayList<String> reportRow13Array = new ArrayList<String>();

		for (int i = 1; i < reportRow13Count; i++) {
			String data = reportRow13.get(i).getText();

			reportRow13Array.add(data);
		}

		String actreportRow13 = reportRow13Array.toString();
		String expreportRow13 = "[Grand Total, , , , 138.00, 126.00, 102.00, 24.00, , , , , , ]";

		System.out.println(
				"*********************************checkAgeingOfPendingDocumentsByDueDateReport*****************************************");

		System.out.println(actreportRow1);
		System.out.println(expreportRow1);
		System.out.println(actreportRow2);
		System.out.println(expreportRow2);
		System.out.println(actreportRow3);
		System.out.println(expreportRow3);
		System.out.println(actreportRow4);
		System.out.println(expreportRow4);
		System.out.println(actreportRow5);
		System.out.println(expreportRow5);
		System.out.println(actreportRow6);
		System.out.println(expreportRow6);
		System.out.println(actreportRow7);
		System.out.println(expreportRow7);
		System.out.println(actreportRow8);
		System.out.println(expreportRow8);
		System.out.println(actreportRow9);
		System.out.println(expreportRow9);
		System.out.println(actreportRow10);
		System.out.println(expreportRow10);
		System.out.println(actreportRow11);
		System.out.println(expreportRow11);
		System.out.println(actreportRow12);
		System.out.println(expreportRow12);
		System.out.println(actreportRow13);
		System.out.println(expreportRow13);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();

		if (actreportRow1.equalsIgnoreCase(expreportRow1) && actreportRow2.equalsIgnoreCase(expreportRow2)
				&& actreportRow3.equalsIgnoreCase(expreportRow3) && actreportRow4.equalsIgnoreCase(expreportRow4)
				&& actreportRow5.equalsIgnoreCase(expreportRow5) && actreportRow6.equalsIgnoreCase(expreportRow6)
				&& actreportRow7.equalsIgnoreCase(expreportRow7) && actreportRow8.equalsIgnoreCase(expreportRow8)
				&& actreportRow9.equalsIgnoreCase(expreportRow9) && actreportRow10.equalsIgnoreCase(expreportRow10)
				&& actreportRow11.equalsIgnoreCase(expreportRow11) && actreportRow12.equalsIgnoreCase(expreportRow12)
				&& actreportRow13.equalsIgnoreCase(expreportRow13)) {
			System.out.println("Test Pass : Reports Are As Expected");

			return true;
		} else {
			System.out.println("Test Fail : Reports Are NOT As Expected");
			return false;
		}
	}

	public boolean checkLinkChainAnalysisReport()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(orderManagementMenu));
		orderManagementMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(analysisOfLinkedORUnlinkedDocumentsMenu));
		analysisOfLinkedORUnlinkedDocumentsMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(linkChainAnalysis));
		linkChainAnalysis.click();

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s = new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		// s.selectByVisibleText(" As on date ");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(listingOfDocWorkFlowTxt));
		listingOfDocWorkFlowTxt.click();
		listingOfDocWorkFlowTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		listingOfDocWorkFlowTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);

		int reportRow1Count = reportRow1.size();

		ArrayList<String> reportRow1Array = new ArrayList<String>();

		for (int i = 0; i < reportRow1Count; i++) {
			String data = reportRow1.get(i).getText();

			if (i == 2) {
				data = "date field";
			}

			reportRow1Array.add(data);
		}

		String actreportRow1 = reportRow1Array.toString();
		String expreportRow1 = "[1, PurOrd:5, date field, 12.00, ]";

		int reportRow2Count = reportRow2.size();

		ArrayList<String> reportRow2Array = new ArrayList<String>();

		for (int i = 0; i < reportRow2Count; i++) {
			String data = reportRow2.get(i).getText();

			if (i == 2) {
				data = "date field";
			}

			reportRow2Array.add(data);
		}

		String actreportRow2 = reportRow2Array.toString();
		String expreportRow2 = "[2, PurOrd:2, date field, 12.00, ]";

		int reportRow3Count = reportRow3.size();

		ArrayList<String> reportRow3Array = new ArrayList<String>();

		for (int i = 0; i < reportRow3Count; i++) {
			String data = reportRow3.get(i).getText();

			if (i == 2) {
				data = "date field";
			}

			reportRow3Array.add(data);
		}

		String actreportRow3 = reportRow3Array.toString();
		String expreportRow3 = "[3, PurOrd:3, date field, 12.00, ]";

		int reportRow4Count = reportRow4.size();

		ArrayList<String> reportRow4Array = new ArrayList<String>();

		for (int i = 0; i < reportRow4Count; i++) {
			String data = reportRow4.get(i).getText();

			if (i == 2) {
				data = "date field";
			}

			reportRow4Array.add(data);
		}

		String actreportRow4 = reportRow4Array.toString();
		String expreportRow4 = "[4, PurOrd:4, date field, 12.00, ]";

		int reportRow5Count = reportRow5.size();

		ArrayList<String> reportRow5Array = new ArrayList<String>();

		for (int i = 0; i < reportRow5Count; i++) {
			String data = reportRow5.get(i).getText();

			if (i == 2) {
				data = "date field";
			}

			reportRow5Array.add(data);
		}

		String actreportRow5 = reportRow5Array.toString();
		String expreportRow5 = "[5, PurOrd:1, date field, 12.00, NDT45:1]";

		int reportRow6Count = reportRow6.size();

		ArrayList<String> reportRow6Array = new ArrayList<String>();

		for (int i = 0; i < reportRow6Count; i++) {
			String data = reportRow6.get(i).getText();

			if (i == 2) {
				data = "date field";
			}

			reportRow6Array.add(data);
		}

		String actreportRow6 = reportRow6Array.toString();
		String expreportRow6 = "[6, PurOrd:2, date field, 12.00, NDT45:2]";

		int reportRow7Count = reportRow7.size();

		ArrayList<String> reportRow7Array = new ArrayList<String>();

		for (int i = 0; i < reportRow7Count; i++) {
			String data = reportRow7.get(i).getText();

			reportRow7Array.add(data);
		}

		String actreportRow7 = reportRow7Array.toString();
		String expreportRow7 = "[7, Grand Total, , 72.00, ]";

		System.out.println(
				"*********************************checkLinkChainAnalysisReport*****************************************");

		System.out.println("reportRow1 : " + actreportRow1 + " Value Expected : " + expreportRow1);
		System.out.println("reportRow2 : " + actreportRow2 + " Value Expected : " + expreportRow2);
		System.out.println("reportRow3 : " + actreportRow3 + " Value Expected : " + expreportRow3);
		System.out.println("reportRow4 : " + actreportRow4 + " Value Expected : " + expreportRow4);
		System.out.println("reportRow5 : " + actreportRow5 + " Value Expected : " + expreportRow5);
		System.out.println("reportRow6 : " + actreportRow6 + " Value Expected : " + expreportRow6);
		System.out.println("reportRow7 : " + actreportRow7 + " Value Expected : " + expreportRow7);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();

		if (actreportRow1.equalsIgnoreCase(expreportRow1) && actreportRow2.equalsIgnoreCase(expreportRow2)
				&& actreportRow3.equalsIgnoreCase(expreportRow3) && actreportRow4.equalsIgnoreCase(expreportRow4)
				&& actreportRow5.equalsIgnoreCase(expreportRow5) && actreportRow6.equalsIgnoreCase(expreportRow6)
				&& actreportRow7.equalsIgnoreCase(expreportRow7)) {
			System.out.println("Test Pass : Reports Are As Expected");

			return true;
		} else {
			System.out.println("Test Fail : Reports Are NOT As Expected");
			return false;
		}
	}

	public boolean checkPendingVoucherReport()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(orderManagementMenu));
		orderManagementMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(analysisOfLinkedORUnlinkedDocumentsMenu));
		analysisOfLinkedORUnlinkedDocumentsMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingVoucherReports));
		pendingVoucherReports.click();

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s = new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		// s.selectByVisibleText(" As on date ");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(listingOfDocWorkFlowTxt));
		listingOfDocWorkFlowTxt.click();
		listingOfDocWorkFlowTxt.sendKeys("Purchases Orders vs Purchase Vouchers N");
		Thread.sleep(2000);
		listingOfDocWorkFlowTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);

		int reportRow1Count = reportRow1.size();

		ArrayList<String> reportRow1Array = new ArrayList<String>();

		for (int i = 2; i < reportRow1Count; i++) {
			String data = reportRow1.get(i).getText();

			if (i == 5 || i == 6 || i == 7 || i == 8) {
				data = "Date Or Time";
			}

			reportRow1Array.add(data);
		}

		String actreportRow1 = reportRow1Array.toString();
		String expreportRow1 = "[4, SU, SU, Date Or Time, Date Or Time, Date Or Time, Date Or Time, False, Authorized, 12.00, ]";

		int reportRow2Count = reportRow2.size();

		ArrayList<String> reportRow2Array = new ArrayList<String>();

		for (int i = 2; i < reportRow2Count; i++) {
			String data = reportRow2.get(i).getText();

			if (i == 5 || i == 6 || i == 7 || i == 8) {
				data = "Date Or Time";
			}

			reportRow2Array.add(data);
		}

		String actreportRow2 = reportRow2Array.toString();
		String expreportRow2 = "[5, SU, SU, Date Or Time, Date Or Time, Date Or Time, Date Or Time, False, Authorized, 12.00, ]";

		int reportRow3Count = reportRow3.size();

		ArrayList<String> reportRow3Array = new ArrayList<String>();

		for (int i = 0; i < reportRow3Count; i++) {
			String data = reportRow3.get(i).getText();

			reportRow3Array.add(data);
		}

		String actreportRow3 = reportRow3Array.toString();
		String expreportRow3 = "[3, Grand Total, , , , , , , , , , 24.00, ]";

		System.out.println(
				"*********************************checkPendingVoucherReport*****************************************");

		System.out.println("reportRow1 : " + actreportRow1 + " Value Expected : " + expreportRow1);
		System.out.println("reportRow2 : " + actreportRow2 + " Value Expected : " + expreportRow2);
		System.out.println("reportRow3 : " + actreportRow3 + " Value Expected : " + expreportRow3);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();

		// checkEraseAllTransactionsLogoutAndLogin();

		if (actreportRow1.equalsIgnoreCase(expreportRow1) && actreportRow2.equalsIgnoreCase(expreportRow2)
				&& actreportRow3.equalsIgnoreCase(expreportRow3)) {
			System.out.println("Test Pass : Reports Are As Expected");

			return true;
		} else {
			System.out.println("Test Fail : Reports Are NOT As Expected");
			return false;
		}
	}
	
	
	public boolean checkFilterOptionsUnderPendingPurchaseOrderLink()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(2000);
		
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePannelOpenBtn));
		homePannelOpenBtn.click();

		Thread.sleep(1000);

		click(pendingPurchasesOrdersLink);

		Thread.sleep(1500);

		int actualgrid_VoucherNoList = grid_VoucherNoList.size()-1;
		int expectedgrid_VoucherNoList = 2;

		System.out.println("actualgrid_VoucherNoList   	 :" + actualgrid_VoucherNoList);
		System.out.println("expectedgrid_VoucherNoList   :" + expectedgrid_VoucherNoList);

		click(filterVoucher);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterPopupTxt));

		boolean actFilterpopupIsDisplaying = filterPopupTxt.isDisplayed();
		boolean expFilterpopupIsDisplaying = true;

		System.out.println("act Filter popupIs Displaying  : " + actFilterpopupIsDisplaying + "  Value Expected  "
				+ expFilterpopupIsDisplaying);

		click(filterCustomizationIcon);

		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizationPopupTxt));

		boolean actcustomizationpopupIsDisplaying = customizationPopupTxt.isDisplayed();
		boolean expcustomizationpopupIsDisplaying = true;

		System.out.println("actcustomizationpopupIsDisplaying : " + actcustomizationpopupIsDisplaying
				+ "  Value Expected  " + expcustomizationpopupIsDisplaying);

		click(docnoCheckBx);

		click(customizePopupOkBtn);

		Thread.sleep(1500);

		enterText(fromDocNoTxt, "4");

		// fromDocNoTxt.sendKeys(Keys.TAB);

		enterText(toDocNoTxt, "4");

		click(defaultFilterPopupOkBtn);
		
		Thread.sleep(2000);

		int actualgrid_VoucherNoListAfterFiletr = grid_VoucherNoList.size()-1;
		int expectedgrid_VoucherNoListAfterFiletr = 1;

		System.out.println("actualgrid_VoucherNoListAfterFiletr   	 :" + actualgrid_VoucherNoListAfterFiletr);
		System.out.println("expectedgrid_VoucherNoListAfterFiletr    :" + expectedgrid_VoucherNoListAfterFiletr);

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) {
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("4")) {
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Link data loaded");

		enterText(purchaseAccountTxt, "Purchase");
		Thread.sleep(1500);
	

		enterText(departmentTxt, "DUBAI");

		Thread.sleep(1500);

		int row1List = Row1BodyList.size();
		System.err.println(row1List);
		ArrayList<String> row1SalesList = new ArrayList<String>();
		for (int i = 0; i < row1List; i++) {
			String data = Row1BodyList.get(i).getText();
			row1SalesList.add(data);
		}

		String actrow1List = row1SalesList.toString();
		String exprow1List = "[1, STD RATE COGS ITEM, Dozs, 0, 10.00, 1.00, PurOrd:4, 10.00, 10.00, 0.00]";

		System.out.println("actrow1List       :" + actrow1List);
		System.out.println("exprow1List       :" + exprow1List);

		click(vouchersaveBtn);

		Thread.sleep(2000);

		click(billRefNewRefTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		Thread.sleep(2000);

		String expMessage1 = "Voucher saved successfully";
		String expMessage2 = ": 3";

		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  " + actMessage + " Value Expected : " + expMessage1 + " " + expMessage2);

		if (actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)
				&& actrow1List.equalsIgnoreCase(exprow1List) && actualgrid_VoucherNoList == expectedgrid_VoucherNoList
				&& actualgrid_VoucherNoListAfterFiletr == expectedgrid_VoucherNoListAfterFiletr
				&& actFilterpopupIsDisplaying == expFilterpopupIsDisplaying
				&& actcustomizationpopupIsDisplaying == expcustomizationpopupIsDisplaying) {
			System.out.println("Test Pass : Reports Are As Expected");

			return true;
		} else {
			System.out.println("Test Fail : Reports Are NOT As Expected");
			return false;
		}
	}
	
	
	public boolean checkValidatingAddingNewFieldInLinksCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(3000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		Thread.sleep(1000);
		
		click(voucherNewBtn);
		
		Thread.sleep(1000);
		
		checkValidationMessage("Screen opened");
		
		documentNumberTxt.sendKeys(Keys.CONTROL,"l");
		
		Thread.sleep(2000);
		
		click(workFlowCustomizeBtnCL);
		
		Thread.sleep(5000);
		
		click(programmableExpandBtn);
		
		Thread.sleep(1500);
		
		doubleClick(programmableFiledBtn);
		
		Thread.sleep(1500);
		
		click(programmableTab);
		
		Thread.sleep(3000);
		
		ClickUsingJs(formulaControlTxt);
		
		enterText(formulaControlTxt, "c4*5");
		Thread.sleep(3000);
		
		moveToElement(formulaControlOkBtn);
		
		ClickUsingJs(custSaveBtn);
		
		String expMsg ="Data saved successfully";
		
		String actMsg =checkValidationMessage(expMsg);
		
		Thread.sleep(1500);
		
		documentNumberTxt.sendKeys(Keys.CONTROL,"l");
		Thread.sleep(3000);
		
		DateFormat df = new SimpleDateFormat("dd-M-yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, -31); 
		String expiryDate = df.format(exp.getTime());
		
		
		int workflowRow1Count = workFlowRow1List.size();
		ArrayList<String> workflowRow1CountListArray = new ArrayList<String>();
		for(int i=0;i<workflowRow1Count;i++)
		{
			String data = workFlowRow1List.get(i).getText();
			
			if(data.isEmpty()==false) 
			
			{
				
				workflowRow1CountListArray.add(data);
				
			}
			
		}
		String actRow1List = workflowRow1CountListArray.toString();
		String expRow1List = "[1, PurOrd:5, "+expiryDate+", STD RATE COGS ITEM, 12.00, 60.00]";
		
		System.out.println("actRow1List     :"+actRow1List);
		System.out.println("expRow1List     :"+expRow1List);
		
		
		int workflowRow2Count = workFlowRow2List.size();
		ArrayList<String> workflowRow2CountListArray = new ArrayList<String>();
		for(int i=0;i<workflowRow2Count;i++)
		{
			String data = workFlowRow2List.get(i).getText();
			
			if(data.isEmpty()==false) 
			
			{
				
				workflowRow2CountListArray.add(data);
				
			}
			
		}
		String actRow2List = workflowRow2CountListArray.toString();
		String expRow2List = "[2, PurOrd:4, "+getCurrentDate()+", STD RATE COGS ITEM, 12.00, 60.00]";
		
		System.out.println("actRow2List     :"+actRow2List);
		System.out.println("expRow2List     :"+expRow2List);
		
		ClickUsingJs(workFlowCustomizeBtnCL);
		
		Thread.sleep(5000);
		
		click(programmableTab);
		Thread.sleep(3000);
		
		String actFormulaValue  =formulaControlTxt.getAttribute("value");
		
		String expFormulaValue  ="c4*5";
		
		System.out.println("actFormulaValue     :"+actFormulaValue);
		System.out.println("expFormulaValue     :"+expFormulaValue);
		
		
		
		click(nameTab);
		
		Thread.sleep(1500);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custLeftPannelTransExpandBtn));
		custLeftPannelTransExpandBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custTransExtraFieldExpandBtn));
		custTransExtraFieldExpandBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouse1ExpandBtn));
		warehouse1ExpandBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseCode1));
		getAction().doubleClick(warehouseCode1).build().perform();
		
		Thread.sleep(2000);
		
		click(custSaveBtn);
		
		checkValidationMessage("Data saved successfully");
		
		documentNumberTxt.sendKeys(Keys.CONTROL,"l");
		
		
		
		Thread.sleep(3000);
		
		
		int afterRow1Count = workFlowRow1List.size();
		ArrayList<String> afterRow1CountListArray = new ArrayList<String>();
		for(int i=0;i<afterRow1Count;i++)
		{
			String data = workFlowRow1List.get(i).getText();
			
			if(data.isEmpty()==false) 
			
			{
				
				afterRow1CountListArray.add(data);
				
			}
			
		}
		String afteractRow1List = afterRow1CountListArray.toString();
		String afterexpRow1List = "[1, PurOrd:5, "+expiryDate+", STD RATE COGS ITEM, HYDERABAD, 12.00]";
		
		System.out.println("afteractRow1List     :"+afteractRow1List);
		System.out.println("afterexpRow1List     :"+afterexpRow1List);
		
		
		int afterRow2Count = workFlowRow2List.size();
		ArrayList<String> afterRow2CountListArray = new ArrayList<String>();
		for(int i=0;i<afterRow2Count;i++)
		{
			String data = workFlowRow2List.get(i).getText();
			
			if(data.isEmpty()==false) 
			
			{
				
				afterRow2CountListArray.add(data);
				
			}
			
		}
		String afteractRow2List = afterRow2CountListArray.toString();
		String afterexpRow2List = "[2, PurOrd:4, "+getCurrentDate()+", STD RATE COGS ITEM, HYDERABAD, 12.00]";
		
		System.out.println("afteractRow2List     :"+afteractRow2List);
		System.out.println("afterexpRow2List     :"+afterexpRow2List);
		
		Thread.sleep(3000);
		
		click(workFlowCustomizeBtnCL);
		
		Thread.sleep(5000);
		
		click(rearrangeFormula);
		
		Thread.sleep(2000);
		
		click(newFormula);
		
		newFormula1.sendKeys(Keys.CONTROL,"a");
		
		Thread.sleep(1500);
		
		newFormula1.sendKeys(Keys.BACK_SPACE);
		
		Thread.sleep(1500);
		
		enterText(newFormula1, "c5*5");
		
		Thread.sleep(2000);
		
		click(reArrangeFormulaOkBtn);
		
		Thread.sleep(1500);
		
		click(custSaveBtn);
		
		checkValidationMessage("Data saved successfully");
		
		documentNumberTxt.sendKeys(Keys.CONTROL,"l");
		
		Thread.sleep(3000);
		
		
		int afterEditingFormulaworkflowRow1Count = workFlowRow1List.size();
		ArrayList<String> afterEditingFormulaRow1CountListArray = new ArrayList<String>();
		for(int i=0;i<afterEditingFormulaworkflowRow1Count;i++)
		{
			String data = workFlowRow1List.get(i).getText();
			
			if(data.isEmpty()==false) 
			
			{
				
				afterEditingFormulaRow1CountListArray.add(data);
				
			}
			
		}
		String afterEditingFormulaactRow1List = afterEditingFormulaRow1CountListArray.toString();
		String afterEditingFormulaexpRow1List = "[1, PurOrd:5, "+expiryDate+", STD RATE COGS ITEM, HYDERABAD, 12.00, 60.00]";
		
		System.out.println("afterEditingFormulaactRow1List     :"+afterEditingFormulaactRow1List);
		System.out.println("afterEditingFormulaexpRow1List     :"+afterEditingFormulaexpRow1List);
		
		
		int afterEditingFormulaworkflowRow2Count = workFlowRow2List.size();
		ArrayList<String> afterEditingFormulaworkflowRow2CountListArray = new ArrayList<String>();
		for(int i=0;i<afterEditingFormulaworkflowRow2Count;i++)
		{
			String data = workFlowRow2List.get(i).getText();
			
			if(data.isEmpty()==false) 
			
			{
				
				afterEditingFormulaworkflowRow2CountListArray.add(data);
				
			}
			
		}
		String afterEditingFormulaactRow2List = afterEditingFormulaworkflowRow2CountListArray.toString();
		String afterEditingFormulaexpRow2List = "[2, PurOrd:4, "+getCurrentDate()+", STD RATE COGS ITEM, HYDERABAD, 12.00, 60.00]";
		
		System.out.println("afterEditingFormulaactRow2List     :"+afterEditingFormulaactRow2List);
		System.out.println("afterEditingFormulaexpRow2List     :"+afterEditingFormulaexpRow2List);
		
		ClickUsingJs(workFlowCustomizeBtnCL);
		
		Thread.sleep(5000);
		
		click(programmableTab);
		Thread.sleep(3000);
		
		String actFormulaValueafterEditing  =formulaControlTxt.getAttribute("value");
		
		String expFormulaValueafterEditing  ="c5*5";
		
		System.out.println("actFormulaValueafterEditing     :"+actFormulaValueafterEditing);
		System.out.println("expFormulaValueafterEditing     :"+expFormulaValueafterEditing);
		
		
		click(custCancelBtn);
		Thread.sleep(1500);
		click(workfolWCancelBtn);
		
		documentNumberTxt.click();
		
		
		
		if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(actRow2List) && afteractRow1List.equalsIgnoreCase(afterexpRow1List)
				&& afteractRow2List.equalsIgnoreCase(afterexpRow2List) && afterEditingFormulaactRow1List.equalsIgnoreCase(afterEditingFormulaexpRow1List)
				&& afterEditingFormulaactRow2List.equalsIgnoreCase(afterEditingFormulaexpRow2List) && actFormulaValue.equalsIgnoreCase(expFormulaValue))
		{
			
			
			
			Thread.sleep(1000);
			click(new_CloseBtn);			
			Thread.sleep(1000);
			click(voucherhomeCloseBtn);
			
			System.out.println("Test Pass : Reports Are As Expected");
			
			return true;
		}
		else
		{
			
			
			Thread.sleep(1000);
			click(new_CloseBtn);			
			Thread.sleep(1000);
			click(voucherhomeCloseBtn);
			System.out.println("Test Fail : Reports Are NOT As Expected");
			return false;
		}
	}
	
	
	
	public boolean checkValidatingExportFunctionalityInLinksCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		Thread.sleep(1000);
		
		click(voucherNewBtn);
		
		Thread.sleep(1000);
		
		checkValidationMessage("Screen opened");
		
		documentNumberTxt.sendKeys(Keys.CONTROL,"l");
		
		Thread.sleep(2000);
		
		click(workFlowCustomizeBtnCL);
		
		Thread.sleep(5000);
		
		click(workFlowExportBtn);
		
		Thread.sleep(5000);
		
		
		boolean novalidationConfirmationMessage = validationConfirmationMessage.getText().isEmpty();

		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("actvalidationConfirmationMessage    :"+actvalidationConfirmationMessage);
		
		System.out.println("expvalidationConfirmationMessage    :"+expvalidationConfirmationMessage);
		
		
		click(custCancelBtn);
		Thread.sleep(1500);
		click(workfolWCancelBtn);
		
		documentNumberTxt.click();
		
		
		if(actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage))
			
		{
			
			
			Thread.sleep(1000);
			click(new_CloseBtn);			
			Thread.sleep(1000);
			click(voucherhomeCloseBtn);
			return true;
			
		}
		else
		{
			
			
			Thread.sleep(1000);
			click(new_CloseBtn);			
			Thread.sleep(1000);
			click(voucherhomeCloseBtn);
			return false;
			
		}
		
		
		
	
		
		
		
	}
	
	
	public boolean checkValidatingImportFunctionalityInLinksCustomization()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {
		Thread.sleep(2000);

		
		File Efile = new File(getBaseDir() + "\\autoIt\\ExportFiles\\Links_Standard (link).xml");

		if (Efile.exists()) {
			Efile.delete();
		}
		 
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(1000);

		click(voucherNewBtn);

		Thread.sleep(1000);

		checkValidationMessage("Screen opened");
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		Thread.sleep(2000);

		click(workFlowCustomizeBtnCL);

		Thread.sleep(5000);

		click(workFlowWarehouseCodeTab);
		Thread.sleep(1500);

		click(workFlowRemoveColumnBtn);

		click(programmableTab);

		Thread.sleep(1500);

		click(workFlowRemoveColumnBtn);

		click(custSaveBtn);
		
		checkValidationMessage("Data saved successfully");

		
		
		documentNumberTxt.sendKeys(Keys.CONTROL,"l");
		
		Thread.sleep(1500);
		
		

		int actworkflowHeaderListCount  = workflowHeaderList.size();
		int expworkflowHeaderListCount  = 5;

		
		System.out.println("actworkflowHeaderListCount    :" + actworkflowHeaderListCount);

		System.out.println("expworkflowHeaderListCount    :" + expworkflowHeaderListCount);
		
	
		
		Thread.sleep(1500);

		click(workFlowCustomizeBtnCL);

		Thread.sleep(5000);

		click(workFlowImportBtn);

		 Thread.sleep(3000);
	     
		 Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\LinkcustomizationImport.exe");
	     
	     Thread.sleep(3000);
	     
	     click(custSaveBtn);
	     
	     checkValidationMessage("Data saved successfully");
	     
	     documentNumberTxt.sendKeys(Keys.CONTROL,"l");
	     
	     Thread.sleep(2000);
	     
	     int actworkflowHeaderListCount1  = workflowHeaderList.size();
		 int expworkflowHeaderListCount1  = 7;
	     
	     
		System.out.println("actworkflowHeaderListCount1    :" + actworkflowHeaderListCount1);

		System.out.println("expworkflowHeaderListCount1    :" + expworkflowHeaderListCount1);
		
		//click(custCancelBtn);
		Thread.sleep(1500);
		click(workfolWCancelBtn);
		
		documentNumberTxt.click();

		if (actworkflowHeaderListCount==expworkflowHeaderListCount && actworkflowHeaderListCount1==expworkflowHeaderListCount1 )

		{

			//click(custCancelBtn);
			Thread.sleep(1500);
			click(new_CloseBtn);
			Thread.sleep(1000);
			click(voucherhomeCloseBtn);
			return true;

		} else {

			//click(custCancelBtn);
			Thread.sleep(1500);
			click(new_CloseBtn);
			Thread.sleep(1000);
			click(voucherhomeCloseBtn);
			return false;

		}

	}
	
	
	public boolean checkValidatingDeleteFunctionalityInLinksCustomization()
			throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException {

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();

		Thread.sleep(1000);

		click(voucherNewBtn);

		Thread.sleep(1000);

		checkValidationMessage("Screen opened");

		documentNumberTxt.sendKeys(Keys.CONTROL,"l");
		
		Thread.sleep(1500);
		
		

		int actworkflowHeaderListCount  = workflowHeaderList.size();
		int expworkflowHeaderListCount  = 7;

		
		System.out.println("actworkflowHeaderListCount    :" + actworkflowHeaderListCount);

		System.out.println("expworkflowHeaderListCount    :" + expworkflowHeaderListCount);

		Thread.sleep(2000);

		click(workFlowCustomizeBtnCL);

		Thread.sleep(5000);

		click(workflowDeleteLayout);
		Thread.sleep(1500);
		
		String actAlt   =getAlert().getText();
		String expAlt   ="Do you want to delete the layout?";
		
		System.out.println("actAlt     :"+actAlt);
		System.out.println("expAlt     :"+expAlt);
		
		getAlert().accept();
		
		String expValidationMsg ="Layout Deleted Successfully";
		String actValidationMsg =checkValidationMessage(expValidationMsg);
		
		
		documentNumberTxt.sendKeys(Keys.CONTROL, "l");

		Thread.sleep(2000);
		
		int actworkflowHeaderListCount1  = workflowHeaderList.size();
		int expworkflowHeaderListCount1  = 5;

		
		System.out.println("actworkflowHeaderListCount1    :" + actworkflowHeaderListCount1);

		System.out.println("expworkflowHeaderListCount1    :" + expworkflowHeaderListCount1);
		
		Thread.sleep(1500);
		click(workfolWCancelBtn);
		
		documentNumberTxt.click();
		
		
		if (actValidationMsg.equalsIgnoreCase(expValidationMsg) && actAlt.equalsIgnoreCase(expAlt)
			&& actworkflowHeaderListCount==expworkflowHeaderListCount && actworkflowHeaderListCount1==expworkflowHeaderListCount1)

		{

			//click(custCancelBtn);
			Thread.sleep(1500);
			click(new_CloseBtn);
			Thread.sleep(1000);
			click(voucherhomeCloseBtn);
			return true;

		} else {

			//click(custCancelBtn);
			Thread.sleep(1500);
			click(new_CloseBtn);
			Thread.sleep(1000);
			click(voucherhomeCloseBtn);
			return false;

		}

	}
	
	@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
	private static List<WebElement> vendorAccountListCount; 
	
	@FindBy(xpath="//tbody[@id='id_body_536870916_table_body']/tr/td[2]")
	private static List<WebElement> pvwareHouseListCount;
	
	@FindBy(xpath="//tbody[@id='id_body_23_table_body']/tr/td[2]")
    private static List<WebElement> itemListCount;
	
	@FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr/td[2]")
	private static List<WebElement> purchaseAccountListCount; 
	
	@FindBy(xpath="//tbody[@id='id_header_268435459_table_body']/tr/td[2]")
    private static List<WebElement> departmentListCount;
	
	@FindBy(xpath="//tbody[@id='id_header_268435460_table_body']/tr/td[2]")
	private static List<WebElement> wareHouseListCount;
	
	public boolean checkCannotExceedTheBaseValueOptionForMultipleRowsWithSameItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		
		checkEraseAllTransactionsLogoutAndLogin();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		 vendorAccountTxt.sendKeys(Keys.SPACE);
		 
		 Thread.sleep(2000);
		 
		 int vendorcount=vendorAccountListCount.size();
		 
		 System.err.println(vendorcount);
		 
		 for(int i=0 ; i < vendorcount ;i++)
		 {
			 String data=vendorAccountListCount.get(i).getText();
			 
			 if(data.equalsIgnoreCase("Vendor A"))
			 {
				 vendorAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
		
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
		
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("HYDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount=itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);
		
		contextClick(firstRowIndex);
		
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(duplicateRowBtn));
		duplicateRowBtn.click();
		
		Thread.sleep(1500);
		
		System.out.println("2nd Row Added");
		
		contextClick(firstRowIndex);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(duplicateRowBtn));
		duplicateRowBtn.click();
		
		Thread.sleep(1500);
		
		System.out.println("3rd Row Added");
		
		Thread.sleep(1000);
		
		
	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
		purchaseAccountTxt.sendKeys(Keys.SPACE);
		
		int count=purchaseAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=purchaseAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Purchase"))
			{
				purchaseAccountListCount.get(i).click();
				
				break;
			}
		}
		
		purchaseAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		int countVendor=vendorAccountListCount.size();
		
		System.err.println(countVendor);
		
		for(int i=0 ; i < countVendor ;i++)
		{
			String data=vendorAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Vendor A"))
			{
				vendorAccountListCount.get(i).click();
				
				break;
			}
		}
		
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("DUBAI"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehouseCount=wareHouseListCount.size();
		
		System.err.println(warehouseCount);
			
		for(int i=0 ; i < warehouseCount ;i++)
		{
			String data=wareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Hyderabad"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount0=itemListCount.size();
		
		System.err.println(itemcount0);
			
		for(int i=0 ; i < itemcount0 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
		
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
		workFlowHeaderChkBox.click();	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
		select2ndRow_7thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
		select3rdRow_7thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		
		
		
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno1=documentNumberTxt.getAttribute("value");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		Thread.sleep(2000);
		
		click(billRefNewRefTxt);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
	
		boolean savingMessage1=checkVoucherSavingMessage(docno1);
	    
		Thread.sleep(2000);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		designWorkflowbtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		
		draggedPurchasesVouchersN.click();
		
		Thread.sleep(2000);
	
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");

		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();
		//moveToElement(link3TO4);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();
		
		if(cannotExceedTheBaseValueChkboxIsSelected.isSelected()==false)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cannotExceedTheBaseValueChkbox));
			cannotExceedTheBaseValueChkbox.click();
		}


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expMessage="WorkFlow Saved Successfully";
	  		
		String actMessage=checkValidationMessage(expMessage);
		  		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();
		
		Thread.sleep(2000);
		
		
		checkLogoutAndLogin();
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		LoginPage lp=new LoginPage(getDriver()); 
		
	    String unamelt="su";
	  
	    String pawslt="su";
	    
	    prongHornOn();
	    Thread.sleep(2000);
	      
	    lp.enterUserName(unamelt);
	    
	    lp.enterPassword(pawslt);
	    
	    lp.clickOnSignInBtn();*/
	    
	    Thread.sleep(2000);
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		grid_ChkBox1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomedeleteBtn));
		voucherHomedeleteBtn.click();
		
		if(getIsAlertPresent())
		{
			getWaitForAlert();
			
			getAlert().accept();
		}
		
		checkUserFriendlyMessage();
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		checkUserFriendlyMessage();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
		purchaseAccountTxt.sendKeys(Keys.SPACE);
		
		int count1=purchaseAccountListCount.size();
		
		System.err.println(count1);
		
		for(int i=0 ; i < count1 ;i++)
		{
			String data=purchaseAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Purchase"))
			{
				purchaseAccountListCount.get(i).click();
				
				break;
			}
		}
		
		purchaseAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		int countVendor1=vendorAccountListCount.size();
		
		System.err.println(countVendor1);
		
		for(int i=0 ; i < countVendor1 ;i++)
		{
			String data=vendorAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Vendor A"))
			{
				vendorAccountListCount.get(i).click();
				
				break;
			}
		}
		
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount1=departmentListCount.size();
		
		System.err.println(departmentcount1);
			
		for(int i=0 ; i < departmentcount1 ;i++)
		{
			String data=departmentListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("DUBAI"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehouseCount1=wareHouseListCount.size();
		
		System.err.println(warehouseCount1);
			
		for(int i=0 ; i < warehouseCount1 ;i++)
		{
			String data=wareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("DUBAI"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
		
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
		workFlowHeaderChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_5thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("2");
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
		select3rdRow_7thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		Thread.sleep(2000);
		
		click(billRefNewRefTxt);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
	
		String expValidationMessage = "Link has already been consumed by another voucher. Please re-check the links.";
		String actValidationMessage = checkValidationMessage(expValidationMessage);
		
		System.out.println("************************************* checkCannotExceedTheBaseValueOption  *********************************");
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		System.out.println("SavingMessage1  :  "+savingMessage1 +" Value Expected : "+"TRUE");
		System.out.println("ValidationMessage : "+actValidationMessage+" Value Expected : "+expValidationMessage);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		designWorkflowbtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		
		draggedPurchasesVouchersN.click();
		
		Thread.sleep(2000);
		
		
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();
		
		if(cannotExceedTheBaseValueChkboxIsSelected.isSelected()==true)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cannotExceedTheBaseValueChkbox));
			cannotExceedTheBaseValueChkbox.click();
		}


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expMessage1="WorkFlow Saved Successfully";
	  		
		String actMessage1=checkValidationMessage(expMessage1);
		  		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();
		
		checkEraseAllTransactionsLogoutAndLogin();
		
		if (savingMessage==true && savingMessage1==true && actValidationMessage.equalsIgnoreCase(expValidationMessage))
		{
			System.out.println("Voucher Saved");
			return true;
		}
		else
		{
			System.out.println("Voucher Not Saved");
			return false;
		}
	}
	
	
	@FindBy(xpath="//*[@id='id_transactionentry_suspend']")
	private static WebElement  new_Suspend;
	
	public boolean checkCannotExceedTheBaseValueOptionForMultipleRowsWithDifferentItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		 vendorAccountTxt.sendKeys(Keys.SPACE);
		 
		 Thread.sleep(2000);
		 
		 int vendorcount=vendorAccountListCount.size();
		 
		 System.err.println(vendorcount);
		 
		 for(int i=0 ; i < vendorcount ;i++)
		 {
			 String data=vendorAccountListCount.get(i).getText();
			 
			 if(data.equalsIgnoreCase("Vendor A"))
			 {
				 vendorAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
		
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
		
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("HYDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount=itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);
		
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
		
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
		
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("HYDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}*/
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount2=itemListCount.size();
		
		System.err.println(itemcount2);
			
		for(int i=0 ; i < itemcount2 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BR COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);
		
		System.out.println("2nd Row Added");
		
		
		
		
		
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount3=itemListCount.size();
		
		System.err.println(itemcount3);
			
		for(int i=0 ; i < itemcount3 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("FIFO COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);
		
		System.out.println("3rd Row Added");
		
		
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount4=itemListCount.size();
		
		System.err.println(itemcount4);
			
		for(int i=0 ; i < itemcount4 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("WA COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);
		
		System.out.println("4th Row Added");
		
		
		
		
		/*contextClick(firstRowIndex);
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(duplicateRowBtn));
		duplicateRowBtn.click();
		
		Thread.sleep(1500);
		
		System.out.println("2nd Row Added");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(duplicateRowBtn));
		duplicateRowBtn.click();
		
		Thread.sleep(1500);
		
		System.out.println("3rd Row Added");
		
		Thread.sleep(1000);*/
		
		
	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
		purchaseAccountTxt.sendKeys(Keys.SPACE);
		
		int count=purchaseAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=purchaseAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Purchase"))
			{
				purchaseAccountListCount.get(i).click();
				
				break;
			}
		}
		
		purchaseAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		int countVendor=vendorAccountListCount.size();
		
		System.err.println(countVendor);
		
		for(int i=0 ; i < countVendor ;i++)
		{
			String data=vendorAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Vendor A"))
			{
				vendorAccountListCount.get(i).click();
				
				break;
			}
		}
		
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("DUBAI"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehouseCount=wareHouseListCount.size();
		
		System.err.println(warehouseCount);
			
		for(int i=0 ; i < warehouseCount ;i++)
		{
			String data=wareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Hyderabad"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
		//1st Row
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount0=itemListCount.size();
		
		System.err.println(itemcount0);
			
		for(int i=0 ; i < itemcount0 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
		
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
		workFlowHeaderChkBox.click();	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		
		
		// 2nd Row
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("BR COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
		
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
		workFlowHeaderChkBox.click();	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
		select2ndRow_7thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		
		// 3rd Row
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount5=itemListCount.size();
		
		System.err.println(itemcount5);
			
		for(int i=0 ; i < itemcount5 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("FIFO COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
		
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_5thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
		workFlowHeaderChkBox.click();	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
		select3rdRow_7thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
		select4thRow_1stColumn.click();		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount6=itemListCount.size();
		
		System.err.println(itemcount6);
			
		for(int i=0 ; i < itemcount6 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("WA COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
		
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
		select4thRow_5thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
		workFlowHeaderChkBox.click();	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
		select4thRow_7thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		/*
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
		select2ndRow_7thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
		select3rdRow_7thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);*/
		
		
		
		
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno1=documentNumberTxt.getAttribute("value");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		Thread.sleep(2000);
		
		click(billRefNewRefTxt);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
	
		boolean savingMessage1=checkVoucherSavingMessage(docno1);
	    
		Thread.sleep(2000);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		designWorkflowbtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		
		draggedPurchasesVouchersN.click();
		
		Thread.sleep(2000);
		
		Thread.sleep(2000);
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();
		
		if(cannotExceedTheBaseValueChkboxIsSelected.isSelected()==false)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cannotExceedTheBaseValueChkbox));
			cannotExceedTheBaseValueChkbox.click();
		}


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expMessage="WorkFlow Saved Successfully";
	  		
		String actMessage=checkValidationMessage(expMessage);
		  		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();
		
		Thread.sleep(2000);
		
		checkLogoutAndLogin();
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		LoginPage lp=new LoginPage(getDriver()); 
		
	    String unamelt="su";
	  
	    String pawslt="su";
	    
	    prongHornOn();
	    Thread.sleep(2000);
	      
	    lp.enterUserName(unamelt);
	    
	    lp.enterPassword(pawslt);
	    
	    lp.clickOnSignInBtn();*/
	    
	    Thread.sleep(2000);
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		grid_ChkBox1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomedeleteBtn));
		voucherHomedeleteBtn.click();
		
		if(getIsAlertPresent())
		{
			getWaitForAlert();
			
			getAlert().accept();
		}
		
		checkUserFriendlyMessage();
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		checkUserFriendlyMessage();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
		purchaseAccountTxt.sendKeys(Keys.SPACE);
		
		int count1=purchaseAccountListCount.size();
		
		System.err.println(count1);
		
		for(int i=0 ; i < count1 ;i++)
		{
			String data=purchaseAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Purchase"))
			{
				purchaseAccountListCount.get(i).click();
				
				break;
			}
		}
		
		purchaseAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		int countVendor1=vendorAccountListCount.size();
		
		System.err.println(countVendor1);
		
		for(int i=0 ; i < countVendor1 ;i++)
		{
			String data=vendorAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Vendor A"))
			{
				vendorAccountListCount.get(i).click();
				
				break;
			}
		}
		
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount1=departmentListCount.size();
		
		System.err.println(departmentcount1);
			
		for(int i=0 ; i < departmentcount1 ;i++)
		{
			String data=departmentListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("DUBAI"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehouseCount1=wareHouseListCount.size();
		
		System.err.println(warehouseCount1);
			
		for(int i=0 ; i < warehouseCount1 ;i++)
		{
			String data=wareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("DUBAI"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
		
		
		//1st Row
		
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
				select1stRow_1stColumn.click();		
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount7=itemListCount.size();
				
				System.err.println(itemcount7);
					
				for(int i=0 ; i < itemcount7 ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
				
				enter_ItemTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
				select1stRow_5thColumn.click();	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys("1");
				enter_Quantity.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
				workFlowHeaderChkBox.click();	
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
				workFlowOkBtn.click();	
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
				select1stRow_7thColumn.click();	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.sendKeys("10");
				enter_Rate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				
				
				
				// 2nd Row
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
				select2ndRow_1stColumn.click();		
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount8=itemListCount.size();
				
				System.err.println(itemcount8);
					
				for(int i=0 ; i < itemcount8 ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase("BR COGS ITEM"))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
				
				enter_ItemTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
				select2ndRow_5thColumn.click();	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys("1");
				enter_Quantity.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
				workFlowHeaderChkBox.click();	
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
				workFlowOkBtn.click();	
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
				select2ndRow_7thColumn.click();	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.sendKeys("10");
				enter_Rate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				
				
				// 3rd Row
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
				select3rdRow_1stColumn.click();		
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount9=itemListCount.size();
				
				System.err.println(itemcount9);
					
				for(int i=0 ; i < itemcount9 ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase("FIFO COGS ITEM"))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
				
				enter_ItemTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
				select3rdRow_5thColumn.click();	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys("1");
				enter_Quantity.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
				workFlowHeaderChkBox.click();	
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
				workFlowOkBtn.click();	
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
				select3rdRow_7thColumn.click();	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.sendKeys("10");
				enter_Rate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
				select4thRow_1stColumn.click();		
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount10=itemListCount.size();
				
				System.err.println(itemcount10);
					
				for(int i=0 ; i < itemcount10 ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase("WA COGS ITEM"))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
				
				enter_ItemTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
				select4thRow_5thColumn.click();	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys("2");
				enter_Quantity.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
				workFlowHeaderChkBox.click();	
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
				workFlowOkBtn.click();	
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
				select4thRow_5thColumn.click();	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys("2");
				enter_Quantity.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
				select4thRow_7thColumn.click();	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.sendKeys("10");
				enter_Rate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
		
		
		
		
		
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		Thread.sleep(2000);
		
		click(billRefNewRefTxt);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
	
		String expValidationMessage = "Link has already been consumed by another voucher. Please re-check the links.";
		String actValidationMessage = checkValidationMessage(expValidationMessage);
		
		System.out.println("************************************* checkCannotExceedTheBaseValueOption  *********************************");
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		System.out.println("SavingMessage1  :  "+savingMessage1 +" Value Expected : "+"TRUE");
		System.out.println("ValidationMessage : "+actValidationMessage+" Value Expected : "+expValidationMessage);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		designWorkflowbtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		
		draggedPurchasesVouchersN.click();		
		Thread.sleep(2000);
		
		Thread.sleep(2000);
		
		
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");
		Thread.sleep(1000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();
		
		if(cannotExceedTheBaseValueChkboxIsSelected.isSelected()==true)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cannotExceedTheBaseValueChkbox));
			cannotExceedTheBaseValueChkbox.click();
		}


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expMessage1="WorkFlow Saved Successfully";
	  		
		String actMessage1=checkValidationMessage(expMessage1);
		  		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();
		
		checkEraseAllTransactionsLogoutAndLogin();
		
		if (savingMessage==true && savingMessage1==true && actValidationMessage.equalsIgnoreCase(expValidationMessage))
		{
			System.out.println("Voucher Saved");
			return true;
		}
		else
		{
			System.out.println("Voucher Not Saved");
			return false;
		}
	}
	
	
	public boolean checkCannotExceedTheBaseValueOptionForMultipleRowsWithSameItem1() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		 vendorAccountTxt.sendKeys(Keys.SPACE);
		 
		 Thread.sleep(2000);
		 
		 int vendorcount=vendorAccountListCount.size();
		 
		 System.err.println(vendorcount);
		 
		 for(int i=0 ; i < vendorcount ;i++)
		 {
			 String data=vendorAccountListCount.get(i).getText();
			 
			 if(data.equalsIgnoreCase("Vendor A"))
			 {
				 vendorAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
		
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
		
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("HYDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount=itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);
		
		/*contextClick(firstRowIndex);
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(duplicateRowBtn));
		duplicateRowBtn.click();
		
		Thread.sleep(1500);
		
		System.out.println("2nd Row Added");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(duplicateRowBtn));
		duplicateRowBtn.click();
		
		Thread.sleep(1500);
		
		System.out.println("3rd Row Added");
		
		Thread.sleep(1000);*/
		
		
	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
		purchaseAccountTxt.sendKeys(Keys.SPACE);
		
		int count=purchaseAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=purchaseAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Purchase"))
			{
				purchaseAccountListCount.get(i).click();
				
				break;
			}
		}
		
		purchaseAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		int countVendor=vendorAccountListCount.size();
		
		System.err.println(countVendor);
		
		for(int i=0 ; i < countVendor ;i++)
		{
			String data=vendorAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Vendor A"))
			{
				vendorAccountListCount.get(i).click();
				
				break;
			}
		}
		
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("DUBAI"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehouseCount=wareHouseListCount.size();
		
		System.err.println(warehouseCount);
			
		for(int i=0 ; i < warehouseCount ;i++)
		{
			String data=wareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Hyderabad"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount0=itemListCount.size();
		
		System.err.println(itemcount0);
			
		for(int i=0 ; i < itemcount0 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
		
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
		workFlowHeaderChkBox.click();	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno1=documentNumberTxt.getAttribute("value");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		Thread.sleep(2000);
		
		click(billRefNewRefTxt);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
	
		boolean savingMessage1=checkVoucherSavingMessage(docno1);
	    
		Thread.sleep(2000);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		designWorkflowbtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		
		draggedPurchasesVouchersN.click();
		
		Thread.sleep(2000);
		
		Thread.sleep(2000);
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();
		
		if(cannotExceedTheBaseValueChkboxIsSelected.isSelected()==false)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cannotExceedTheBaseValueChkbox));
			cannotExceedTheBaseValueChkbox.click();
		}


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expMessage="WorkFlow Saved Successfully";
	  		
		String actMessage=checkValidationMessage(expMessage);
		  		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();
		
		Thread.sleep(2000);
		
		checkLogoutAndLogin();
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		LoginPage lp=new LoginPage(getDriver()); 
		
	    String unamelt="su";
	  
	    String pawslt="su";
	    
	    prongHornOn();
	    Thread.sleep(2000);
	      
	    lp.enterUserName(unamelt);
	    
	    lp.enterPassword(pawslt);
	    
	    lp.clickOnSignInBtn();
	    
	    Thread.sleep(2000);*/
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		grid_ChkBox1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomedeleteBtn));
		voucherHomedeleteBtn.click();
		
		if(getIsAlertPresent())
		{
			getWaitForAlert();
			
			getAlert().accept();
		}
		
		checkUserFriendlyMessage();
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		checkUserFriendlyMessage();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
		purchaseAccountTxt.sendKeys(Keys.SPACE);
		
		int count1=purchaseAccountListCount.size();
		
		System.err.println(count1);
		
		for(int i=0 ; i < count1 ;i++)
		{
			String data=purchaseAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Purchase"))
			{
				purchaseAccountListCount.get(i).click();
				
				break;
			}
		}
		
		purchaseAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		int countVendor1=vendorAccountListCount.size();
		
		System.err.println(countVendor1);
		
		for(int i=0 ; i < countVendor1 ;i++)
		{
			String data=vendorAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Vendor A"))
			{
				vendorAccountListCount.get(i).click();
				
				break;
			}
		}
		
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount1=departmentListCount.size();
		
		System.err.println(departmentcount1);
			
		for(int i=0 ; i < departmentcount1 ;i++)
		{
			String data=departmentListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("DUBAI"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehouseCount1=wareHouseListCount.size();
		
		System.err.println(warehouseCount1);
			
		for(int i=0 ; i < warehouseCount1 ;i++)
		{
			String data=wareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("DUBAI"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
		
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
		workFlowHeaderChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_5thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("2");
		enter_Quantity.sendKeys(Keys.TAB);*/
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno2=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		Thread.sleep(2000);
		
		click(billRefNewRefTxt);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
	
		/*String expValidationMessage = "Link has already been consumed by another voucher. Please re-check the links.";
		String actValidationMessage = checkValidationMessage(expValidationMessage);*/
		
		
		boolean savingMessage2=checkVoucherSavingMessage(docno2);
		
		click(previousBtn);
		
		checkValidationMessage("Voucher loaded successfully");
		
		click(new_Suspend);
		
		checkValidationMessage("Voucher loaded successfully");
		
		click(new_CloseBtn);
		
		Thread.sleep(2000);
		
		String actStatus   =voucherHomePgeSupendedStatus.getText();
		String expStatus   ="True";
		
		System.out.println("actStatus   :"+actStatus);
		System.out.println("expStatus   :"+expStatus);
		
		Thread.sleep(2000);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
		purchaseAccountTxt.sendKeys(Keys.SPACE);
		
		int count2=purchaseAccountListCount.size();
		
		System.err.println(count2);
		
		for(int i=0 ; i < count2 ;i++)
		{
			String data=purchaseAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Purchase"))
			{
				purchaseAccountListCount.get(i).click();
				
				break;
			}
		}
		
		purchaseAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		int countVendor2=vendorAccountListCount.size();
		
		System.err.println(countVendor2);
		
		for(int i=0 ; i < countVendor2 ;i++)
		{
			String data=vendorAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Vendor A"))
			{
				vendorAccountListCount.get(i).click();
				
				break;
			}
		}
		
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount2=departmentListCount.size();
		
		System.err.println(departmentcount2);
			
		for(int i=0 ; i < departmentcount2 ;i++)
		{
			String data=departmentListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("DUBAI"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehouseCount2=wareHouseListCount.size();
		
		System.err.println(warehouseCount2);
			
		for(int i=0 ; i < warehouseCount2 ;i++)
		{
			String data=wareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("DUBAI"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount2=itemListCount.size();
		
		System.err.println(itemcount2);
			
		for(int i=0 ; i < itemcount2 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
		
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
		workFlowHeaderChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_5thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("2");
		enter_Quantity.sendKeys(Keys.TAB);*/
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno3=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		Thread.sleep(2000);
		
		click(billRefNewRefTxt);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
	
		/*String expValidationMessage = "Link has already been consumed by another voucher. Please re-check the links.";
		String actValidationMessage = checkValidationMessage(expValidationMessage);*/
		
		boolean savingMessage3=checkVoucherSavingMessage(docno3);
		
		click(new_CloseBtn);
		
		Thread.sleep(2000);
		
		doubleClick(SupendedVoucherCheckBox);
		checkValidationMessage("Voucher loaded successfully");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		Thread.sleep(2000);
		
		click(billRefNewRefTxt);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
		
		String expValidationMessage = "Link has already been consumed by another voucher. Please re-check the links.";
		String actValidationMessage = checkValidationMessage(expValidationMessage);
		
		
		
		
		
		
		
		
		System.out.println("************************************* checkCannotExceedTheBaseValueOption  *********************************");
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		System.out.println("SavingMessage1  :  "+savingMessage1 +" Value Expected : "+"TRUE");
		System.out.println("SavingMessage2  :  "+savingMessage2 +" Value Expected : "+"TRUE");
		System.out.println("SavingMessage3  :  "+savingMessage3 +" Value Expected : "+"TRUE");
		System.out.println("ValidationMessage1 : "+actStatus+" Value Expected : "+expStatus);
		System.out.println("ValidationMessage2 : "+actValidationMessage+" Value Expected : "+expValidationMessage);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		designWorkflowbtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		
		draggedPurchasesVouchersN.click();
		
		Thread.sleep(2000);
		
		Thread.sleep(2000);
		
		
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");
		Thread.sleep(1000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();
		
		if(cannotExceedTheBaseValueChkboxIsSelected.isSelected()==true)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cannotExceedTheBaseValueChkbox));
			cannotExceedTheBaseValueChkbox.click();
		}


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expMessage1="WorkFlow Saved Successfully";
	  		
		String actMessage1=checkValidationMessage(expMessage1);
		  		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();
		
		checkEraseAllTransactionsLogoutAndLogin();
		
		if (savingMessage==true && savingMessage1==true && actValidationMessage.equalsIgnoreCase(expValidationMessage)
				&& savingMessage2==true && savingMessage3==true && actStatus.equalsIgnoreCase(expStatus))
		{
			System.out.println("Voucher Saved");
			return true;
		}
		else
		{
			System.out.println("Voucher Not Saved");
			return false;
		}
	}
	
	public boolean checkCannotExceedTheBaseValueOptionOnEditing() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		designWorkflowbtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(3000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		
		draggedPurchasesVouchersN.click();
		
		Thread.sleep(2000);

		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();
		
		if(cannotExceedTheBaseValueChkboxIsSelected.isSelected()==false)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cannotExceedTheBaseValueChkbox));
			cannotExceedTheBaseValueChkbox.click();
		}


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expMessage="WorkFlow Saved Successfully";
	  		
		String actMessage=checkValidationMessage(expMessage);
		  		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();
		
		Thread.sleep(2000);
		
		checkLogoutAndLogin();
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		LoginPage lp=new LoginPage(getDriver()); 
		
	    String unamelt="su";
	  
	    String pawslt="su";
	    
	    prongHornOn();
	    Thread.sleep(2000);
	      
	    lp.enterUserName(unamelt);
	    
	    lp.enterPassword(pawslt);
	    
	    lp.clickOnSignInBtn();
	    
	    Thread.sleep(2000);*/
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		 vendorAccountTxt.sendKeys(Keys.SPACE);
		 
		 Thread.sleep(2000);
		 
		 int vendorcount=vendorAccountListCount.size();
		 
		 System.err.println(vendorcount);
		 
		 for(int i=0 ; i < vendorcount ;i++)
		 {
			 String data=vendorAccountListCount.get(i).getText();
			 
			 if(data.equalsIgnoreCase("Vendor A"))
			 {
				 vendorAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		pvWareHouseTxt.sendKeys(Keys.BACK_SPACE);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
		
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
		
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("HYDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount=itemListCount.size();
		
		System.err.println(itemcount);
			
		for(int i=0 ; i < itemcount ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.click();
		enter_Discount.sendKeys(Keys.TAB);
	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
		purchaseAccountTxt.sendKeys(Keys.SPACE);
		
		int count=purchaseAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=purchaseAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Purchase"))
			{
				purchaseAccountListCount.get(i).click();
				
				break;
			}
		}
		
		purchaseAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		vendorAccountTxt.sendKeys(Keys.SPACE);
		
		int countVendor=vendorAccountListCount.size();
		
		System.err.println(countVendor);
		
		for(int i=0 ; i < countVendor ;i++)
		{
			String data=vendorAccountListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Vendor A"))
			{
				vendorAccountListCount.get(i).click();
				
				break;
			}
		}
		
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("DUBAI"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehouseCount=wareHouseListCount.size();
		
		System.err.println(warehouseCount);
			
		for(int i=0 ; i < warehouseCount ;i++)
		{
			String data=wareHouseListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Hyderabad"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount0=itemListCount.size();
		
		System.err.println(itemcount0);
			
		for(int i=0 ; i < itemcount0 ;i++)
		{
			String data=itemListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
		
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
		workFlowHeaderChkBox.click();	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno1=documentNumberTxt.getAttribute("value");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		Thread.sleep(2000);
		
		click(billRefNewRefTxt);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
	
		boolean savingMessage1=checkVoucherSavingMessage(docno1);
		
		Thread.sleep(2000);
		
		click(previousBtn);
		
		checkValidationMessage("Voucher loaded successfully");
	    
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("2");
		enter_Quantity.sendKeys(Keys.TAB);
		
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBox));
		workFlowHeaderChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();	
		
		Thread.sleep(1200);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("2");
		enter_Quantity.sendKeys(Keys.TAB);*/
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vouchersaveBtn));
		vouchersaveBtn.click();
		
		Thread.sleep(2000);
		
		click(billRefNewRefTxt);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
	
		String expValidationMessage = "Link has already been consumed by another voucher. Please re-check the links.";
		String actValidationMessage = checkValidationMessage(expValidationMessage);
		
		System.out.println("************************************* checkCannotExceedTheBaseValueOption  *********************************");
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		System.out.println("SavingMessage1  :  "+savingMessage1 +" Value Expected : "+"TRUE");
		System.out.println("ValidationMessage : "+actValidationMessage+" Value Expected : "+expValidationMessage);
		
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		designWorkflowbtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		
		draggedPurchasesVouchersN.click();
		
		Thread.sleep(2000);
		
		js.executeScript("document.querySelector('#line3 > path').setAttribute('stroke-width', '12')");
		Thread.sleep(1000);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link3TO4));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link3TO4));
		link3TO4.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();
		
		if(cannotExceedTheBaseValueChkboxIsSelected.isSelected()==true)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cannotExceedTheBaseValueChkbox));
			cannotExceedTheBaseValueChkbox.click();
		}


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expMessage1="WorkFlow Saved Successfully";
	  		
		String actMessage1=checkValidationMessage(expMessage1);
		  		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();
		
		checkEraseAllTransactionsLogoutAndLogin();
		
		if (savingMessage==true && savingMessage1==true && actValidationMessage.equalsIgnoreCase(expValidationMessage))
		{
			System.out.println("Voucher Saved");
			return true;
		}
		else
		{
			System.out.println("Voucher Not Saved");
			return false;
		}
	}
	
	
	
	
	@FindBy(xpath="//*[@id='tblBodyTransRender']/tr[1]//td[12]")
	private static WebElement  voucherHomePgeSupendedStatus;
	
	
	@FindBy(xpath="//td[text()='True']//..//td[2]/input")
	private static WebElement  SupendedVoucherCheckBox;

	public static boolean checkCD()
			throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException {
		LoginPage lp = new LoginPage(getDriver());

		String unamelt = "su";

		String pawslt = "su";

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(5000);

		if (serachMenuTextHomePage.isDisplayed()) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkLogout()
			throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
		userNameDisplayLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(2000);

		System.out.println("Logout  Successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		boolean actUserName = username.isDisplayed();
		boolean expUserName = true;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		boolean actPassword = password.isDisplayed();
		boolean expPassword = true;

		System.out.println("*************************CheckLogout***************************");

		System.out.println("UserName is Displaying : " + actUserName + "  Value Expected  " + expUserName);
		System.out.println("Password is Displaying : " + actPassword + "  Value Expected  " + expPassword);

		if (actUserName == expUserName && actPassword == expPassword) {
			return true;
		} else {
			return false;
		}
	}

	public DesignWorkFLowOptionsPage(WebDriver driver) {

		PageFactory.initElements(driver, this);

	}
	
	
	

//  TransactionAuthorizationDefinitionOptionsPage Elements

	@FindBy(xpath="//*[@id='id_Authorization_container']/div/div/nav/div[1]/a/div/span[2]")
	public static WebElement transAuthorLabel; 
	
	@FindBy(xpath="//*[@id='txtDoc']")
	public static WebElement documentNameDropdown; 
	
	    @FindBy(xpath="//*[@id='id_menu_tree_Receipts']/a/span")
	    public static WebElement receipts; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Payments']/a/span")
	    public static WebElement payments; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Petty Cash']/a/span")
	    public static WebElement pettyCash; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Post-Dated Receipts']/a/span")
	    public static WebElement postDatedReceipts; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Post-Dated Payments']/a/span")
	    public static WebElement postDatedPayments; 
		
	    @FindBy(xpath="//span[@class='treemenu_item_content_group_text col-xs-9'][contains(text(),'Purchases Vouchers')]")
	    public static WebElement purchasesVouchers; 
	    
		    @FindBy(xpath="//*[@id='id_menu_tree_Stock adjustment']/a/span")
		    public static WebElement stockAdjustment; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Purchases Returns']/a/span")
	    public static WebElement purchasesReturns; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Purchases Orders']/a/span")
	    public static WebElement purchasesOrders; 
		
		    @FindBy(xpath="//*[@id='id_menu_tree_Job orders']/a/span")
		    public static WebElement jobOrders; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Material Receipt Notes']/a/span")
	    public static WebElement materialReceiptNotes; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Sales Invoices']/a/span")
	    public static WebElement salesInvoices; 
		
		    @FindBy(xpath="//*[@id='id_menu_tree_Cash Sales']/a/span")
		    public static WebElement cashSales; 
			
		    @FindBy(xpath="//*[@id='id_menu_tree_Hire-Purchase Sales']/a/span")
		    public static WebElement hirePurchaseSales; 
			
		    @FindBy(xpath="//*[@id='id_menu_tree_POS Sales']/a/span")
		    public static WebElement posSales; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Sales Returns']/a/span")
	    public static WebElement salesReturns; 
		
	    @FindBy(xpath="//a[@id='2017']//span[contains(text(),'Sales Orders')]")
	    public static WebElement salesOrders; 
		
		    @FindBy(xpath="//*[@id='id_menu_tree_Production Order']/a/span")
		    public static WebElement productionOrder; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Delivery Notes']/a/span")
	    public static WebElement deliveryNotes; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Non-Standard Journal Entries']/a/span")
	    public static WebElement nonStandardJournalEntries; 
		
		    @FindBy(xpath="//*[@id='id_menu_tree_Inter-Departmental JV']/a/span")
		    public static WebElement interDepartmentalJV; 
			
		    @FindBy(xpath="//*[@id='id_menu_tree_Debit Notes (Linewise)']/a/span")
		    public static WebElement debitNotes_LineWise; 
			
		    @FindBy(xpath="//*[@id='id_menu_tree_Credit Notes (Linewise)/Payroll']/a/span")
		    public static WebElement creditNotes_Linewise_Payroll ; 
			
		    @FindBy(xpath="//*[@id='id_menu_tree_Fixed Asset Depreciation Voucher']/a/span")
		    public static WebElement fixedAssetDepreciationVoucher; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Journal Entries']/a/span")
	    public static WebElement journalEntries; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Debit Notes']/a/span")
	    public static WebElement debitNotes; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Credit Notes']/a/span")
	    public static WebElement creditNotes; 
		
		    @FindBy(xpath="//*[@id='id_menu_tree_Payroll Postings']/a/span")
		    public static WebElement payrollPostings; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Opening Balances']/a/span")
	    public static WebElement openingBalances; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Shortages in Stock']/a/span")
	    public static WebElement shortagesInStock; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Excesses in Stocks']/a/span")
	    public static WebElement excessesInStocks; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Stock Transfers']/a/span")
	    public static WebElement stockTransfers; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Opening Stocks']/a/span")
	    public static WebElement openingStocks; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Issues to Production']/a/span")
	    public static WebElement issuesToProduction; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Receipts from production']/a/span")
	    public static WebElement receiptsFromProduction; 
		
		    @FindBy(xpath="//*[@id='id_menu_tree_Returns from Shop Floor']/a/span")
		    public static WebElement returnsFromShopFloor; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Job Work Issues']/a/span")
	    public static WebElement jobWorkIssues; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Job Work Receipts']/a/span")
	    public static WebElement jobWorkReceipts; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Purchases Quotations']/a/span")
	    public static WebElement purchasesQuotations; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Sales Quotations']/a/span")
	    public static WebElement salesQuotations; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Job Order']/a/span")
	    public static WebElement jobOrder; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Production Process']/a/span")
	    public static WebElement productionProcess; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Material Requisition']/a/span")
	    public static WebElement materialRequisition; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Request For Quote']/a/span")
	    public static WebElement requestForQuote; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Forex JV']/a/span")
	    public static WebElement forexJV; 

	    
	    @FindBy(xpath="//a[contains(text(),'Miscellaneous')]")
	    public static WebElement  miscellaneousTab;
	    
	    @FindBy(xpath="//button[contains(text(),'Posting Details')]")
	    public static WebElement  postingDetailsBtn;
	    
	    
	    		
	    @FindBy(xpath="//*[@id='id_misc_updatestock_section']/span")
	    public static WebElement updateStockChkBox;

	   /* @FindBy(xpath="//span[@id='updateButton']")
   	public static WebElement  updateBtn;

   	@FindBy(xpath="//i[@class='icon-close icon-font6']")
   	public static WebElement  closeBtn;*/

	    
	    
	    @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr/td")
		 public static List<WebElement> voucherGridBodyList;
	    
	    
	    
	    @FindBy(xpath="//tbody[@id='LandingGridBody']/tr")
		public static List<WebElement> stockLedgerHometableRowCount;
	    
	    @FindBy(xpath="//div[@id='spnhiererchy']//select[@id='iTreeId']")
		public static WebElement sl_Dropdown1;
		
		@FindBy(xpath="//div[@id='spnhiererchy']//select[@id='iTreeViewId']")
		public static WebElement sl_Dropdown2;
		
		@FindBy(xpath="//label[@id='oncheckaccorderan']")
		public static WebElement sl_oncheckBtn;
		
		@FindBy(xpath="//input[@id='txtsrch-term']")
		public static WebElement sl_SearhItemTxt;
		
		@FindBy(xpath="//i[contains(@class,'icon-search theme_color-inverse')]")
		public static WebElement sl_SearchBtn;
		
		@FindBy(xpath="//input[@id='cmbUserTypeMaster']")
		public static WebElement sl_MasterTypeTxt;
		
		@FindBy(xpath="//span[contains(@class,'icon-font6 icon-external-module theme_icon-color')]")
		public static WebElement sl_AutoAdjustColumnsBtn;
		
		@FindBy(xpath="//a[contains(@class,'clsMasterName')][contains(text(),'ITEMS GROUP')]")
		public static WebElement sl_ItemGroupsBtn;
		
		@FindBy(xpath="//input[@id='liSelectAllMasters']")
		public static WebElement sl_HeaderSelectChkBox;
		
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-schedule')]")
		public static WebElement sl_ScheduleBtn;
		
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-custamize')]")
		public static WebElement sl_CustomizeBtn;
		
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-filter')]")
		public static WebElement sl_FilterBtn;
		
		@FindBy(xpath="//i[@class='icon-ok hiconright2']")
		public static WebElement sl_OkBtn;
		
		@FindBy(xpath="(//i[@class='icon-close hiconright2'])[1]")
		public static WebElement sl_CloseBtn;
		
		@FindBy(xpath="//select[@id='DateOptions_']")
		public static WebElement sl_DateOptionDropdown;
		
		@FindBy(xpath="//input[@id='id_starting_date_']")
		public static WebElement sl_StartDateTxt;
		
		@FindBy(xpath="//td[@id='id_starting_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
		public static WebElement sl_StartDateCalanderBtn;
		
		@FindBy(xpath="//input[@id='id_ending_date_']")
		public static WebElement sl_EndDateTxt;
		
		@FindBy(xpath="//td[@id='id_ending_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
		public static WebElement sl_EndDateCalanderBtn;
		
		@FindBy(xpath="//input[@id='RITCheckbox__3']")
		public static WebElement sl_IncludeServiceTypeItemChkBox;
		
		@FindBy(xpath="//select[@id='RITLayout_']")
		public static WebElement sl_LayoutDropdown;
		
		@FindBy(xpath="//select[@id='RITOutput_']")
		public static WebElement sl_OutputDropdown;
		
		@FindBy(xpath="//input[@id='selectAllMasters_']")
		public static WebElement sl_SelectAllItemsChkBox;
		
		@FindBy(xpath="//div[contains(@class,'first')]//input[contains(@class,'btn btn-xs Fbutton')]")
		public static WebElement sl_FirstBtn;
		
		@FindBy(xpath="//div[contains(@class,'prev')]//input[contains(@class,'btn btn-xs Fbutton')]")
		public static WebElement sl_PreviousBtn;
		
		@FindBy(xpath="//input[@id='btn1']")
		public static WebElement sl_PageBtn;
		
		@FindBy(xpath="//div[contains(@class,'next')]//input[contains(@class,'btn btn-xs Fbutton')]")
		public static WebElement sl_NextBtn;
		
		@FindBy(xpath="//div[contains(@class,'End')]//input[contains(@class,'btn btn-xs Fbutton')]")
		public static WebElement sl_EndBtn;
		
		@FindBy(xpath="//tr[1]//td[8]//div[1]//label[1]")
		public static WebElement sl_1stRowChkBox;
		
		@FindBy(xpath="//tr[2]//td[8]//div[1]//label[1]")
		public static WebElement sl_2ndRowChkBox;
		
		@FindBy(xpath="//div[@id='dvReportDetails']//table/tbody")
		public static WebElement report_Body;
		
		@FindBy(xpath="//input[@id='RITTable__1']")
		public static WebElement listingOfDocWorkFlowTxt;
		

		
		
		
		
		
		// Inventory Reports
		
		@FindBy(xpath="//a[@id='200']//span[contains(text(),'Reports')]")
		public static WebElement  inventoryReportsMenu; 
		
			@FindBy(xpath="//span[contains(text(),'Item Query')]")
			public static WebElement itemQuery;
			
			@FindBy(xpath="//span[contains(text(),'Stock Ledger')]")
			public static WebElement  stockLedger;
			
			@FindBy(xpath="//span[contains(text(),'Opening Stocks Register')]")
			public static WebElement  openingStocksRegister;
			
			@FindBy(xpath="//span[contains(text(),'Stock Statement')]")
			public static WebElement  stockStatement;
					
			@FindBy(xpath="//*[@id='575']/span")
			public static WebElement  stockMovement;
			
			@FindBy(xpath="//*[@id='576']/span")
			public static WebElement  multiLevelStockMovement;
			
			@FindBy(xpath="//span[contains(text(),'Virtual Stock Analysis')]")
			public static WebElement  virtualStockAnalysis;
			
			@FindBy(xpath="//a[@id='578']")
			public static WebElement  stockValuation;
			
			@FindBy(xpath="//a[@id='656']")
			public static WebElement  stockReportByTag;
			
			@FindBy(xpath="//a[@id='579']//span[contains(text(),'ABC Analysis')]")
			public static WebElement  abcAnalysis;
			
			@FindBy(xpath="//span[contains(text(),'Stock Analysis by Batch')]")
			public static WebElement  stockAnalysisByBatch;
			
			@FindBy(xpath="//span[contains(text(),'Stock Analysis by RMA')]")
			public static WebElement  stockAnalysisByRMA;
			
			@FindBy(xpath="//a[@id='540']//span[contains(text(),'Bins Report')]")
			public static WebElement  binsReportMenu;
			
				@FindBy(xpath="//*[@id='587']/span")
				public static WebElement  stockDetailsByBins;
			
				@FindBy(xpath="//*[@id='588']/span")
				public static WebElement  stockBalancesByBins;
				
				@FindBy(xpath="//*[@id='589']/span")
				public static WebElement  stockBalancesByItemByBins;
				
				@FindBy(xpath="//span[contains(text(),'Expired Stock by Bins')]")
				public static WebElement  expiredStockByBins;		
			
			@FindBy(xpath="//span[contains(text(),'Stock balance by warehouse')]")
			public static WebElement  stockBalanceByWarehouse;
			
			@FindBy(xpath="//span[contains(text(),'Stock ageing analysis')]")
			public static WebElement  stockAgeingAnalysisMenu;
				
				@FindBy(xpath="//*[@id='582']/span")
				public static WebElement  ageingAnalysis;
				
				@FindBy(xpath="//*[@id='622']/span")
				public static WebElement  ageingAnalysisByBatch;
				
				@FindBy(xpath="//*[@id='623']/span")
				public static WebElement  ageingAnalysisByRMA;		
				
				@FindBy(xpath="//*[@id='591']/span")
				public static WebElement  ageingStockByBins;
						
				@FindBy(xpath="//*[@id='646']/span")
				public static WebElement  ageingByItemByBins;		

			@FindBy(xpath="//span[contains(text(),'Reorder Report')]")
			public static WebElement reorderReport;
			
			@FindBy(xpath="//a[@id='584']//span[contains(text(),'Fast Moving Item')]")
			public static WebElement  fastMovingItem;
					
			@FindBy(xpath="//a[@id='585']//span[contains(text(),'Slow Moving Item')]")
			public static WebElement  slowMovingItem;
			
			@FindBy(xpath="//span[contains(text(),'Peak/Low Balances')]")
			public static WebElement  peakORLowBalances;
			
			@FindBy(xpath="//span[contains(text(),'Best Selling Item')]")
			public static WebElement  bestSellingItem;
		
			@FindBy(xpath="//span[contains(text(),'Raise Indent Item with Low Stock')]")
			public static WebElement  raiseIndentItemWithLowStock;
			
			@FindBy(xpath="//span[contains(text(),'Stock transfer report')]")
			public static WebElement  stockTransferReport;
			
			@FindBy(xpath="//span[contains(text(),'Raise request for quote')]")
			public static WebElement  raiseRequestForQuote;
			
			@FindBy(xpath="//span[contains(text(),'Stock reservation report')]")
			public static WebElement  stockReservationReport;
			
			@FindBy(xpath="//span[contains(text(),'Transaction type-wise stock report')]")
			public static WebElement  transactionTypeWiseStockReport;
			
			@FindBy(xpath="//span[contains(text(),'Actual consumption report')]")
			public static WebElement  actualConsumptionReport;
		
		@FindBy(xpath="//span[contains(text(),'Order Management')]")
		public static WebElement  orderManagementMenu; 

			@FindBy(xpath="//*[@id='600']/span")
			public static WebElement  analysisOfLinkedORUnlinkedDocumentsMenu;
					
				@FindBy(xpath="//*[@id='601']/span")
				public static WebElement  listingOfDocuments;
				
				@FindBy(xpath="//*[@id='602']/span")
				public static WebElement listingOfDocumentsByDueDate;
						
				@FindBy(xpath="//*[@id='603']/span")
				public static WebElement  ageingOfPendingDocuments;
				
				@FindBy(xpath="//*[@id='604']/span")
				public static WebElement  ageingofPendingDocumentsByDueDate;
				
				@FindBy(xpath="//*[@id='624']/span")
				public static WebElement  linkChainAnalysis;
				
				@FindBy(xpath="//*[@id='657']/span")
				public static WebElement  pendingVoucherReport;
			
			@FindBy(xpath="//*[@id='201']/span")
			public static WebElement  quotationAnalysis;
			
			@FindBy(xpath="//*[@id='555']/span")
			public static WebElement  purchasesQuotation;
			
			@FindBy(xpath="//*[@id='556']/span")
			public static WebElement  salesQuotation;
			
			@FindBy(xpath="//*[@id='574']/span")
			public static WebElement  lowestQuotation;
			
			
		
		
		
		////////

		@FindBy(xpath="//i[contains(@class,'theme_button_color dropdown-toggle')]")
		public static WebElement report_sortingBtn;
				
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-refresh')]")
		public static WebElement report_RefreshBtn;
				
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-print')]")
		public static WebElement report_PrintBtn;
				
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-export')]")
		public static WebElement report_ExportBtn;
				
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-graph ImagesinArabic')]")
		public static WebElement report_GraphBtn;
				
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-backtrack')]")
		public static WebElement report_BackTrackBtn;
				
		@FindBy(xpath="//span[@id='reportCustomize_']//i[contains(@class,'icon-font6 icon-custamize')]")
		public static WebElement report_ReportCustomizeBtn;
				
		@FindBy(xpath="//span[@id='filterIcon_']//i[contains(@class,'icon-font6 icon-filter')]")
		public static WebElement report_FilterBtn;
		
		@FindBy(xpath="//span[@id='idFilterCustomizeIcon']")
		public static WebElement  report_FilterCustomizeBtn;
		
		@FindBy(xpath="//span[@id='a']")
		public static WebElement  report_Filter_FilterBtn;
		
		@FindBy(xpath="//*[@id='551_0_AdvanceFilter']/table/tbody/tr/td[1]/select")
		public static WebElement  reportsAdvanced_WhereDropDown;
		
		@FindBy(xpath="//tbody//input[@placeholder='Select Field']")
		public static WebElement  reportsAdvanced_SelectFielddropdown;
		
		@FindBy(xpath="//table/tbody/tr/td[3]/select")
		public static WebElement  reportsAdvanced_SelectOperatorDropDown;
		
		@FindBy(xpath="//table/tbody/tr/td[4]/select")
		public static WebElement  reportsAdvanced_ComparewithDropDown;
		
		@FindBy(xpath="//table/tbody/tr/td[5]/input")
		public static WebElement  reportsAdvanced_ValueTxt;
		
		@FindBy(xpath="//input[@id='advancefilter_master_551_0']")
		public static WebElement  reportsAdvanced_EnterValue;
		
		@FindBy(xpath="//table/tbody/tr/td[7]/span")
		public static WebElement  reportsAdvanced_AddIconBtn;
		
		@FindBy(xpath="//table/tbody/tr/td[6]/span")
		public static WebElement  reportsAdvanced_DeleteIcon1Btn;
		
		@FindBy(xpath="//table/tbody/tr[2]/td[6]/span")
		public static WebElement  reportsAdvanced__DeleteIcon2Btn;
		
		@FindBy(xpath="//div[@id='filterTree_551_0_AdvanceFilter']//a[@id='536870916']")
		public static WebElement  reports_AdvancedFilter_SelectField_WH_ExpandBtn;
		
		@FindBy(xpath="//div[@id='filterTree_551_0_AdvanceFilter']//a[@id='5058']")
		public static WebElement  reports_AdvancedFilter_SelectField_WH_NameBtn;
		
		@FindBy(xpath="//input[@id='chkSaveFilter']")
		public static WebElement  report_FilterSaveFilterPermanentlyChkBox;
		
		@FindBy(xpath="//span[@id='filterRefresh']")
		public static WebElement  report_Filter_RefreshBtn;
		
		@FindBy(xpath="//i[contains(@class,'icon icon-ok')]")
		public static WebElement  report_FilterOkBtn;
		
		@FindBy(xpath="//i[contains(@class,'icon icon-close')]")
		public static WebElement  report_FilterCancelBtn;
				
		@FindBy(xpath="//div[@id='dvfilter_']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
		public static WebElement report_FilterDownBtn;
				
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-analyze')]")
		public static WebElement report_AnalyzeBtn;
				
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-cross-reference')]")
		public static WebElement report_CrossReferenceBtn;
				
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-options')]")
		public static WebElement report_OptionsBtn;
				
		@FindBy(xpath="//div[@id='dvoptions_']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
		public static WebElement report_OptionsDownBtn;
				
		/*@FindBy(xpath="//span[@id='reportClose_']//i[contains(@class,'icon-font6 icon-close')]")
		public static WebElement report_CloseBtn;
				
		@FindBy(xpath="//button[@id='frstPage_']")
		public static WebElement report_FirstBtn;
				
		@FindBy(xpath="//button[@id='prvPage_']")
		public static WebElement report_PreviousBtn;
				
		@FindBy(xpath="//button[@id='pgnumber_']")
		public static WebElement report_PageNoBtn;
				
		@FindBy(xpath="//button[@id='nxtPage_']")
		public static WebElement report_NextBtn;
				
		@FindBy(xpath="//button[@id='lstPage_']")
		public static WebElement report_LastBtn;*/
		
		@FindBy(xpath="(//i[@class='icon-close hiconright2'])[2]")
		public static WebElement report_CloseBtn;
				
		@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[1]")
		public static WebElement report_FirstBtn;
				
		@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[2]")
		public static WebElement report_PreviousBtn;
				
		@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[3]")
		public static WebElement report_PageNoBtn;
				
		@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[4]")
		public static WebElement report_NextBtn;
				
		@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[5]")
		public static WebElement report_LastBtn;
		
		@FindBy(xpath="//input[@id='txtSearchReport']")
		public static WebElement report_SearchTxt;
		
		

		@FindBy(xpath="//*[@id='trRender_0']/td[2]")
		public static WebElement sl_1stRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_0']/td[3]")
		public static WebElement sl_1stRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[4]")
		public static WebElement sl_1stRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[5]")
		public static WebElement sl_1stRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[6]")
		public static WebElement sl_1stRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[7]")
		public static WebElement sl_1stRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[8]")
		public static WebElement sl_1stRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[9]")
		public static WebElement sl_1stRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[10]")
		public static WebElement sl_1stRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[11]")
		public static WebElement sl_1stRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[12]")
		public static WebElement sl_1stRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[13]")
		public static WebElement sl_1stRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[14]")
		public static WebElement sl_1stRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[15]")
		public static WebElement sl_1stRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[16]")
		public static WebElement sl_1stRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[17]")
		public static WebElement sl_1stRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[18]")
		public static WebElement sl_1stRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[19]")
		public static WebElement sl_1stRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[20]")
		public static WebElement sl_1stRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[21]")
		public static WebElement sl_1stRow20thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[22]")
		public static WebElement sl_1stRow21thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[23]")
		public static WebElement sl_1stRow22thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[24]")
		public static WebElement sl_1stRow23thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[25]")
		public static WebElement sl_1stRow24thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[26]")
		public static WebElement sl_1stRow25thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[27]")
		public static WebElement sl_1stRow26thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[28]")
		public static WebElement sl_1stRow27thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[29]")
		public static WebElement sl_1stRow28thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[30]")
		public static WebElement sl_1stRow29thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[31]")
		public static WebElement sl_1stRow30thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[32]")
		public static WebElement sl_1stRow31thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[33]")
		public static WebElement sl_1stRow32thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[34]")
		public static WebElement sl_1stRow33thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[35]")
		public static WebElement sl_1stRow34thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[36]")
		public static WebElement sl_1stRow35thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[37]")
		public static WebElement sl_1stRow36thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[38]")
		public static WebElement sl_1stRow37thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[39]")
		public static WebElement sl_1stRow38thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[40]")
		public static WebElement sl_1stRow39thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[41]")
		public static WebElement sl_1stRow40thCol;
		
		
		
		
		@FindBy(xpath="//*[@id='trRender_1']/td[2]")
		public static WebElement sl_2ndRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_1']/td[3]")
		public static WebElement sl_2ndRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[4]")
		public static WebElement sl_2ndRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[5]")
		public static WebElement sl_2ndRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[6]")
		public static WebElement sl_2ndRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[7]")
		public static WebElement sl_2ndRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[8]")
		public static WebElement sl_2ndRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[9]")
		public static WebElement sl_2ndRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[10]")
		public static WebElement sl_2ndRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[11]")
		public static WebElement sl_2ndRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[12]")
		public static WebElement sl_2ndRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[13]")
		public static WebElement sl_2ndRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[14]")
		public static WebElement sl_2ndRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[15]")
		public static WebElement sl_2ndRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[16]")
		public static WebElement sl_2ndRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[17]")
		public static WebElement sl_2ndRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[18]")
		public static WebElement sl_2ndRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[19]")
		public static WebElement sl_2ndRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[20]")
		public static WebElement sl_2ndRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[21]")
		public static WebElement sl_2ndRow20thCol;
		
		
		
		
		
		
		
		@FindBy(xpath="//*[@id='trRender_2']/td[2]")
		public static WebElement sl_3rdRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_2']/td[3]")
		public static WebElement sl_3rdRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[4]")
		public static WebElement sl_3rdRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[5]")
		public static WebElement sl_3rdRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[6]")
		public static WebElement sl_3rdRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[7]")
		public static WebElement sl_3rdRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[8]")
		public static WebElement sl_3rdRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[9]")
		public static WebElement sl_3rdRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[10]")
		public static WebElement sl_3rdRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[11]")
		public static WebElement sl_3rdRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[12]")
		public static WebElement sl_3rdRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[13]")
		public static WebElement sl_3rdRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[14]")
		public static WebElement sl_3rdRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[15]")
		public static WebElement sl_3rdRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[16]")
		public static WebElement sl_3rdRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[17]")
		public static WebElement sl_3rdRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[18]")
		public static WebElement sl_3rdRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[19]")
		public static WebElement sl_3rdRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[20]")
		public static WebElement sl_3rdRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[21]")
		public static WebElement sl_3rdRow20thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[22]")
		public static WebElement sl_3rdRow21thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[23]")
		public static WebElement sl_3rdRow22thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[24]")
		public static WebElement sl_3rdRow23thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[25]")
		public static WebElement sl_3rdRow24thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[26]")
		public static WebElement sl_3rdRow25thCol;
		
	
		
		
		
	    
	
	//////Name Text Field   
		
	@FindBy(xpath="//*[@id='ctrlAuthorizationH']")
	public static WebElement nameTxt; 
	
	@FindBy(xpath="//*[@id='ctrlAuthorizationH_input_settings']/span")
	public static WebElement nameSettingBtn; 

	    @FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_heading']")
	    public static WebElement nameSettingPop_CustomizeDisplayColoumnLabel;
	
	    @FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_container']")
	    public static WebElement nameSettingPop_sAuthorizationTxt;
	
	    @FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_footer']/div/div/input[1]")
	    public static WebElement nameSettingPop_StandardFieldsBtn;
	
			@FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_standardfields_list']")
		    public static WebElement nameSettingPop_StandardFields_FiledDropdown;
		
			@FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_standardfields_header']")
		    public static WebElement nameSettingPop_StandardFields_HeaderTxt;
		
			@FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_standardfields_alignment']")
		    public static WebElement nameSettingPop_StandardFields_AlignmentDropdown;
		
			@FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_standardfields_width']")
		    public static WebElement nameSettingPop_StandardFields_WidthTxt;
		
			@FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_footer']/div/div/input[3]")
			public static WebElement nameSettingPop_StandardFields_OkBtn;
			
			@FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_footer']/div/div/input[4]")
			public static WebElement nameSettingPop_StandardFields_CancelBtn;
	
	    @FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_footer']/div/div/input[2]")
	    public static WebElement nameSettingPop_DeleteColoumnBtn;
	
	    @FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_footer']/div/div/input[3]")
	    public static WebElement nameSettingPop_OkBtn;
	
	    @FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_footer']/div/div/input[4]")
	    public static WebElement nameSettingPop_CancelBtn;
		
	@FindBy(xpath="//*[@id='chkActive']")
	public static WebElement activeChkBox;  
	
	@FindBy(xpath="//*[@id='chkAlwaysauthorizationstartsfromfirstlevel']")
	public static WebElement alwaysauthorizationstartsfromfirstlevelChkBox; 
		
	
	//Transaction Authorization Clear,Delete,Save,Cancel
	
	/*@FindBy(xpath="//*[@id='ulAuthBtns']/li[1]/span/i")
	public static WebElement clearbtn; 
	
	@FindBy(xpath="//span[@id='spndeleteProfile']")
	public static WebElement deleteBtn; 
	*/
	
	
	
	
	
	@FindBy(xpath="//*[@id='ulAuthBtns']/li[5]/span/i")
	public static WebElement tranAuthCancelBtn; 
		
	@FindBy(xpath="//*[@id='btnSaveAuthorization']")
	public static WebElement tranAuthSaveBtn; 
	
	//Action On Initial Rejection
	    
	@FindBy(xpath="//*[@id='chkFinancialAccountingMain']")
	public static WebElement financialAccountingChkBox; 
	
	@FindBy(xpath="//*[@id='chkBaseLinkMain']")
	public static WebElement linksBaseChkBox; 
	
	@FindBy(xpath="//*[@id='chkLinksMain']")
	public static WebElement linksChkBox; 
	
	@FindBy(xpath="//*[@id='spnAddLevel']/i")
	public static WebElement addLevelBtn; 
	
	@FindBy(xpath="//*[@id='spnAddParallel'']/i")
	public static WebElement addParallel;    
	
	@FindBy(xpath="//i[@id='id_StartNode']")
	public static WebElement startPointBtn; 
		
	
	//After Clicking On AddLevel/Add Parallel Button The Authorization Definition POp Rises--Related Fields 
	
	@FindBy(xpath="//*[@id='id_report_popup_heading']")
	public static WebElement authDefLabel; 
		
	@FindBy(xpath="//*[@id='id_report_popup_body']/div[2]/div/div[1]/ul/li[1]/a/span")
	public static WebElement conditionTab; 
		
	//Description Fields
	
	@FindBy(xpath="//*[@id='txtDescription']")
	public static WebElement descriptionTxt; 
		
	@FindBy(xpath="//*[@id='chkConditionNotRequired']")
	public static WebElement conditionNotRequiredChkBox; 

	
	@FindBy(xpath="//*[@id='chkCreditLimitExceeded']")
	public static WebElement creditLimitExceededChkBox; 
		
	@FindBy(xpath="//*[@id='chkBudgetExceeded']")
	public static WebElement budgetExceededChkBox; 
		
	@FindBy(xpath="//*[@id='chkNegativeCashCheck']")
	public static WebElement negativeCashCheckChkBox; 
		
	@FindBy(xpath="//*[@id='chkLineWiseAuthorization']")
	public static WebElement lineWiseAuthorizationChkBox; 
		
	@FindBy(xpath="//*[@id='chkCreditDaysExceeded']")
	public static WebElement creditDaysExceededChkBox; 
		
	@FindBy(xpath="//*[@id='chkNegativeStockCheck']")
	public static WebElement negativeStockCheckChkBox; 
		
	@FindBy(xpath="//*[@id='chkDateRange']")
	public static WebElement dateRangeChkBox; 
		
	@FindBy(xpath="//*[@id='dpFromDate']")
	public static WebElement fromDateTxt; 
		
	@FindBy(xpath="//*[@id='dpToDate']")
	public static WebElement toDateTxt; 
	
	@FindBy(xpath="//*[@id='chkTimeRange']")
	public static WebElement timeRangeChkBox;
		
	@FindBy(xpath="//*[@id='chkTimeRange']")
	public static WebElement fromTimeTxt; 
		
	@FindBy(xpath="//*[@id='tpToTime']")
	public static WebElement totimeTxt; 
		
	//Condition------Condition Fields
				   
	
	
	
	
	    //Selection Field  Inner Fields
	
		@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='1']")
		public static WebElement  DocNo;
		
		@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='2']")
		public static WebElement  Date;
		
		@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='80']")
		public static WebElement  Time;
					
		//Cash Bank AC
					
		@FindBy(xpath="//*[@id='4']")
		public static WebElement  CashBankACExpandBtn;
		
			@FindBy(xpath="//*[@id='5002']")
			public static WebElement  CashBankAC_Name;
			
			@FindBy(xpath="//*[@id='5003']")
			public static WebElement  CashBankAC_Code;
			
			@FindBy(xpath="//*[@id='127']")
			public static WebElement  CashBankAC_Alias;
			
			@FindBy(xpath="//*[@id='5004']")
			public static WebElement  CashBankAC_AccountType;
			
			@FindBy(xpath="//*[@id='300023']")
			public static WebElement  CashBankAC_Address;
			
			@FindBy(xpath="//*[@id='303786']")
			public static WebElement  CashBankAC_AllowCustomerPortal;
			
			@FindBy(xpath="//*[@id='302968']")
			public static WebElement  CashBankAC_BankAC;
			
			@FindBy(xpath="//*[@id='303935']")
			public static WebElement  CashBankAC_BankAccountName;
			
			@FindBy(xpath="//*[@id='303936']")
			public static WebElement  CashBankAC_BankAccountNumber;
			
			@FindBy(xpath="//*[@id='302774']")
			public static WebElement  CashBankAC_ChequeDiscountlimit;
			
			@FindBy(xpath="//*[@id='300083']")
			public static WebElement  CashBankAC_City1;
			
			@FindBy(xpath="//*[@id='300084']")
			public static WebElement  CashBankAC_City2;
			
			@FindBy(xpath="//*[@id='300018']")
			public static WebElement  CashBankAC_ConsolidationMethod;
			
			@FindBy(xpath="//*[@id='5006']")
			public static WebElement  CashBankAC_CreditDays;
			
			@FindBy(xpath="//*[@id='5005']")
			public static WebElement  CashBankAC_CreditLimit;
			
			@FindBy(xpath="//*[@id='300012']")
			public static WebElement  CashBankAC_DebitCreditproposal;
			
			@FindBy(xpath="//*[@id='300013']")
			public static WebElement  CashBankAC_DebitCreditRequired;
			
			@FindBy(xpath="//*[@id='300024']")
			public static WebElement  CashBankAC_DeliveryAddress;
			
			@FindBy(xpath="//*[@id='300249']")
			public static WebElement  CashBankAC_Email;
			
			@FindBy(xpath="//*[@id='300014']")
			public static WebElement  CashBankAC_ExchangeAdjustmentGainAC;
			
			@FindBy(xpath="//*[@id='300015']")
			public static WebElement  CashBankAC_ExchangeAdjustmentLossAC;
			
			@FindBy(xpath="//*[@id='303574']")
			public static WebElement  CashBankAC_Faxno;
			
			@FindBy(xpath="//*[@id='304269']")
			public static WebElement  CashBankAC_FinanceEmail;
			
			@FindBy(xpath="//*[@id='303937']")
			public static WebElement  CashBankAC_IFSCcode;
			
			@FindBy(xpath="//*[@id='303785']")
			public static WebElement  CashBankAC_Password;
			
			@FindBy(xpath="//*[@id='304047']")
			public static WebElement  CashBankAC_PaymentType;
			
			@FindBy(xpath="//*[@id='304157']")
			public static WebElement  CashBankAC_PDCdiscountedAmount;
			
			@FindBy(xpath="//*[@id='300027']")
			public static WebElement  CashBankAC_Pin1;
			
			@FindBy(xpath="//*[@id='300028']")
			public static WebElement  CashBankAC_Pin2;
			
			@FindBy(xpath="//*[@id='304379']")
			public static WebElement  CashBankAC_Portalemail;
			
			@FindBy(xpath="//*[@id='300016']")
			public static WebElement  CashBankAC_PrimaryAccount;
			
			@FindBy(xpath="//*[@id='302870']")
			public static WebElement  CashBankAC_RateOFInterest;
			
			@FindBy(xpath="//*[@id='300250']")
			public static WebElement  CashBankAC_SendEmailtoCustomer;
			
			@FindBy(xpath="//*[@id='303573']")
			public static WebElement  CashBankAC_TelNo;
			
			@FindBy(xpath="//*[@id='8388609']")
			public static WebElement  CashBankAC_GroupLevel;
									
			@FindBy(xpath="//*[@id='8388864']")
			public static WebElement  CashBankAC_GroupLevelCode;
			
			@FindBy(xpath="//*[@id='8388610']")
			public static WebElement  CashBankAC_GroupLeve2;
			
			@FindBy(xpath="//*[@id='8388865']")
			public static WebElement  CashBankAC_GroupLeve2Code;
			
			@FindBy(xpath="//*[@id='8388611']")
			public static WebElement  CashBankAC_GroupLeve3;
			
			@FindBy(xpath="//*[@id='8388866']")
			public static WebElement  CashBankAC_GroupLeve3Code;
			
			/////
			@FindBy(xpath="//*[@id='8388612']")
			public static WebElement  CashBankAC_GroupLeve4;
			
			@FindBy(xpath="//*[@id='8388867']")
			public static WebElement  CashBankAC_GroupLeve4Code;
						
			@FindBy(xpath="//*[@id='8388613']")
			public static WebElement  CashBankAC_GroupLeve5;
			
			@FindBy(xpath="//*[@id='8388868']")
			public static WebElement  CashBankAC_GroupLeve5Code;
						
			@FindBy(xpath="//*[@id='8388614']")
			public static WebElement  CashBankAC_GroupLeve6;
			
			@FindBy(xpath="//*[@id='8388869']")
			public static WebElement  CashBankAC_GroupLeve6Code;
						
			@FindBy(xpath="//*[@id='8388615']")
			public static WebElement  CashBankAC_GroupLeve7;
			
			@FindBy(xpath="//*[@id='8388870']")
			public static WebElement  CashBankAC_GroupLeve7Code;
						
			@FindBy(xpath="//*[@id='5154']")
			public static WebElement  CashBankAC_Name2;			
				
			@FindBy(xpath="//*[@id='5155']")
			public static WebElement  CashBankAC_Code2;			
				
			@FindBy(xpath="//*[@id='300568']")
			public static WebElement  CashBankAC_State;			
				
			@FindBy(xpath="//*[@id='8388609']")
			public static WebElement  CashBankAC_GroupLevel1;			
				
			@FindBy(xpath="//*[@id='8388864']")
			public static WebElement  CashBankAC_GroupLevel1Code;			
					
					
			//Department
			
			@FindBy(xpath="//*[@id='268435459']")
			public static WebElement  DepartmentExpansion;
			
				@FindBy(xpath="//*[@id='5042']")
				public static WebElement  Dept_Name;
				
				@FindBy(xpath="//*[@id='5043']")
				public static WebElement  Dept_Code;
				
				@FindBy(xpath="//*[@id='8388609']")
				public static WebElement  Dept_GroupLevel1;
				
				@FindBy(xpath="//*[@id='8388864']")
				public static WebElement  Dept_GroupLevel1Code;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='67108883']")
			public static WebElement  SNarration;	
			
			@FindBy(xpath="//*[@id='67108869']")
			public static WebElement  sChequeNo;
			
			@FindBy(xpath="//*[@id='12']")
			public static WebElement  AccountExansiion;
				
				@FindBy(xpath="//*[@id='5002']")
				public static WebElement  Account_Name;
				
				@FindBy(xpath="//*[@id='5003']")
				public static WebElement  Account_Code;
				
				@FindBy(xpath="//*[@id='127']")
				public static WebElement  Account_Alias;
				
				@FindBy(xpath="//*[@id='5004']")
				public static WebElement  Account_AccountType;
				
				@FindBy(xpath="//*[@id='300023']")
				public static WebElement  Account_Address;
				
				@FindBy(xpath="//*[@id='303786']")
				public static WebElement  Account_AllowCustomerPortal;
				
				@FindBy(xpath="//*[@id='302968']")
				public static WebElement  Account_BankAC;
				
				@FindBy(xpath="//*[@id='303935']")
				public static WebElement  Account_BankAccountName;
				
				@FindBy(xpath="//*[@id='303936']")
				public static WebElement  Account_BankAccountNumber;
				
				@FindBy(xpath="//*[@id='302774']")
				public static WebElement  Account_ChequeDiscountlimit;
				
				@FindBy(xpath="//*[@id='300083']")
				public static WebElement  Account_City1;
				
				@FindBy(xpath="//*[@id='300084']")
				public static WebElement  Account_City2;
				
				@FindBy(xpath="//*[@id='300018']")
				public static WebElement  Account_ConsolidationMethod;
				
				@FindBy(xpath="//*[@id='5006']")
				public static WebElement  Account_CreditDays;
				
				@FindBy(xpath="//*[@id='5005']")
				public static WebElement  Account_CreditLimit;
				
				@FindBy(xpath="//*[@id='300012']")
				public static WebElement  Account_DebitCreditproposal;
				
				@FindBy(xpath="//*[@id='300013']")
				public static WebElement  Account_DebitCreditRequired;
				
				@FindBy(xpath="//*[@id='300024']")
				public static WebElement  Account_DeliveryAddress;
				
				@FindBy(xpath="//*[@id='300249']")
				public static WebElement  Account_Email;
				
				@FindBy(xpath="//*[@id='300014']")
				public static WebElement  Account_ExchangeAdjustmentGainAC;
				
				@FindBy(xpath="//*[@id='300015']")
				public static WebElement  Account_ExchangeAdjustmentLossAC;
				
				@FindBy(xpath="//*[@id='303574']")
				public static WebElement  Account_Faxno;
				
				@FindBy(xpath="//*[@id='304269']")
				public static WebElement  Account_FinanceEmail;
				
				@FindBy(xpath="//*[@id='303937']")
				public static WebElement  Account_IFSCcode;
				
				@FindBy(xpath="//*[@id='303785']")
				public static WebElement  Account_Password;
				
				@FindBy(xpath="//*[@id='304047']")
				public static WebElement  Account_PaymentType;
				
				@FindBy(xpath="//*[@id='304157']")
				public static WebElement  Account_PDCdiscountedAmount;
				
				@FindBy(xpath="//*[@id='300027']")
				public static WebElement  Account_Pin1;
				
				@FindBy(xpath="//*[@id='300028']")
				public static WebElement  Account_Pin2;
				
				@FindBy(xpath="//*[@id='304379']")
				public static WebElement  Account_Portalemail;
				
				@FindBy(xpath="//*[@id='300016']")
				public static WebElement  Account_PrimaryAccount;
				
				@FindBy(xpath="//*[@id='302870']")
				public static WebElement  Account_RateOFInterest;
				
				@FindBy(xpath="//*[@id='300250']")
				public static WebElement  Account_SendEmailtoCustomer;
				
				@FindBy(xpath="//*[@id='303573']")
				public static WebElement  Account_TelNo;
				
				@FindBy(xpath="//*[@id='8388609']")
				public static WebElement  Account_GroupLevel;
										
				@FindBy(xpath="//*[@id='8388864']")
				public static WebElement  Account_GroupLevelCode;
				
				@FindBy(xpath="//*[@id='8388610']")
				public static WebElement  Account_GroupLeve2;
				
				@FindBy(xpath="//*[@id='8388865']")
				public static WebElement  Account_GroupLeve2Code;
				
				@FindBy(xpath="//*[@id='8388611']")
				public static WebElement  Account_GroupLeve3;
				
				@FindBy(xpath="//*[@id='8388866']")
				public static WebElement  Account_GroupLeve3Code;
	
				@FindBy(xpath="//*[@id='8388612']")
				public static WebElement  Account_GroupLeve4;
				
				@FindBy(xpath="//*[@id='8388867']")
				public static WebElement  Account_GroupLeve4Code;
							
				@FindBy(xpath="//*[@id='8388613']")
				public static WebElement  Account_GroupLeve5;
				
				@FindBy(xpath="//*[@id='8388868']")
				public static WebElement  Account_GroupLeve5Code;
							
				@FindBy(xpath="//*[@id='8388614']")
				public static WebElement  Account_GroupLeve6;
				
				@FindBy(xpath="//*[@id='8388869']")
				public static WebElement  Account_GroupLeve6Code;
							
				@FindBy(xpath="//*[@id='8388615']")
				public static WebElement  Account_GroupLeve7;
				
				@FindBy(xpath="//*[@id='8388870']")
				public static WebElement  Account_GroupLeve7Code;
							
				@FindBy(xpath="//*[@id='5154']")
				public static WebElement  Account_Name2;			
					
				@FindBy(xpath="//*[@id='5155']")
				public static WebElement  Account_Code2;			
					
				@FindBy(xpath="//*[@id='300568']")
				public static WebElement  Account_State;			
					
				@FindBy(xpath="//*[@id='8388609']")
				public static WebElement  Account_GroupLevel1;			
					
				@FindBy(xpath="//*[@id='8388864']")
				public static WebElement  Account_GroupLevel1Code;	
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='4']")
			public static WebElement  vendorAC;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='536870916']")
			public static WebElement  warehouse;
			
			@FindBy(xpath="//input[@id='id_header_268435460']")   ////input[@id='id_body_536870916']
			public static WebElement  wareHouseTxt;
			
			
			
			
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='23']")
			public static WebElement  item;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='24']")
			public static WebElement  unit;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='33554437']")
			public static WebElement  RD;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='1107296261']")
			public static WebElement  voucherRD;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='35']")
			public static WebElement  LpurchaseVoucherN;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='26']")
			public static WebElement  Quantity;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='27']")
			public static WebElement  Rate;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='28']")
			public static WebElement  Gross;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='1073741852']")
			public static WebElement  VoucherGross;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='13']")
			public static WebElement  Batch;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='85']")
			public static WebElement  Bins;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='37']")
			public static WebElement  ExpDate;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='38']")
			public static WebElement  RMA;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='134217734']")
			public static WebElement  FD;
			
			@FindBy(xpath="//*[@id='16']")
			public static WebElement  Amount;
			
			@FindBy(xpath="//*[@id='83']")
			public static WebElement  Reference;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='75']")
			public static WebElement  Net;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='78']")
			public static WebElement  User;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='147']")
			public static WebElement  Role;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='148']")
			public static WebElement  UserVal1;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='149']")
			public static WebElement  UserVal2;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='150']")
			public static WebElement  UserVal3;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='151']")
			public static WebElement  UserVal4;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='152']")
			public static WebElement  UserVal5;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='67108920']")
			public static WebElement  sRemarks;
	
			
		
	//Completion Inner Fields			
     
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[1]/select")
	public static WebElement Row1ConjunctionDropdown; 
		
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[2]/input")
	public static WebElement Row1SelectFieldTxt; 
	
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[3]/select")
	public static WebElement Row1SelectOperatorDropdown; 
		
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[4]/select")
	public static WebElement Row1CompareWithDropdown; 
		
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[5]/input")
	public static WebElement Row1ValueTxt; 
	
	
	@FindBy(xpath="//input[@id='advancefilter_master_68_0_']")   //*[@id='68_0_AdvanceFilter_']/table/tbody/tr/td[5]/input
	public static WebElement InputValueTxt; 
	
	@FindBy(xpath="//*[@id='advancefilter_master_68_0__table_body']/tr/td[2]")
	public static List<WebElement> Row1ValueList; 
	
	
	
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[2]/td[1]/select")
	public static WebElement Row2ConjunctionDropdown; 
		
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[2]/td[2]/input")
	public static WebElement Row2SelectFieldTxt; 
	
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[2]/td[3]/select")
	public static WebElement Row2SelectOperatorDropdown; 
	
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[2]/td[4]/select")
	public static WebElement Row2CompareWithDropdown; 
		
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[2]/td[5]/input")
	public static WebElement Row2ValueTxt;
	
	
	
	
	
	
	
	
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[6]/span")
	public static WebElement Row1TransAuthConditionDeleteBtn; 
	
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[7]/span")
	public static WebElement Row1TransAuthConditionAddBtn;
	
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[2]/td[6]/span")
	public static WebElement Row2TransAuthConditionDeleteBtn; 
	
	
	
		
	
	
	
	///status Update----------
	
	@FindBy(xpath="//*[@id='id_txtStatusUpdate']")
	public static WebElement statusUpdateDropdown; 
		
	@FindBy(xpath="//*[@id='txtAuthDefReason']")
	public static WebElement reasonTxt; 
		
	@FindBy(xpath="//*[@id='chkFinancialAccounting']")
	public static WebElement keepUnpostedfinancialAccountingChkBox; 
		
	@FindBy(xpath="//*[@id='chkLinkBase']")
	public static WebElement keepUnpostedlinkBaseChkBox; 
		
	@FindBy(xpath="//*[@id='chkReferences']")
	public static WebElement keepUnpostedReferencesChkBox; 
		
	@FindBy(xpath="//*[@id='chkLinks']")
	public static WebElement keepUnpostedLinksChkBox;
	
	@FindBy(xpath="//*[@id='chkReservation']")
	public static WebElement keepUnpostedReservationChkBox;
	
	@FindBy(xpath="//input[@id='chkInventory']")
	public static WebElement keepUnpostedInventoryChkBox;
	
	
	//Authorization MOde
	
	@FindBy(xpath="//*[@id='chkFullAuthorization']")
	public static WebElement fullAuthorizationChkBox;
	
	@FindBy(xpath="//*[@id='chkAskRemarksonapproval']")
	public static WebElement askRemarksOnapprovalChkBox;
	
	@FindBy(xpath="//*[@id='chkmakeAskRemarksonapproval']")
	public static WebElement makeApprovalRemarksmandatoryChkBox;
	
	@FindBy(xpath="//*[@id='chkAskremarksonRejection']")
	public static WebElement askRemarksOnRejectionChkBox;
	
	@FindBy(xpath="//*[@id='chkmakeAskRemarksonRejection']")
	public static WebElement makeRejectionRemarksMandatoryChkBox;
	
	
	//Undo Authorization On Editing
	
	@FindBy(xpath="//*[@id='chkAnyValueChange']")
	public static WebElement anyValueChangeChkBox;
	
	@FindBy(xpath="//*[@id='chkAmountsOrQuantityOrNumeric']")
	public static WebElement amountsOrQuantityOrNumericChkBox;
	
	@FindBy(xpath="//*[@id='chkBillAdjustments']")
	public static WebElement billAdjustmentsChkBox;
	
	@FindBy(xpath="//*[@id='chkUndoReservation']")
	public static WebElement undoReservationChkBox;
	
	@FindBy(xpath="//*[@id='chkUndoLinks']")
	public static WebElement undoLinksChkBox;
	
	@FindBy(xpath="//*[@id='chkBatchRMABins']")
	public static WebElement batchRMABinChkBox;
	
	@FindBy(xpath="//*[@id='ddlUndoAuthEditing']")
	public static WebElement undoAuthorizationEditingDropdown;
	
	//Last Dropdown In Condition Screen
	
	
	
	//TransactionAuthorization------UserSelection Tab
	
	
	@FindBy(xpath="//a[contains(text(),'User selection')]")
	public static WebElement userSelectionTab;
	
	@FindBy(xpath="//*[@id='ddlUserSelection']")
	public static WebElement userselectionDropdown;
	
	@FindBy(xpath="//*[@id='ddlCriteria']")
	public static WebElement criteriaDropdown;
	
	
	//User Selection----Grid Fields
	
	@FindBy(xpath="//*[@id='id_tblUserSelection_User']")
	public static WebElement userDropdown;
	
	@FindBy(xpath="//td[@id='id_tblUserSelection_col_1-1']")
	public static WebElement userrow1;
	
	@FindBy(xpath="//td[@id='id_tblUserSelection_col_2-1']")
	public static WebElement userrow2;
	
	@FindBy(xpath="//*[@id='id_tblUserSelection_col_1-2']")
	public static WebElement limitDefinitionrow1;
	
		@FindBy(xpath="//*[@id='divCondtionModal']/div/div/div[1]/div[1]/h4]")
		public static WebElement GridLimitDef_ConditionLabel;
		
		@FindBy(xpath="//*[@id='ddlLimiton']")
		public static WebElement GridLimitDef_LimitOnDropdown;
		
		@FindBy(xpath="//*[@id='68_1_AdvanceFilter']/table/tbody/tr/td[1]/select")
		public static WebElement GridLimitDef_ConjunctionDropdown;
		
		@FindBy(xpath="//*[@id='68_1_AdvanceFilter']/table/tbody/tr/td[2]/input")
		public static WebElement GridLimitDef_SelectFieldTxt;
		
			@FindBy(xpath="//*[@id='4']")
			public static WebElement GridLimitDef_SelectField_CashAndBankAc;
			
			@FindBy(xpath="//*[@id='268435459']")
			public static WebElement GridLimitDef_SelectField_Department;
			
			@FindBy(xpath="//*[@id='12']")
			public static WebElement GridLimitDef_SelectField_Account;
			
			@FindBy(xpath="//*[@id='268435462']")
			public static WebElement GridLimitDef_SelectFieldLocation;
		
		@FindBy(xpath="//*[@id='68_1_AdvanceFilter']/table/tbody/tr/td[3]/select")
		public static WebElement GridLimitDef_SelectOperatorDropdown;
		
		@FindBy(xpath="//*[@id='68_1_AdvanceFilter']/table/tbody/tr/td[4]/select")
		public static WebElement GridLimitDef_CompareWithDropDown;
		
		@FindBy(xpath="//*[@id='68_1_AdvanceFilter']/table/tbody/tr/td[5]/input")
		public static WebElement GridLimitDef_ValueTxt;
		
		@FindBy(xpath="//*[@id='68_1_AdvanceFilter']/table/tbody/tr/td[6]/span")
		public static WebElement GridLimitDef_CloseRow1Btn;
		
		@FindBy(xpath="//*[@id='68_1_AdvanceFilter']/table/tbody/tr/td[7]/span")
		public static WebElement GridLimitDef_AddRow1Btn;
		
		@FindBy(xpath="//*[@id='68_1_AdvanceFilter']/table/tbody/tr[2]/td[6]/span")
		public static WebElement GridLimitDef_CloseRow2Btn;
		
		@FindBy(xpath="//*[@id='divCondtionModal']/div/div/div[2]/div[1]/div[4]/span/i")
		public static WebElement GridLimitDef_OkBtn;
		
		@FindBy(xpath="//*[@id='btnCancel']/i")
		public static WebElement GridLimitDef_CancelIcon;
	
	
	@FindBy(xpath="//td[@id='id_tblUserSelection_col_1-3']")
	public static WebElement limitValue1;	
		
	@FindBy(xpath="//td[@id='id_tblUserSelection_col_1-4']")
	public static WebElement resetFrequency1;	
			
	@FindBy(xpath="//*[@id='id_tblUserSelection_LimitValue']")
	public static WebElement limitValueTxt;	
		
	@FindBy(xpath="//*[@id='id_tblUserSelection_ResetFrequency']")
	public static WebElement resetFrequencyDropdown;	
	
	
	
	
	//Alert Tab Fields
		
	@FindBy(xpath="//*[@id='id_report_popup_body']/div[2]/div/div[1]/ul/li[3]/a/span")
	public static WebElement alertsTab;	
		
	//Grid
	
	@FindBy(xpath="//*[@id='chkReceived']")
	public static WebElement receivedChkBox;	
		
	@FindBy(xpath="//*[@id='chkApproved']")
	public static WebElement approvedChkBox;	
		
	@FindBy(xpath="//*[@id='chkRejected']")
	public static WebElement rejectedChkBox;	
		
	@FindBy(xpath="//*[@id='chkStopped']")
	public static WebElement stoppedChkBox;	
		
	//EmailHeaderTemplate
	
	@FindBy(xpath="//*[@id='id_tblAlerts_control_heading_2']/div/u")
	public static WebElement emailHeaderTemplateBtn;	
	
		@FindBy(xpath="//*[@id='id_SMSTemplate']/div/nav/div/div[1]/a/div/span[2]")
		public static WebElement emailHeaderTemplate_CustomizeTemplateLabel;	
		
		//Header Fields Of Customize Template Pop
		
		@FindBy(xpath="//*[@id='btnNewSmsTemplate']")
		public static WebElement customizeTemplateNewBtn;	
		
		@FindBy(xpath="//*[@id='btnSaveSmsTemplate']")
		public static WebElement customizeTemplateSaveBtn;	
			
		@FindBy(xpath="//*[@id='btnCloseSMSModal']")
		public static WebElement customizeTemplateCloseBtn;	
			
		@FindBy(xpath="//*[@id='smsTemplateOptCtrl']")
		public static WebElement customizeTemplateTemplatestxt;	
			
		@FindBy(xpath="//*[@id='smsTemplateOptCtrl_input_settings']/span")
		public static WebElement customizeTemplate_TemplatesSettingBtn;	
			
			
			@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_heading']")
			public static WebElement templateSettingPop_CustomizeDisplayColoumnLabel;
			         
			@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_container']")
			public static WebElement templateSettingPop_sTemplateNameTxt;
	
			@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_footer']/div/div/input[1]")
			public static WebElement templateSettingPop_StandardFieldsBtn;
		
				@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_standardfields_list']")
			    public static WebElement templateSettingPop_StandardFields_FiledDropdown;
			
				@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_standardfields_header']")
			    public static WebElement templateSettingPop_StandardFields_HeaderTxt;
			
				@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_standardfields_alignment']")
			    public static WebElement templateSettingPop_StandardFields_AlignmentDropdown;
			
				@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_standardfields_width']")
			    public static WebElement templateSettingPop_StandardFields_WidthTxt;
			
				@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_footer']/div/div/input[3]")
				public static WebElement templateSettingPop_StandardFields_OkBtn;
				
				@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_footer']/div/div/input[4]")
				public static WebElement templateSettingPop_StandardFields_CancelBtn;
		
			@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_footer']/div/div/input[2]")
			public static WebElement templateSettingPop_DeleteColoumnBtn;

			@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_footer']/div/div/input[3]")
			public static WebElement templateSettingPop_OkBtn;

			@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_footer']/div/div/input[4]")
			public static WebElement templateSettingPop_CancelBtn;
		
	
	//Email Template Tab			
					
	//Header Fields
			
	@FindBy(xpath="//u[contains(text(),'Email Template')]")
	public static WebElement emailTemplateBtn;	
					
	@FindBy(xpath="//*[@id='forHf']/span[1]/span/i[1]")
	public static WebElement emailTemplateNewBtn;	
	
	@FindBy(xpath="//i[@class='icon-font6 icon-new']")
	public static WebElement  Newdropdown;
	
		@FindBy(xpath="//*[@id='forHf']/span[1]/ul/li/a[1]")
		public static WebElement  New_LayoutBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[1]/ul/li/a[2]")
		public static WebElement  New_PageBtn;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-open']")
	public static WebElement  Opendropdown;
	
		@FindBy(xpath="//*[@id='forHf']/span[2]/ul/li/a[1]")
		public static WebElement  OpenBtn;
	
	   //Pop
	    @FindBy(xpath="//*[@id='1']")
	    public static WebElement  Open_Selct1Option;
	
	    @FindBy(xpath="//button[@id='btn_PopUpOk']")
		public static WebElement  OpenBtn_OkBtn;
		
		@FindBy(xpath="//*[@id='id_PopUp']/div/div/div[3]/button[2]")
		public static WebElement  OpenBtn_CancelBtn;
	
	@FindBy(xpath="//*[@id='forHf']/span[2]/ul/li/a[2]")
	public static WebElement FromXMLBtn;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-save']")
	public static WebElement  Savedropdown;

		@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[1]")
		public static WebElement  PrintSaveBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[2]")
		public static WebElement  SaveAsBtn; 
		
		@FindBy(xpath="//input[@id='id_PopuplayoutName']")
		public static WebElement  SaveTxtField;
		
		@FindBy(xpath="//input[@id='id_PopuplayoutName']")
		public static WebElement  Save_OkBtn;
		
		@FindBy(xpath="//*[@id='id_PopUp']/div/div/div[3]/button[2]")
		public static WebElement  Save_CancekBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[3]")
		public static WebElement  SaveAsImageBtn; //No Response
		
		@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[4]")
		public static WebElement  SaveAsXMLBtn; // Downloads xml file
		
		@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[5]")
		public static WebElement  SaveAsHTMLBtn; 
	
	@FindBy(xpath="//*[@id='forHf']/span[4]")
	public static WebElement  Removedropdown;
	
		@FindBy(xpath="//*[@id='forHf']/span[4]/ul/li/a[1]")
		public static WebElement  RemoveBtn;  
		
		@FindBy(xpath="//*[@id='forHf']/span[4]/ul/li/a[2]")
		public static WebElement  RemoveCurrentPageBtn; 
                         
		//popup Error MEssage 
		@FindBy(xpath="//*[@id='idGlobalError']/div/table/tbody/tr/td[2]/div[1]")
		public static WebElement  ErrorMessage;//This Is only Page.You Not Delete this Page --Message while using RemovecurrentPAgeBtn 
		
		@FindBy(xpath="//*[@id='forHf']/span[4]/ul/li/a[3]")
		public static WebElement  RemoveControlBtn;				
	
	@FindBy(xpath="//*[@id='forHf']/span[5]")
	public static WebElement  PageNo;
	
	@FindBy(xpath="//*[@id='forHf']/span[6]")
	public static WebElement  Controldrpdown;
			
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[1]")
		public static WebElement  StaticTextBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[2]")
		public static WebElement  BitmapBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[3]")
		public static WebElement  BodyGridBtn;	
		
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[4]")
		public static WebElement  RectangleBtn;	
		
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[5]")
		public static WebElement  EcllipseBtn;	
		
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[6]")
		public static WebElement  LineBtn;	
		
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[7]")
		public static WebElement  AreaBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[8]")
		public static WebElement  TableBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[9]")
		public static WebElement  ApprovalHistoryBtn;

	@FindBy(xpath="//*[@id='forHf']/span[7]/span/i[1]")
	public static WebElement  Alignmentdropdown;
			
		@FindBy(xpath="//*[@id='forHf']/span[7]/ul/li/a[1]")
		public static WebElement  LeftAlignmentBtn;
					
		@FindBy(xpath="//*[@id='forHf']/span[7]/ul/li/a[2]")
		public static WebElement  RightAlignmentBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[7]/ul/li/a[3]")
		public static WebElement  TopAlignmentBtn;	
		
		@FindBy(xpath="//*[@id='forHf']/span[7]/ul/li/a[4]")
		public static WebElement  BottomAlignmentBtn;
	
	@FindBy(xpath="//*[@id='forHf']/span[8]")
	public static WebElement  Sizedropdown;
	
		@FindBy(xpath="//*[@id='forHf']/span[8]/ul/li/a[1]")
		public static WebElement  SameSizeBtn;
					
		@FindBy(xpath="//*[@id='forHf']/span[8]/ul/li/a[2]")
		public static WebElement  SameWidthBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[8]/ul/li/a[3]")
		public static WebElement  SameHeightBtn;
	
	@FindBy(xpath="//*[@id='forHf']/span[9]")
	public static WebElement  Printdropdown;
	
	@FindBy(xpath="//*[@id='menu-print']")
	public static WebElement  Print_PrintBtn;
						
		@FindBy(xpath="//*[@id='menu-preview']	")
		public static WebElement  Print_PreviewBtn;
		
		@FindBy(xpath="//*[@id='fit-button']")
		public static WebElement  Preview_FitToWidthBtn;
		
		@FindBy(xpath="//*[@id='zoom-in-button']")
		public static WebElement  PreviewZ_ZoomInBtn;
		
		@FindBy(xpath="//*[@id='zoom-out-button']")
		public static WebElement  Preview_ZoomOutBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[9]/ul/li/a[3]")
		public static WebElement  PageSetUpBtn;
		
		@FindBy(xpath="//*[@id='id_PageSetUpPreview']")
		public static WebElement  PageSetupPagePreviewField;
		
		@FindBy(xpath="//*[@id='id_PageType']")
		public static WebElement  PageSetupPaperSizedropdown;
		
		@FindBy(xpath="//*[@id='id_PaperOrientation'][@value='0']")
		public static WebElement  PageSetupPotraitRadio;
		
		@FindBy(xpath="//*[@id='id_PaperOrientation'][@value='1']")
		public static WebElement  PageSetupLandScapeRadio;
		
		@FindBy(xpath="//*[@id='id_PaperUnit'][@value='0']")
		public static WebElement  PageSetupCentimetersRadio;
		
		@FindBy(xpath="//*[@id='id_PaperUnit'][@value='1']")
		public static WebElement  PageSetupInchesRadio;
		
		@FindBy(xpath="//*[@id='id_PageSizeLeftMarginDisplay']")
		public static WebElement  PageSetupLeftTxt;
		
		@FindBy(xpath="//*[@id='id_PageSizeRightMarginDisplay']")
		public static WebElement  PageSetupRightTxt;
		
		@FindBy(xpath="//*[@id='id_PageSizeTopMarginDisplay']")
		public static WebElement  PageSetupTopTxt;
		
		@FindBy(xpath="//*[@id='id_PageSizeTopMarginDisplay']")
		public static WebElement  PageSetupBottomTxt;
		
		@FindBy(xpath="//*[@id='id_PageSetupOkBtn']")
		public static WebElement  PageSetupOkBtn;
		
		@FindBy(xpath="//*[@id='id_PageSetupCancelBtn']")
		public static WebElement  PageSetUpCancelBtn;
                 
	@FindBy(xpath="//*[@id='id_InvoiceDesingCancel']/i")
	public static WebElement  ExitBtn;	
	
	//Header Elements
	
	@FindBy(xpath="//*[@id='li_InvoicePageSetup']/a")
	public static WebElement  headerPageSetUpTab;
	
	@FindBy(xpath="//*[@id='li_InvoiceDesigner']/a")
	public static WebElement headerDesignerTab;
	
	@FindBy(xpath="//*[@id='li_InvoicePreview']/a")
	public static WebElement  headerPreviewTab;
	
	//Fields  
	
	@FindBy(xpath="//*[@id='LiDesignField']/a")
	public static WebElement  headerFieldsTab;
	
	@FindBy(xpath="//*[@id='LiProp']/a")
	public static WebElement  headerPropertiesTab;
	
	@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/a")
	public static WebElement  fields_CompanyExpandBtn;
	
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[1]")
		public static WebElement  fields_Company_CompanyName;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[2]")
		public static WebElement  fields_Company_CompanyCode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[3]")
		public static WebElement  fields_Company_AccountingDate;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]")
		public static WebElement  fields_Company_Address1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[5]")
		public static WebElement  fields_Company_Address2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[6]")
		public static WebElement  fields_Company_City;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[7]")
		public static WebElement  fields_Company_Zipcode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[8]")
		public static WebElement  fields_Company_Country;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[9]")
		public static WebElement  fields_Company_PhoneNumber1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[10]")
		public static WebElement  fields_Company_PhoneNumber2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[11]")
		public static WebElement  fields_Company_Fax;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[12]")
		public static WebElement  fields_Company_TaxRegestrationNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[13]")
		public static WebElement  fields_Company_ExciseRegistrationNumber;

	@FindBy(xpath="//span[contains(text(),'Header')]")
	public static WebElement   fields_HeaderExpandBtn;
	             
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[2]/ul/li[1]/a")
		public static WebElement  fields_Header_DocNo;
	
	@FindBy(xpath="//li[@class='treeview active']//span[contains(text(),'Date')]//i[@class='icon-expand icon-font8']")
	public static WebElement  fields_Header_DateExpandBtn;
	
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[2]/ul/li[1]/a")
		public static WebElement  header_Date;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[2]/ul/li[2]/a")
		public static WebElement  header_Date_Year;
		
		@FindBy(xpath="///*[@id='InvoiceDesignheader']/ul/li[1]/ul/li[2]/ul/li[3]/a")
		public static WebElement  header_Date_Month;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[2]/ul/li[4]/a")
		public static WebElement  header_Date_DayOfYear;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[2]/ul/li[5]/a")
		public static WebElement  header_Date_Day;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[2]/ul/li[6]/a")
		public static WebElement  header_Date_Week;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[2]/ul/li[7]/a")
		public static WebElement  header_Date_WeekDay;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[3]/a")
		public static WebElement  fields_Header_TimeExpandBtn;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[3]/ul/li[1]/a")
		public static WebElement  headers_Time_Time;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[3]/ul/li[2]/a")
		public static WebElement  headers_Time_Hour;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[3]/ul/li[3]/a")
		public static WebElement  headers_Time_Minute;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[3]/ul/li[4]/a")
		public static WebElement headers_Time_Second;
	
	@FindBy(xpath="//span[contains(text(),'CashBankAC')]")
	public static WebElement fields_Header_CashBankACExpandBtn;
	
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[1]/a")
		public static WebElement  cashAndBankAC_Name;
					
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[2]/a")
		public static WebElement  cashAndBankAC_Code;
					
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[3]/a")
		public static WebElement  cashAndBankAC_Alias;
					
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[4]/a")
		public static WebElement  cashAndBankAC_Accounttype;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[5]/a")
		public static WebElement  cashAndBankAC_Address;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[6]/a")
		public static WebElement  cashAndBankAC_AllowCustomerPortal;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[7]/a")
		public static WebElement  cashAndBankAC_BanckAC;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[8]/a")
		public static WebElement  cashAndBankAC_BankACcode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[9]/a")
		public static WebElement  cashAndBankAC_BankAccountName;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[10]/a")
		public static WebElement  cashAndBankAC_BankAccountNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[11]/a")
		public static WebElement  cashAndBankAC_ChequeDiscountLimit;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[12]/a")
		public static WebElement  cashAndBankAC_City1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[13]/a")
		public static WebElement  cashAndBankAC_CityCode1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[14]/a")
		public static WebElement  cashAndBankAC_City2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[15]/a")
		public static WebElement  cashAndBankAC_CityCode2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[16]/a")
		public static WebElement  cashAndBankAC_ConsolidationMethod;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[17]/a")
		public static WebElement  cashAndBankAC_CreditDays;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[18]/a")
		public static WebElement  cashAndBankAC_CreditLimit;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[19]/a")
		public static WebElement  cashAndBankAC_DebitCreditProposal;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[20]/a")
		public static WebElement  cashAndBankAC_DebitCreditRequired;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[21]/a")
		public static WebElement  cashAndBankAC_DefaultCurrency;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[22]/a")
		public static WebElement  cashAndBankAC_DeliveryAddress;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[23]/a")
		public static WebElement  cashAndBankAC_Email;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[24]/a")
		public static WebElement  cashAndBankAC_ExchangeAdjustGainAC;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[25]/a")
		public static WebElement  cashAndBankAC_ExchangeAdjustGainACcode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[26]/a")
		public static WebElement  cashAndBankAC_ExchangeAdjustLossAC;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[27]/a")
		public static WebElement  cashAndBankAC_ExchangeAdjustLossACcode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[28]/a")
		public static WebElement  cashAndBankAC_FaxNo;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[29]/a")
		public static WebElement  cashAndBankAC_FinanceChargeTerms;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[30]/a")
		public static WebElement  cashAndBankAC_FinanaceEmail;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[31]/a")
		public static WebElement  cashAndBankAC_IFSCcode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[32]/a")
		public static WebElement  cashAndBankAC_Password;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[33]/a")
		public static WebElement  cashAndBankAC_PaymentTerms;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[34]/a")
		public static WebElement  cashAndBankAC_PaymentType;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[35]/a")
		public static WebElement  cashAndBankAC_PDCdiscountedAC;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[36]/a")
		public static WebElement  cashAndBankAC_PDCdiscountedACcode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[37]/a")
		public static WebElement  cashAndBankAC_Pin1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[38]/a")
		public static WebElement  cashAndBankAC_Pin2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[39]/a")
		public static WebElement  cashAndBankAC_PortalEmail;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[40]/a")
		public static WebElement  cashAndBankAC_PrimaryAccount;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[41]/a")
		public static WebElement  cashAndBankAC_PrimanryAccountCode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[42]/a")
		public static WebElement  cashAndBankAC_RateOFInterest;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[43]/a")
		public static WebElement  cashAndBankAC_ReminderTerms;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[44]/a")
		public static WebElement  cashAndBankAC_SendEmaialToCustomer;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[45]/a")
		public static WebElement  cashAndBankAC_TelNo;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[46]/a")
		public static WebElement  cashAndBankAC_GropupLevel1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[47]/a")
		public static WebElement  cashAndBankAC_GroupLevel1Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[48]/a")
		public static WebElement  cashAndBankAC_GroupLevel2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[49]/a")
		public static WebElement  cashAndBankAC_GroupLevel2Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[50]/a")
		public static WebElement  cashAndBankAC_GroupLevel3;
		               
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[51]/a")
		public static WebElement  cashAndBankAC_GroupLevel3Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[52]/a")
		public static WebElement  cashAndBankAC_GroupLevel4;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[53]/a")
		public static WebElement  cashAndBankAC_GroupLevel4Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[54]/a")
		public static WebElement  cashAndBankAC_GroupLevel5;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[55]/a")
		public static WebElement  cashAndBankAC_GroupLevel5Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[56]/a")
		public static WebElement  cashAndBankAC_GroupLevel6;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[57]/a")
		public static WebElement  cashAndBankAC_GroupLevel6Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[58]/a")
		public static WebElement  cashAndBankAC_GroupLevel7;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[59]/a")
		public static WebElement  cashAndBankAC_GroupLevel7Code;
		
			
	@FindBy(xpath="//li[@class='treeview active']//span[contains(text(),'Department')]")
	public static WebElement  fields_Header_DepartmentExpandBtn;
	
	@FindBy(xpath="//li[@class='treeview']//span[contains(text(),'Location')]")
	public static WebElement  fields_Header_LocationExpandBtn;
	
	@FindBy(xpath="//span[contains(text(),'sNarration')]")
	public static WebElement  header_sNarration;
	
	@FindBy(xpath="//span[contains(text(),'sChequeNo')]")
	public static WebElement  header_sChequeNo;
	
	@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[2]/ul/li[9]/a/span")
	public static WebElement  header_User;
	
	@FindBy(xpath="//li[@class='treeview']//span[contains(text(),'Role')]")
	public static WebElement  header_Role;
	
	@FindBy(xpath="//span[contains(text(),'UserVal1')]")
	public static WebElement  header_UserValue1;
	
	@FindBy(xpath="//span[contains(text(),'UserVal2')]")
	public static WebElement  header_UserValue2;
	
	@FindBy(xpath="//span[contains(text(),'UserVal3')]")
	public static WebElement  header_UserValue3;
	
	@FindBy(xpath="//span[contains(text(),'UserVal4')]")
	public static WebElement  header_UserValue4;
	
	@FindBy(xpath="//span[contains(text(),'UserVal5')]")
	public static WebElement  header_UserValue5;
	
	@FindBy(xpath="//span[contains(text(),'VoucherName')]")
	public static WebElement  header_VoucherName;
	
	
	//Body Expansion Fields
	
	@FindBy(xpath="//span[contains(text(),'Body')]")
	public static WebElement  fields_BodyExpansionBtn;
	
	@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/a")
	public static WebElement  fields_Body_AccountExpansionBtn;
	
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[1]/a")
		public static WebElement body_Name;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[2]/a")
		public static WebElement body_Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[3]/a")
		public static WebElement body_Alias;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[4]/a")
		public static WebElement body_AccountType;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[5]/a")
		public static WebElement body_Address;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[6]/a")
		public static WebElement body_AlloowCoustmerPortal;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[7]/a")
		public static WebElement body_BankAc;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[8]/a")
		public static WebElement body_BAnkAcCode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[9]/a")
		public static WebElement body_BanbkAccountName;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[10]/a")
		public static WebElement body_BankAccountNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[11]/a")
		public static WebElement body_BAnkDiscountLimit;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[12]/a")
		public static WebElement body_City1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[13]/a")
		public static WebElement body_CityCode1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[14]/a")
		public static WebElement body_City2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[15]/a")
		public static WebElement body_CityCode2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[16]/a")
		public static WebElement body_ConsoildationMethod;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[17]/a")
		public static WebElement body_CreditDays;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[18]/a")
		public static WebElement body_CreditLimit;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[19]/a")
		public static WebElement body_DebitOrCreditProposal;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[20]/a")
		public static WebElement body__DebitOrCreditRequired;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[21]/a")
		public static WebElement body_DefaultCurrency;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[22]/a")
		public static WebElement body_DeliveryAddress;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[23]/a")
		public static WebElement body_Email;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[24]/a")
		public static WebElement body_ExchangeAdjustmentGainAC;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[25]/a")
		public static WebElement body_ExchangeAdjustmentGainAcCode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[26]/a")
		public static WebElement body_fields_Header_ExchangeAdjustmentLossAC;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[27]/a")
		public static WebElement body_fields_Header_ExchangeAdjustmentLossACCode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[28]/a")
		public static WebElement body_FaxNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[29]/a")
		public static WebElement body_FininaceChargeTerms;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[30]/a")
		public static WebElement body_FinanceEmail;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[31]/a")
		public static WebElement body_IFSCCode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[32]/a")
		public static WebElement body_Password;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[33]/a")
		public static WebElement body_PaymentTerms;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[34]/a")
		public static WebElement body_PaymentType;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[35]/a")
		public static WebElement body_PDCDiscountedAC;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[36]/a")
		public static WebElement body_PDCDiscountedACCode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[37]/a")
		public static WebElement body_Pin1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[38]/a")
		public static WebElement body_Pin2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[39]/a")
		public static WebElement body_POrtalEmail;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[40]/a")
		public static WebElement body_PrimaryAccount;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[41]/a")
		public static WebElement body_PrimaryAccountCode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[42]/a")
		public static WebElement body_RateOfInterest;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[43]/a")
		public static WebElement body_RemainderTerms;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[44]/a")
		public static WebElement body_SendEmailTOCustomer;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[45]/a")
		public static WebElement body_TelNumber2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[46]/a")
		public static WebElement body_GroupLevel1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[47]/a")
		public static WebElement body_GroupLevel1Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[48]/a")
		public static WebElement body_GroupLevel2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[49]/a")
		public static WebElement body_GroupLevel2Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[50]/a")
		public static WebElement body_GroupLevel3;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[51]/a")
		public static WebElement body_GroupLevel3Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[52]/a")
		public static WebElement body_GroupLevel4;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[53]/a")
		public static WebElement body_GroupLevel4Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[54]/a")
		public static WebElement body_GroupLevel5;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[55]/a")
		public static WebElement body_GroupLevel5Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[56]/a")
		public static WebElement body_GroupLevel6;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[57]/a")
		public static WebElement body_GroupLevel6Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[58]/a")
		public static WebElement body_GroupLevel7;
		              
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[59]/a")
		public static WebElement body_GroupLevel7Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[2]/a")
		public static WebElement body_Amount;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[3]/a")
		public static WebElement body_VouchurAmount;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[4]/a")
		public static WebElement body_Referrence;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[5]/a")
		public static WebElement body_Net;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[6]/a")
		public static WebElement body_VoucherNet;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[7]/a")
		public static WebElement body_SRemarks;

		
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[5]")
		public static List<WebElement> voucherGridDocNo;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
		public static List<WebElement> voucherGridIndexChkBox;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[12]")
		public static List<WebElement> voucherGridSuspendStatus;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[13]")
		public static List<WebElement> voucherGridAuthorizationStatus;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[13]")
		public static WebElement voucherGridRow1AuthorizationStatus;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[2]/td[13]")
		public static WebElement voucherGridRow2AuthorizationStatus;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[3]/td[13]")
		public static WebElement voucherGridRow3AuthorizationStatus;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[4]/td[13]")
		public static WebElement voucherGridRow4AuthorizationStatus;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[5]/td[13]")
		public static WebElement voucherGridRow5AuthorizationStatus;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
		public static List<WebElement> voucherGridCheckBoxList;
		
		
		
		
		
		
	//UserDetails
	@FindBy(xpath="//span[contains(text(),'User details')]")
	public static WebElement  fields_UserDetailsExpansionBtn;
	
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[1]/a")
		public static WebElement userDetails_UserName;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[2]/a")
		public static WebElement userDetails_MobileNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[3]/a")
		public static WebElement userDetails_PhoneNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[4]/a")
		public static WebElement userDetails_EmailId;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[5]/a")
		public static WebElement userDetails_Singature;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[6]/a")
		public static WebElement userDetails_Employee;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[7]/a")
		public static WebElement userDetails_AuthoriseUserName;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[8]/a")
		public static WebElement userDetails_AuthoriseUserMobileNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[9]/a")
		public static WebElement userDetails_AuthoriseUserPhoneNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[10]/a")
		public static WebElement userDetails_AuthoriseUserEmailId;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[11]/a")
		public static WebElement userDetails_AuthoriseUserSignature;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[12]/a")
		public static WebElement userDetails_AuthoriseBy;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[13]/a")
		public static WebElement userDetails_NextAuthoriseUserName;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[14]/a")
		public static WebElement userDetails_NextUserMobileNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[15]/a")
		public static WebElement userDetails_NextUserPhoneNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[16]/a")
		public static WebElement userDetails_NextUserEmailId;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[17]/a")
		public static WebElement userDetails_NextUserSignature;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[18]/a")
		public static WebElement userDetails_CreatedBySignature;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[19]/a")
		public static WebElement userDetails_ModifiedBySignature;

	
	//Miscellaneous 
	
	@FindBy(xpath="//li[@class='treeview active']//span[contains(text(),'Miscellaneous')]")
	public static WebElement  fields_MiscellaneousExpansionBtn;
	
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[1]/a")
		public static WebElement miscellaneous_Longdate;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[2]/a")
		public static WebElement miscellaneous_PageNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[3]/a")
		public static WebElement miscellaneous_Printdate;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[4]/a")
		public static WebElement miscellaneous_PrintTime;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[5]/a")
		public static WebElement miscellaneous_TotalPage;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[6]/a")
		public static WebElement miscellaneous_Sno;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[7]/a")
		public static WebElement miscellaneous_PageType;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[8]/a")
		public static WebElement miscellaneous_AgingDetails;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[9]/a")
		public static WebElement miscellaneous_AgingAmounts;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[10]/a")
		public static WebElement miscellaneous_AgingHeadings;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[11]/a")
		public static WebElement miscellaneous_Agingbalance;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[12]/a")
		public static WebElement miscellaneous_AgingSlab1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[13]/a")
		public static WebElement miscellaneous_AgingSlab2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[14]/a")
		public static WebElement miscellaneous_AgingSlab3;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[15]/a")
		public static WebElement miscellaneous_AgingSlab4;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[16]/a")
		public static WebElement miscellaneous_AgingSlab5;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[17]/a")
		public static WebElement miscellaneous_AgingSlab6;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[18]/a")
		public static WebElement miscellaneous_AgingMonthWise;
		
	//'SMS template 
	
	@FindBy(xpath="//u[contains(text(),'SMS template')]")
	public static WebElement headerSMSTemplate;					
	
	//Pop As Same Above Email Header Template
	//Alerts
	@FindBy(xpath="//u[contains(text(),'Alerts')]")
	public static WebElement headerAlert;
	
	//Pop As Same Above Email Header Template
	
	//Recipient
	@FindBy(xpath="//div[contains(text(),'Recipient')]")
	public static WebElement headerRecipient;					
	
	
	/// Ok And Cancel for Authorization Definition
	
	@FindBy(xpath="//*[@id='id_report_popup_ok']")
	public static WebElement definitionOkBtn;					
			
	@FindBy(xpath="//*[@id='id_report_popup_cancel']/i	")
	public static WebElement definitionCloseBtn;					
	
	@FindBy(xpath="//*[@id='16']")
	public static WebElement  settingsmenuBtn;
	
	@FindBy(xpath="//span[contains(text(),'Configure Transactions')]")
	public static WebElement  configureTransactionBtn;
	
	@FindBy(xpath="//*[@id='68']/span")
	public static WebElement  transactionAuthorizationBtn;
	
	@FindBy(xpath="//*[@id='235']/span")
	public static WebElement  pricebookAuthorizationBtn;
	
	@FindBy(xpath="//*[@id='19']/span")
	public static WebElement  configureMastersBtn;
	
	@FindBy(xpath="//*[@id='67']/span")
	public static WebElement  masterAuthorizationBtn;
	
	@FindBy(xpath="//*[@id='69']/span")
	public static WebElement  creditLimitAuthorizationBtn;
	
	@FindBy(xpath="//*[@id='74']/span")
	public static WebElement  designWorkflowBtn;
	
	@FindBy(xpath="//*[@id='105']/span")
	public static WebElement  settingsWizardBtn;
	
	@FindBy(xpath="//*[@id='232']/span")
	public static WebElement  batchCodeGenerationBtn;
	
	@FindBy(xpath="//*[@id='34']/span")
	public static WebElement  mapCreditLimitBtn;
	
	@FindBy(xpath="//*[@id='257']/span")
	public static WebElement  vatTaxCodeBtn;
	
	@FindBy(xpath="//*[@id='258']/span")
	public static WebElement  customerPortalAdminBtn;
	
	@FindBy(xpath="//*[@id='3308']/span")
	public static WebElement  budgetAuthorizationBtn;
	
	@FindBy(xpath="//*[@id='3320']/span")
	public static WebElement  paymentGatewayIntegrationBtn;
	
	@FindBy(xpath="//*[@id='dashName']")
	public static WebElement dashboardName;
	
	@FindBy(xpath="//div[@id='divLevel1']//div[@class='row clsDivAuthorizationName']")
	public static WebElement level1;
	
	@FindBy(xpath="(//i[@class='icon-edit'])[2]")
	public static WebElement Level1editBtn;
	
	
	@FindBy(xpath="//i[@class='NodeIcon icon-report-1']")
	public static WebElement cnrBtn;
	
	@FindBy(xpath="//div[@id='divLevel1']//i[@class='icon-new icon-font7']")
	public static WebElement AddLevel1Btn;
	
	@FindBy(xpath="//div[@id='divLevel1']//i[@class='icon-add-parallel icon-font7']")
	public static WebElement AddParallel1Btn;
	
	@FindBy(xpath="//div[@id='divLevel1']//i[@class='icon-delete icon-font7']")
	public static WebElement DeleteLevel1Btn;
	
	@FindBy(xpath="(//input[@id='chkLevelCheck0'])[2]")    //span[@id='chkLevelCheck1']//input[@id='chkLevelCheck0']
	public static WebElement LevelCheck1ChkBox;
	
	
	
	@FindBy(xpath="//div[@id='divLevel2']//div[@class='row clsDivAuthorizationName']")
	public static WebElement level2;
	
	@FindBy(xpath="//i[@class='NodeIcon icon-inventory']")
	public static WebElement Level2editBtn;
	
	@FindBy(xpath="//div[@id='divLevel2']//i[@class='icon-new icon-font7']")
	public static WebElement AddLevel2Btn;
	
	@FindBy(xpath="//div[@id='divLevel2']//i[@class='icon-add-parallel icon-font7']")
	public static WebElement AddParallel2Btn;
	
	@FindBy(xpath="//i[@class='NodeIcon icon-inventory']")
	public static WebElement utaBtn;
	
	@FindBy(xpath="(//i[@class='icon-delete'])[3]")
	public static WebElement Level2DeleteBtn;
	
	@FindBy(xpath="//span[@id='chkLevelCheck2']//input[@id='chkLevelCheck0']")
	public static WebElement LevelCheck2ChkBox;
	
	
	//Vouchers Home Page Ribbon Control
		@FindBy(xpath="//a[@id='id_transaction_homescreen_new']")
		public static WebElement  newBtn;
		
		@FindBy(xpath="//*[@id='id_transaction_homescreen_edit']/i")
		public static WebElement  editBtn;

		@FindBy(xpath="//span[@class='icon-print icon-font6']")
		public static WebElement  printBtn;
		
		@FindBy(xpath="//*[@id='btnDelete']/i")
		public static WebElement  deleteBtn;
		
		@FindBy(xpath="//a[@id='id_transaction_homescreen_authorize']")
		public static WebElement  authorizeBtn;
		
		@FindBy(xpath="//span[@class='icon-suspend icon-font6']")
		public static WebElement  suspendBtn;
		
		@FindBy(xpath="//a[@id='id_transaction_homescreen_reject']")
		public static WebElement  rejectBtn;
		
		@FindBy(xpath="//span[@class='icon-cheque icon-font6']")
		public static WebElement  chequeReturnBtn;
		
		@FindBy(xpath="//span[@class='icon-printbarcode icon-font6']")
		public static WebElement  printBarCodeBtn;
		
		@FindBy(xpath="//*[@id='id_transaction_homescreen_convert']/i")
		public static WebElement  convertBtn;
		
		@FindBy(xpath="//span[@class='icon-export icon-font6']")
		public static WebElement  exportToXMLBtn;  
			
		@FindBy(xpath="(//i[@class='icon-settings hiconright2'])[1]")
		public static WebElement  settingsBtn;
		
		@FindBy(xpath="//i[@class='icon-close hiconright2']")  
		public static WebElement  homeCloseBtn;
				
		//Vouchers Home Page Options
		@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[1]/a")
		public static WebElement  allVouchersOption;
		
		@FindBy(xpath="//a[@class='transaction_viewname_anchor font-5']")
		public static WebElement  pendingBillsOption;
		
		@FindBy(xpath="//input[@id='SelectDefaultView']")
		public static WebElement  selectDefaultViewChkBox;
			
		@FindBy(xpath="//span[@class='icon-sorting icon-font6 toolbar_button_image theme_button_color dropdown-toggle']")
		public static WebElement  sortingBtn;
		
	    @FindBy(xpath="//div[@id='btnCreateView']//span[@class='icon-new icon-font6']")
	    public static WebElement  createViewBtn;

	    @FindBy(xpath="//div[@id='btnCustomize']//span[@class='icon-settings icon-font6']")
	    public static WebElement  customizeBtn;
	   
	    @FindBy(xpath="//span[@class='icon-filter icon-font6']")
	    public static WebElement  filterBtn;
	   
	    @FindBy(xpath="//*[@id='transhomeRefresh']")
	    public static WebElement  refreshBtn;
	   
	    @FindBy(xpath="//*[@id='transhomeRefresh']")
	    public static WebElement  refreshBtnInPVVAT;
	    
	    @FindBy(xpath="//i[@class='icon-font6 icon-export']")
	    public static WebElement  exportBtn;
	   
		// Options Button  (Display Option)	
	    @FindBy(xpath="//span[@id='transOptions']")
	    public static WebElement  optionsBtn;
	   
	    @FindBy(xpath="//a[contains(text(),'Auto Adjust Width')]")
	    public static WebElement  autoAdjustWidthBtn;
	   
	    @FindBy(xpath="//a[contains(text(),'Fit To Screen')]")
	    public static WebElement  fitToScreenBtn;
	   
	    @FindBy(xpath="//a[contains(text(),'Normal')]")
	    public static WebElement  normalBtn;
	   
					
		//Voucher Home Page Grid Header Columns
		@FindBy(xpath="//input[@id='HeaderChkBox']")
		public static WebElement  grid_HeaderChkBox;	
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[3]")
		public static WebElement  grid_Header_Date;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[4]")
		public static WebElement  grid_Header_VoucherNumber;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[5]")
		public static WebElement  grid_Header_CreatedBy;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[6]")
		public static WebElement  grid_Header_ModifiedBy;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[7]")
		public static WebElement  grid_Header_CreatedDate;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[8]")
		public static WebElement  grid_Header_ModifiedDate;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[9]")
		public static WebElement  grid_Header_CreatedTime;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[10]")
		public static WebElement  grid_Header_ModifiedTime;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[11]")
		public static WebElement  grid_Header_Suspended;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[12]")
		public static WebElement  grid_Header_Cancelled;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[13]")
		public static WebElement  grid_Header_AuthorizationStatus;
		
		
		//Grid Voucher DetailsBtn
		@FindBy(xpath="//tr[@id='trRender_1']//i[@class='icon-info icon-font7']")
		public static WebElement  grid_VoucherDetailsBtn1;
		
		@FindBy(xpath="//tr[@id='trRender_2']//i[@class='icon-info icon-font7']")
		public static WebElement  grid_VoucherDetailsBtn2;
		
		
		//Grid CheckBox 1 And 2
		
		@FindBy(xpath="//tr[@id='trRender_1']//td//input")
		public static WebElement  grid_ChkBox1;
		
		@FindBy(xpath="//tr[@id='trRender_2']//td//input")
		public static WebElement  grid_ChkBox2;
		
		@FindBy(xpath="//tr[@id='trRender_3']//td//input")
		public static WebElement  grid_ChkBox3;
		
		@FindBy(xpath="//tr[@id='trRender_4']//td//input")
		public static WebElement  grid_ChkBox4;
		
		
		// Vouchers Home Page Footer
		@FindBy(xpath="//div[@id='tblFooterReportRender']//input[@id='txtSearch']")
		public static WebElement  searchField;
								
		@FindBy(xpath="//button[@id='frstPage']")
		public static WebElement  firstPageBtn;

		@FindBy(xpath="//button[@id='id_previousPage']")
		public static WebElement  previousPageBtn;

		@FindBy(xpath="//button[@id='id_pagenumber']")
		public static WebElement  currentPageNo;

		@FindBy(xpath="//button[@id='id_nextPage']")
		public static WebElement  nextPageBtn;

		@FindBy(xpath="//button[@id='lstPage']")
		public static WebElement  lastPageBtn;
		
		
		
		//Vouchers Entry Page Ribbon Control Options
		@FindBy(xpath="//span[@class='icon-scroll icon-font6']")
		public static WebElement  freeFlowBtn;
		
		@FindBy(xpath="//span[@class='icon-header icon-font6']")
		public static WebElement  jumpToHeaderSectionBtn;
		
		@FindBy(xpath="//span[@class='icon-panel icon-font6']")
		public static WebElement  jumpToBodySectionBtn;
		
		@FindBy(xpath="//span[@class='icon-footer icon-font6']")
		public static WebElement  jumpToFooterBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_new']")
		public static WebElement  new_newBtn;
		
		@FindBy(xpath="//*[@id='btnSave']") 
		public static WebElement  saveBtn;
		
		@FindBy(xpath="//*[@id='btnSave']/i") 
		public static WebElement  SaveBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_previous']")
		public static WebElement  previousBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_next']")
		public static WebElement  nextBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_print']")
		public static WebElement  new_PrintBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_suspend']")
		public static WebElement  new_SuspendBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_close']")
		public static WebElement  new_CloseBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_workflow_popup_heading']//..//span")
		public static WebElement  workfolWCancelBtn;
		
		@FindBy(xpath="//div[@id='id_transactionentry_delete']//span[contains(@class,'icon-delete icon-font6')]")
		public static WebElement  new_DeleteBtn;
		
		@FindBy(xpath="//li[@id='id_transactionentry_authorize']")
		public static WebElement  new_AuthorizeBtn;
		
		@FindBy(xpath="//*[@id='id_transentry_infopanel_dashlet_6']/table/tbody/tr[1]/td[3]")
		public static WebElement  new_DocumentInfoStatusTxt;
		
		@FindBy(xpath="//i[@class='icon icon-new Accpluseicon text-collapsed']")
		public static WebElement  documentInfoExpandBtn;
		
		
		
		
		
		@FindBy(xpath="//span[@class='icon-menudots hiconright2']")
		public static WebElement  toggleBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_copydocument']")
		public static WebElement  copyDocumentOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_copytoclipboard']")
		public static WebElement  copyToClipBoardOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_pastefromclipboard']")
		public static WebElement  pasteFromClipBoardOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_raisechequereturn']")
		public static WebElement  raiseCheckReturnOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_addtostock']")
		public static WebElement  addToStockOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_markconvert']")
		public static WebElement  markConvertedOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_bominput']")
		public static WebElement  bOMinputOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_autoallocate']")
		public static WebElement  autoAllocateOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_reverseentry']")
		public static WebElement  reverseEntryOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_printbarcode']")
		public static WebElement  printBarCodeOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_postingdetails']")
		public static WebElement  postingDetailsOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_exporttoxml']")
		public static WebElement  exportToXMLOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_settings']")
		public static WebElement  settingsOption;
		
		
		
		// Line Wise Authorization 
		@FindBy(xpath="//span[@class='icon-clear icon-font6']")
		public static WebElement  lineWiseAuthorizationClearBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_linewiseauthorization_popup_footer']/div/input[1]")
		public static WebElement  lineWiseAuthorizationOkBtn;
		
		@FindBy(xpath="//div[@class='btn toolbar_button default_padding_toolbar_button']//span[@class='icon-close icon-font6']")
		public static WebElement  lineWiseAuthorizationCancelBtn;
		
		
		@FindBy(xpath="//input[@id='id_transaction_authorization_grid_control_heading_ctrl_2']")
		public static WebElement  lineWiseAuthHeaderChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_1-2']/input")
		public static WebElement  lineWiseAuthRow1ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_2-2']/input")
		public static WebElement  lineWiseAuthRow2ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_3-2']/input")
		public static WebElement  lineWiseAuthRow3ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_4-2']/input")
		public static WebElement  lineWiseAuthRow4ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_5-2']/input")
		public static WebElement  lineWiseAuthRow5ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_6-2']/input")
		public static WebElement  lineWiseAuthRow6ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_7-2']/input")
		public static WebElement  lineWiseAuthRow7ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_8-2']/input")
		public static WebElement  lineWiseAuthRow8ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_9-2']/input")
		public static WebElement  lineWiseAuthRow9ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_10-2']/input")
		public static WebElement  lineWiseAuthRow10ChkBox;
		
		
		
		@FindBy(xpath="//span[@id='id_headrightsymbol']")
		public static WebElement  lineWiseAuthHeaderAuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_1-1']/span[1]")
		public static WebElement  lineWiseAuthRow1AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_2-1']/span[1]")
		public static WebElement  lineWiseAuthRow2AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_3-1']/span[1]")
		public static WebElement  lineWiseAuthRow3AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_4-1']/span[1]")
		public static WebElement  lineWiseAuthRow4AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_5-1']/span[1]")
		public static WebElement  lineWiseAuthRow5AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_6-1']/span[1]")
		public static WebElement  lineWiseAuthRow6AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_7-1']/span[1]")
		public static WebElement  lineWiseAuthRow7AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_8-1']/span[1]")
		public static WebElement  lineWiseAuthRow8AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_9-1']/span[1]")
		public static WebElement  lineWiseAuthRow9AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_10-1']/span[1]")
		public static WebElement  lineWiseAuthRow10AuthorizeBtn;
		
		
		
		@FindBy(xpath="//span[@id='id_headremovesymbol']")
		public static WebElement  lineWiseAuthHeaderRejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_1-1']/span[2]")
		public static WebElement  lineWiseAuthRow1RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_2-1']/span[2]")
		public static WebElement  lineWiseAuthRow2RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_3-1']/span[2]")
		public static WebElement  lineWiseAuthRow3RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_4-1']/span[2]")
		public static WebElement  lineWiseAuthRow4RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_5-1']/span[2]")
		public static WebElement  lineWiseAuthRow5RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_6-1']/span[2]")
		public static WebElement  lineWiseAuthRow6RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_7-1']/span[2]")
		public static WebElement  lineWiseAuthRow7RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_8-1']/span[2]")
		public static WebElement  lineWiseAuthRow8RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_9-1']/span[2]")
		public static WebElement  lineWiseAuthRow9RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_10-1']/span[2]")
		public static WebElement  lineWiseAuthRow10RejectBtn;
		
		
		
		@FindBy(xpath="//span[@id='id_headbansymbol']")
		public static WebElement  lineWiseAuthHeaderBanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_1-1']/span[3]")
		public static WebElement  lineWiseAuthRow1BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_2-1']/span[3]")
		public static WebElement  lineWiseAuthRow2BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_3-1']/span[3]")
		public static WebElement  lineWiseAuthRow3BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_4-1']/span[3]")
		public static WebElement  lineWiseAuthRow4BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_5-1']/span[3]")
		public static WebElement  lineWiseAuthRow5BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_6-1']/span[3]")
		public static WebElement  lineWiseAuthRow6BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_7-1']/span[3]")
		public static WebElement  lineWiseAuthRow7BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_8-1']/span[3]")
		public static WebElement  lineWiseAuthRow8BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_9-1']/span[3]")
		public static WebElement  lineWiseAuthRow9BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_10-1']/span[3]")
		public static WebElement  lineWiseAuthRow10BanBtn;
		
		
		
		
		
		//Voucher Entry Page Header Fields
		@FindBy(xpath="//input[@id='id_header_1']")
		public static WebElement  documentNumberTxt;
		
		@FindBy(xpath="//*[@id='id_header_1_input_image']/span")
		public static WebElement  documentNumberdropdown_ExpansionBtn;
		
		@FindBy(xpath="//input[@id='id_header_2']")
		public static WebElement  dateTxt;
		
		@FindBy(xpath="//td[@id='id_header_2_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
		public static WebElement  dateTxt_CalenderBtn;
		
		@FindBy(xpath="//tr[@id='id_header_2_day_today']//span[@class='theme_color-inverse'][contains(text(),'Today')]")
		public static WebElement  calender_TodayBtn;
		
		@FindBy(xpath="//input[@id='id_header_4']")
		public static WebElement  caskBankAccountTxt;
		
		@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
		public static WebElement  caskBankAccount_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
		public static WebElement  cashBankAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
			public static WebElement  cashBankAccount_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
			public static WebElement  cashBankAccount_Settings_StandardFieldsBtn;
									
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
						public static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Fielddropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
						public static WebElement  cashBankAccount_Settings_StandardFieldsBtn_HeaderTxt;
														
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
						public static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
						public static WebElement  cashBankAccount_Settings_StandardFieldsBtn_WidthTxt;
															
						@FindBy(xpath="//div[@class='panel']//input[3]")
						public static WebElement  cashBankAccount_Settings_StandardFieldsBtn_OkBtn;
															
						@FindBy(xpath="//div[@class='panel']//input[4]")
						public static WebElement  cashBankAccount_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
			public static WebElement  cashBankAccount_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  cashBankAccount_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  cashBankAccount_Settings_CancelBtn;
				
		@FindBy(xpath="//input[@id='id_header_268435459']")
		public static WebElement  departmentTxt;
		
		@FindBy(xpath="//input[@id='id_header_268435470']")
		public static WebElement  placeOfSupplyTxt;
		
		@FindBy(xpath="//*[@id='id_header_268435459_input_image']/span")
		public static WebElement  department_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_268435459_input_settings']/span")
		public static WebElement  department_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_container']")
			public static WebElement  department_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_footer']//input[1]")
			public static WebElement  department_Settings_StandardFieldsBtn;
							
				@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_list']")
				public static WebElement  department_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_header']")
				public static WebElement  department_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_alignment']")
				public static WebElement  department_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_width']")
				public static WebElement  department_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[@class='panel']//input[3]")
				public static WebElement  department_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[@class='panel']//input[4]")
				public static WebElement  department_Settings_StandardFieldsBtn_CancelBtn;
							
									
			@FindBy(xpath="//div[@id='id_header_268435459_search_container']//input[2]")
			public static WebElement  department_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  department_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  department_Settings_CancelBtn;

		@FindBy(xpath="//*[@id='id_header_6']")
		public static WebElement  maturityDateTxt;
		
		@FindBy(xpath="//*[@id='id_header_6_input_image']/span']")
		public static WebElement  maturityDateTxt_CalenderBtn;
		
		@FindBy(xpath="//input[@id='id_header_3']")
		public static WebElement  purchaseAccountTxt;
		
		@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
		public static WebElement  purchaseAccount_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
		public static WebElement  purchaseAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
			public static WebElement  purchaseAccount_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
			public static WebElement  purchaseAccount_Settings_StandardFieldsBtn;
							
				@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
				public static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
				public static WebElement  purchaseAccount_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
				public static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
				public static WebElement  purchaseAccount_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[@class='panel']//input[3]")
				public static WebElement  purchaseAccount_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[@class='panel']//input[4]")
				public static WebElement  purchaseAccount_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
			public static WebElement  purchaseAccount_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  purchaseAccount_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  purchaseAccount_Settings_CancelBtn;


	@FindBy(xpath="//input[@id='id_header_4']")
	public static WebElement  vendorAccountTxt;

	@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
	public static WebElement  vendorAccount_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	public static WebElement  vendorAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
			public static WebElement  vendorAccount_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
			public static WebElement  vendorAccount_Settings_StandardFieldsBtn;
									
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
						public static WebElement  vendorAccount_Settings_StandardFieldsBtn_Fielddropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
						public static WebElement  vendorAccount_Settings_StandardFieldsBtn_HeaderTxt;
														
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
						public static WebElement  vendorAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
						public static WebElement  vendorAccount_Settings_StandardFieldsBtn_WidthTxt;
															
						@FindBy(xpath="//div[@class='panel']//input[3]")
						public static WebElement  vendorAccount_Settings_StandardFieldsBtn_OkBtn;
															
						@FindBy(xpath="//div[@class='panel']//input[4]")
						public static WebElement  vendorAccount_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
			public static WebElement  vendorAccount_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  vendorAccount_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  vendorAccount_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_header_3']")
	public static WebElement  salesAccountTxt;

	@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
	public static WebElement  salesAccount_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
	public static WebElement  salesAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
			public static WebElement  salesAccount_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
			public static WebElement  salesAccount_Settings_StandardFieldsBtn;
									
						@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
						public static WebElement  salesAccount_Settings_StandardFieldsBtn_Fielddropdown;
															
						@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
						public static WebElement  salesAccount_Settings_StandardFieldsBtn_HeaderTxt;
														
						@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
						public static WebElement  salesAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
															
						@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
						public static WebElement  salesAccount_Settings_StandardFieldsBtn_WidthTxt;
															
						@FindBy(xpath="//div[@class='panel']//input[3]")
						public static WebElement  salesAccount_Settings_StandardFieldsBtn_OkBtn;
															
						@FindBy(xpath="//div[@class='panel']//input[4]")
						public static WebElement  salesAccount_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
			public static WebElement  salesAccount_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  salesAccount_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  salesAccount_Settings_CancelBtn;

		@FindBy(xpath="//input[@id='id_header_4']")
		public static WebElement  customerAccountTxt;
		
		@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
		public static WebElement  customerAccount_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
		public static WebElement  customerAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
			public static WebElement  customerAccount_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
			public static WebElement  customerAccount_Settings_StandardFieldsBtn;
									
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
						public static WebElement  customerAccount_Settings_StandardFieldsBtn_Fielddropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
						public static WebElement  customerAccount_Settings_StandardFieldsBtn_HeaderTxt;
														
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
						public static WebElement  customerAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
						public static WebElement  customerAccount_Settings_StandardFieldsBtn_WidthTxt;
															
						@FindBy(xpath="//div[@class='panel']//input[3]")
						public static WebElement  customerAccount_Settings_StandardFieldsBtn_OkBtn;
															
						@FindBy(xpath="//div[@class='panel']//input[4]")
						public static WebElement  customerAccount_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
			public static WebElement  customerAccount_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  customerAccount_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  customerAccount_Settings_CancelBtn;
		
		@FindBy(xpath="//input[@id='id_header_12']")
		public static WebElement  accountTxt;
		
		@FindBy(xpath="//*[@id='id_header_12_input_image']/span")
		public static WebElement  account_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
		public static WebElement  account_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
			public static WebElement  account_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
			public static WebElement  account_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
				public static WebElement  account_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
				public static WebElement  account_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
				public static WebElement  account_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
				public static WebElement  account_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[@class='panel']//input[3]")
				public static WebElement  account_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[@class='panel']//input[4]")
				public static WebElement  account_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
			public static WebElement  account_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  account_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  account_Settings_CancelBtn;
		
		@FindBy(xpath="//input[@id='id_header_31']")
		public static WebElement  issuesReceiptsTxt;
		
		
		@FindBy(xpath="//*[@id='id_header_268435460_input_image']/span")
		public static WebElement  wareHouse_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_268435460_input_settings']/span")
		public static WebElement  wareHouse_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_container']")
			public static WebElement  wareHouse_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_footer']//input[1]")
			public static WebElement  wareHouse_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_list']")
				public static WebElement  wareHouse_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_header']")
				public static WebElement  wareHouse_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_alignment']")
				public static WebElement  wareHouse_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_width']")
				public static WebElement  wareHouse_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[@class='panel']//input[3]")
				public static WebElement  wareHouse_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[@class='panel']//input[4]")
				public static WebElement  wareHouse_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_header_268435460_search_container']//input[2]")
			public static WebElement  wareHouse_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  wareHouse_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  wareHouse_Settings_CancelBtn;
		
		@FindBy(xpath="//span[contains(text(),'sName')]")
		public static WebElement  customize_sName;
		
		@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Code')]")
		public static WebElement  customize_sCode;
		
		@FindBy(xpath="//span[contains(text(),'Alias')]")
		public static WebElement  customize_Alias;
		
		@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Group')]")
		public static WebElement  customize_bGroup;
		
		@FindBy(xpath="//span[contains(@class,'vcenter')][contains(text(),'Balance')]")
		public static WebElement  customize_Balance;
		
		@FindBy(xpath="//input[@id='id_header_67108920']")
		public static WebElement  appropriateBasedOndropdown;
		
		@FindBy(xpath="//input[@id='id_header_67108921']")
		public static WebElement  additionalValueTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108924']")
		public static WebElement  narrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_21']")
		public static WebElement  raiseReceiptsChkBox;
		
		@FindBy(xpath="//input[@id='id_header_67108865']")
		public static WebElement  receipts_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108868']")
		public static WebElement  payments_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108871']")
		public static WebElement  pettyCash_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108874']")
		public static WebElement  postDatedReceipts_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108865']")
		public static WebElement  postDatedPayments_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108880']")
		public static WebElement  purchaseVouchers_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108881']")
		public static WebElement  purchaseReturns_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108884']")
		public static WebElement  salesInvoice_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108886']")
		public static WebElement  salesOrder_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108928']")
		public static WebElement  salesInvoiceNewNarrationTxt;
		
		
		@FindBy(xpath="//input[@id='id_header_67108885']")
		public static WebElement  salesReturns_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108913']")
		public static WebElement  cashSales_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108914']")
		public static WebElement  hirePurchaseSales_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108890']")
		public static WebElement  journalEntries_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108916']")
		public static WebElement  forexJV_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108910']")
		public static WebElement  interDepartmentalJV_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108888']")
		public static WebElement  nonStandardJournalEntries_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108892']")
		public static WebElement  debitNotes_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108911']")
		public static WebElement  debitNotesLineWise_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108893']")
		public static WebElement  creditNotes_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108912']")
		public static WebElement  creditNotesLineWisePayroll_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108894']")
		public static WebElement  openingBalance_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108891']")
		public static WebElement  fixedAssetDepreciationVoucher_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108909']")
		public static WebElement  requestForQuote_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108903']")
		public static WebElement  purchasesQuotations_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108882']")
		public static WebElement  purchasesOrders_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108882']")
		public static WebElement  materialReceiptsNotes_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108904']")
		public static WebElement  salesQuotationss_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108887']")
		public static WebElement  deliveryNotes_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108917']")
		public static WebElement  posSales_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108918']")
		public static WebElement  productionOrder_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108886']")
		public static WebElement  salesOrders_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108895']")
		public static WebElement  shortagesinStock_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108896']")
		public static WebElement  excessesinStocks_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108897']")
		public static WebElement  stockTransfers_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108898']")
		public static WebElement  openingStocks_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108925']")
		public static WebElement  openingStocksNEW_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108908']")
		public static WebElement  materialRequisition_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108866']")
		public static WebElement  receipts_ChequeNoTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108869']")
		public static WebElement  payments_ChequeNoTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108872']")
		public static WebElement  pettyCash_ChequeNoTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108875']")
		public static WebElement  postDatedReceipts_ChequeNoTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108878']")
		public static WebElement  postDatedPayments_ChequeNoTxt;



		//Voucher Entry Page Body Fields
		
		@FindBy(xpath="//input[@id='id_body_536870916']")
		public static WebElement  pvWareHouseTxt;
		
		@FindBy(xpath="//td[@id='id_body_536870916_input_image']//span[@class='icon-down-arrow optioncontrol_arrow_margin']")
		public static WebElement  pvWareHouse_ExpansionBtn;
		
		@FindBy(xpath="//td[@id='id_body_536870916_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
		public static WebElement  pvWareHouse_SettingsBtn;

			@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_container']")
			public static WebElement  pvWareHouse_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_footer']//input[1]")
			public static WebElement  pvWareHouse_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_list']")
				public static WebElement  pvWareHouse_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_header']")
				public static WebElement  pvWareHouse_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_alignment']")
				public static WebElement  pvWareHouse_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_width']")
				public static WebElement  pvWareHouse_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[@class='panel']//input[3]")
				public static WebElement  pvWareHouse_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[@class='panel']//input[4]")
				public static WebElement  pvWareHouse_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_body_536870916_search_container']//input[2]")
			public static WebElement  pvWareHouse_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			public static WebElement  pvWareHouse_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			public static WebElement  pvWareHouse_Settings_CancelBtn;
		
		// Grid Elements
		@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
		public static WebElement  grid_Header_Account;
		
		@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
		public static WebElement  grid_Header_Item;
		
		@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
		public static WebElement  grid_Header_DebitAC;
		
		@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_2']")
		public static WebElement  grid_Header_CreditAC;



		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[1]")
		public static WebElement  firstRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[1]")
		public static WebElement  secondRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[1]")
		public static WebElement  thirdRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[1]")
		public static WebElement  fourthRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[1]")
		public static WebElement  fifthRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[1]")
		public static WebElement  sixthRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[1]")
		public static WebElement  seventhRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[1]")
		public static WebElement  eigthRowIndex;
		
		@FindBy(xpath="//*[@id='id_transentry_body_menu']/a[1]")
		public static WebElement  deleteRowBtn;
		
		@FindBy(xpath="//*[@id='id_transentry_body_menu']/a[2]")
		public static WebElement  insertRowBtn;
		
		@FindBy(xpath="//*[@id='id_transentry_body_menu']/a[3]")
		public static WebElement  selectRowBtn;
		
		@FindBy(xpath="//*[@id='id_transentry_body_menu']/a[3]")
		public static WebElement  unSelectRowBtn;
		
		@FindBy(xpath="//*[@id='id_transentry_body_menu']/a[4]")
		public static WebElement  duplicateRowBtn;

		
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[2]")
		public static WebElement  select1stRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[3]")
		public static WebElement  select1stRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[4]")
		public static WebElement  select1stRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[5]")
		public static WebElement  select1stRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[6]")
		public static WebElement  select1stRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[7]")
		public static WebElement  select1stRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[8]")
		public static WebElement  select1stRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[9]")
		public static WebElement  select1stRow_8thColumn;
		
		
		@FindBy(xpath="//*[@id='id_transactionentry_workflow_popup_heading']")
		public static WebElement  workflowPopupLabelName;
		
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[10]")
		public static WebElement  select1stRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[11]")
		public static WebElement  select1stRow_10thColumn;

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[12]")
		public static WebElement  select1stRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[13]")
		public static WebElement  select1stRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[14]")
		public static WebElement  select1stRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[15]")
		public static WebElement  select1stRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[16]")
		public static WebElement  select1stRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[17]")
		public static WebElement  select1stRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[18]")
		public static WebElement  select1stRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[19]")
		public static WebElement  select1stRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[2]")
		public static WebElement  select2ndRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[3]")
		public static WebElement  select2ndRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[4]")
		public static WebElement  select2ndRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[5]")
		public static WebElement  select2ndRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[6]")
		public static WebElement  select2ndRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[7]")
		public static WebElement  select2ndRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[8]")
		public static WebElement  select2ndRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[9]")
		public static WebElement  select2ndRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[10]")
		public static WebElement  select2ndRow_9thColumn;

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[12]")
		public static WebElement  select2ndRow_11thColumn;

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[13]")
		public static WebElement  select2ndRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[11]")
		public static WebElement  select2ndRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[15]")
		public static WebElement  select2ndRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[16]")
		public static WebElement  select2ndRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[17]")
		public static WebElement  select2ndRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[18]")
		public static WebElement  select2ndRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[19]")
		public static WebElement  select2ndRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[20]")
		public static WebElement  select2ndRow_19thColumn;

		
		
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[2]")
		public static WebElement  select3rdRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[3]")
		public static WebElement  select3rdRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[4]")
		public static WebElement  select3rdRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[5]")
		public static WebElement  select3rdRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[6]")
		public static WebElement  select3rdRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[7]")
		public static WebElement  select3rdRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[8]")
		public static WebElement  select3rdRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[9]")
		public static WebElement  select3rdRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[10]")
		public static WebElement  select3rdRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[11]")
		public static WebElement  select3rdRow_10thColumn;

	    @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[12]")
		public static WebElement  select3rdRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[13]")
		public static WebElement  select3rdRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[14]")
		public static WebElement  select3rdRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[15]")
		public static WebElement  select3rdRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[16]")
		public static WebElement  select3rdRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[17]")
		public static WebElement  select3rdRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[18]")
		public static WebElement  select3rdRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[19]")
		public static WebElement  select3rdRow_18thColumn;




		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[2]")
		public static WebElement  select4thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[3]")
		public static WebElement  select4thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[4]")
		public static WebElement  select4thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[5]")
		public static WebElement  select4thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[6]")
		public static WebElement  select4thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[7]")
		public static WebElement  select4thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[8]")
		public static WebElement  select4thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[9]")
		public static WebElement  select4thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[10]")
		public static WebElement  select4thRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[11]")
		public static WebElement  select4thRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[12]")
		public static WebElement  select4thRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[13]")
		public static WebElement  select4thRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[14]")
		public static WebElement  select4thRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[15]")
		public static WebElement  select4thRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[16]")
		public static WebElement  select4thRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[17]")
		public static WebElement  select4thRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[18]")
		public static WebElement  select4thRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[19]")
		public static WebElement  select4thRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[20]")
		public static WebElement  select4thRow_19thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[21]")
		public static WebElement  select4thRow_20thColumn;



		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[2]")
		public static WebElement  select5thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[3]")
		public static WebElement  select5thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[4]")
		public static WebElement  select5thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[5]")
		public static WebElement  select5thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[6]")
		public static WebElement  select5thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[7]")
		public static WebElement  select5thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[8]")
		public static WebElement  select5thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[9]")
		public static WebElement  select5thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[10]")
		public static WebElement  select5thRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[11]")
		public static WebElement  select5thRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[12]")
		public static WebElement  select5thRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[13]")
		public static WebElement  select5thRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[14]")
		public static WebElement  select5thRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[15]")
		public static WebElement  select5thRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[16]")
		public static WebElement  select5thRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[17]")
		public static WebElement  select5thRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[18]")
		public static WebElement  select5thRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[19]")
		public static WebElement  select5thRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[20]")
		public static WebElement  select5thRow_19thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[21]")
		public static WebElement  select5thRow_20thColumn;




		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[2]")
		public static WebElement  select6thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[3]")
		public static WebElement  select6thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[4]")
		public static WebElement  select6thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[5]")
		public static WebElement  select6thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[6]")
		public static WebElement  select6thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[7]")
		public static WebElement  select6thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[8]")
		public static WebElement  select6thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[9]")
		public static WebElement  select6thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[10]")
		public static WebElement  select6thRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[11]")
		public static WebElement  select6thRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[12]")
		public static WebElement  select6thRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[13]")
		public static WebElement  select6thRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[14]")
		public static WebElement  select6thRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[15]")
		public static WebElement  select6thRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[16]")
		public static WebElement  select6thRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[17]")
		public static WebElement  select6thRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[18]")
		public static WebElement  select6thRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[19]")
		public static WebElement  select6thRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[20]")
		public static WebElement  select6thRow_19thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[21]")
		public static WebElement  select6thRow_20thColumn;


		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[2]")
		public static WebElement  select7thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[3]")
		public static WebElement  select7thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[4]")
		public static WebElement  select7thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[5]")
		public static WebElement  select7thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[6]")
		public static WebElement  select7thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[7]")
		public static WebElement  select7thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[8]")
		public static WebElement  select7thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[9]")
		public static WebElement  select7thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[10]")
		public static WebElement  select7thRow_9thColumn;



		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[2]")
		public static WebElement  select8thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[3]")
		public static WebElement  select8thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[4]")
		public static WebElement  select8thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[5]")
		public static WebElement  select8thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[6]")
		public static WebElement  select8thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[7]")
		public static WebElement  select8thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[8]")
		public static WebElement  select8thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[9]")
		public static WebElement  select8thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[10]")
		public static WebElement  select8thRow_9thColumn;


		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[2]")
		public static WebElement  select9thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[3]")
		public static WebElement  select9thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[4]")
		public static WebElement  select9thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[5]")
		public static WebElement  select9thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[6]")
		public static WebElement  select9thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[7]")
		public static WebElement  select9thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[8]")
		public static WebElement  select9thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[9]")
		public static WebElement  select9thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[10]")
		public static WebElement  select9thRow_9thColumn;



		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[2]")
		public static WebElement  select10thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[3]")
		public static WebElement  select10thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[4]")
		public static WebElement  select10thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[5]")
		public static WebElement  select10thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[6]")
		public static WebElement  select10thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[7]")
		public static WebElement  select10thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[8]")
		public static WebElement  select10thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[9]")
		public static WebElement  select10thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[10]")
		public static WebElement  select10thRow_9thColumn;


		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[2]")
		public static WebElement  select11thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[3]")
		public static WebElement  select11thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[4]")
		public static WebElement  select11thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[5]")
		public static WebElement  select11thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[6]")
		public static WebElement  select11thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[7]")
		public static WebElement  select11thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[8]")
		public static WebElement  select11thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[9]")
		public static WebElement  select11thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[10]")
		public static WebElement  select11thRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[2]")
		public static WebElement  select12thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[3]")
		public static WebElement  select12thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[4]")
		public static WebElement  select12thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[5]")
		public static WebElement  select12thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[6]")
		public static WebElement  select12thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[7]")
		public static WebElement  select12thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[8]")
		public static WebElement  select12thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[9]")
		public static WebElement  select12thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[10]")
		public static WebElement  select12thRow_9thColumn;

		@FindBy(xpath="//input[@id='id_body_12']")
		public static WebElement  enter_AccountTxt;
		
		@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
		public static WebElement  enter_Account_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
		public static WebElement  enter_Account_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
			public static WebElement  enter_Account_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
			public static WebElement  enter_Account_Settings_StandardFieldsBtn;
									
						@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
						public static WebElement  enter_Account_Settings_StandardFieldsBtn_Fielddropdown;
															
						@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
						public static WebElement  enter_Account_Settings_StandardFieldsBtn_HeaderTxt;
														
						@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
						public static WebElement  enter_Account_Settings_StandardFieldsBtn_Alignmentdropdown;
															
						@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
						public static WebElement  enter_Account_Settings_StandardFieldsBtn_WidthTxt;
															
						@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
						public static WebElement  enter_Account_Settings_StandardFieldsBtn_OkBtn;
															
						@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
						public static WebElement  enter_Account_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
			public static WebElement  enter_Account_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			public static WebElement  enter_Account_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			public static WebElement  enter_Account_Settings_CancelBtn;

		@FindBy(xpath="//input[@id='id_body_16']")
		public static WebElement  enter_Amount;
		
		@FindBy(xpath="//textarea[@id='id_body_16777219']")
		public static WebElement  enter_Receipts_Remarks;
		
		@FindBy(xpath="//textarea[@id='id_body_16777222']")
		public static WebElement  enter_Payments_Remarks;
		
		@FindBy(xpath="//textarea[@id='id_body_16777225']")
		public static WebElement  enter_PettyCash_Remarks;
		
		@FindBy(xpath="//textarea[@id='id_body_16777228']")
		public static WebElement  enter_PostDatedReceipts_Remarks;
		
		@FindBy(xpath="//textarea[@id='id_body_16777231']")
		public static WebElement  enter_PostDatedPaymentss_Remarks;
		
		@FindBy(xpath="//input[@id='id_body_23']")
		public static WebElement  enter_ItemTxt;
		
		@FindBy(xpath="//*[@id='id_body_23_input_image']/span")
		public static WebElement  item_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_23_input_settings']/span")
		public static WebElement  item_SettingsBtn;

			@FindBy(xpath="//div[@id='id_body_23_customize_popup_container']")
			public static WebElement  item_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_body_23_customize_popup_footer']//input[1]")
			public static WebElement  item_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_list']")
				public static WebElement  item_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_header']")
				public static WebElement  item_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_alignment']")
				public static WebElement  item_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_width']")
				public static WebElement  item_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				public static WebElement  item_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				public static WebElement  item_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_body_23_search_container']//input[2]")
			public static WebElement  item_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			public static WebElement  item_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			public static WebElement  item_Settings_CancelBtn;

		@FindBy(xpath="//input[@id='id_body_24']")
		public static WebElement  enter_UnitTxt;
		
		@FindBy(xpath="//*[@id='id_body_24_input_image']/span")
		public static WebElement  unit_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_24_input_settings']/span")
		public static WebElement  unit_SettingsBtn;

			@FindBy(xpath="//div[@id='id_body_24_customize_popup_container']")
			public static WebElement  unit_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_body_24_customize_popup_footer']//input[1]")
			public static WebElement  unit_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_body_24_customize_popup_standardfields_list']")
				public static WebElement  unit_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_body_24_customize_popup_standardfields_header']")
				public static WebElement  unit_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_body_24_customize_popup_standardfields_alignment']")
				public static WebElement  unit_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_body_24_customize_popup_standardfields_width']")
				public static WebElement  unit_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				public static WebElement  unit_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				public static WebElement  unit_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_body_24_search_container']//input[2]")
			public static WebElement  unit_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			public static WebElement  unit_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			public static WebElement  unit_Settings_CancelBtn;

			
			
			
			
		@FindBy(xpath="//input[@id='id_body_33554460']")
		public static WebElement  enter_AQ;
		
		@FindBy(xpath="//input[@id='id_body_33554461']")
		public static WebElement  enter_FQ;
		
		
		@FindBy(xpath="//input[@id='id_body_33554511']")
		public static WebElement  AQ;
		
		@FindBy(xpath="//input[@id='id_body_33554512']")
		public static WebElement  FQ;
			
		@FindBy(xpath="//input[@id='id_body_26']")
		public static WebElement  enter_Quantity;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[1]/td[2]/input")
		public static WebElement  purchasesOrderspopUpRow1CheckBox;
		
		@FindBy(xpath="//*[@id='id_transactionentry_workflow_popup']/div[2]/div/div[3]/div/input[2]")
		public static WebElement  purchasesOrderspopUpOkBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_workflow_popup_heading']")
		public static WebElement  purchasesOrderspopUpTextElement;
		
		@FindBy(xpath="//input[@id='id_body_35_5']")
		public static WebElement  enter_PurchasesOrders;
		
			@FindBy (xpath="//input[@id='id_transaction_entry_detail_workflow_popup_control_heading_ctrl_1']")
			public static WebElement purchaseOrderLinkHeaderChkBox;
			
			@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_popup_body']/tr")
			public static List<WebElement> purchaseOrderLinkPopupVouchersList;
			
			@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_popup_body']/tr/td[7]")
			public static List<WebElement> purchaseOrderLinkPopupVouchersNoList;
			
			@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_popup_body']/tr/td[2]/input")
			public static List<WebElement> purchaseOrderLinkPopupChkBoxList;
			
			@FindBy (xpath="//*[@id='id_transactionentry_workflow_popup']/div[2]/div/div[3]/div/input[2]")
			public static WebElement purchaseOrderLinkPopupOkBtn;
			
		@FindBy(xpath="//input[@id='id_body_27']")
		public static WebElement  enter_Rate;
		
		@FindBy(xpath="//*[@id='id_body_28']")
		public static WebElement  enter_Gross;
		
		@FindBy(xpath="//input[@id='id_body_22']")
		public static WebElement  enter_Reserve;
		
		@FindBy(xpath="//input[@id='id_body_13']")
		public static WebElement  enter_Batch;
		
		@FindBy(xpath="//input[@id='id_body_38']")
		public static WebElement  enter_RMA;
		
		@FindBy(xpath="//input[@id='id_body_85']")
		public static WebElement  enter_Bin;
		
		@FindBy(xpath="//input[@id='id_body_12']")
		public static WebElement  enter_DebitACTxt;
		
		@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
		public static WebElement  enter_DebitAC_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
		public static WebElement  enter_DebitAC_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
			public static WebElement  enter_DebitAC_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
			public static WebElement  enter_DebitAC_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
				public static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
				public static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
				public static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
				public static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				public static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				public static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
			public static WebElement  enter_DebitAC_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			public static WebElement  enter_DebitAC_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			public static WebElement  enter_DebitAC_Settings_CancelBtn;

		@FindBy(xpath="//input[@id='id_body_39']")
		public static WebElement  enter_CreditACTxt;
		
		@FindBy(xpath="//*[@id='id_body_39_input_image']/span")
		public static WebElement  enter_CreditAC_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_39_input_settings']/span")
		public static WebElement  enter_CreditAC_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_39_customize_popup_container']")
			public static WebElement  enter_CreditAC_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_39_customize_popup_footer']//input[1]")
			public static WebElement  enter_CreditAC_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_list']")
				public static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_header']")
				public static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_alignment']")
				public static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_width']")
				public static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				public static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				public static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_header_39_search_container']//input[2]")
			public static WebElement  enter_CreditAC_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			public static WebElement  enter_CreditAC_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			public static WebElement  enter_CreditAC_Settings_CancelBtn;

		@FindBy(xpath="//input[@id='id_body_18']")
		public static WebElement  enter_DebitTxt;
		
		@FindBy(xpath="//input[@id='id_body_19']")
		public static WebElement  enter_CreditTxt;
		
		@FindBy(xpath="//textarea[@id='id_body_16777241']")
		public static WebElement  enter_NonStandardJournalEntries_RemarksTxt;
		
		@FindBy(xpath="//input[@id='id_body_87']")
		public static WebElement  enter_Warehouse2Txt;
		
		@FindBy(xpath="//*[@id='id_body_87_input_image']/span")
		public static WebElement  enter_Warehouse2_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_87_input_settings']/span")
		public static WebElement  enter_Warehouse2_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_87_customize_popup_container']")
			public static WebElement  enter_WareHouse2_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_87_customize_popup_footer']//input[1]")
			public static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_list']")
				public static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_header']")
				public static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_alignment']")
				public static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_width']")
				public static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				public static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				public static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_header_87_search_container']//input[2]")
			public static WebElement  enter_WareHouse2_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			public static WebElement  enter_WareHouse2_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			public static WebElement  enter_WareHouse2_Settings_CancelBtn;


		// Right Panel InfoSide Bar	
		@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[2]/span")
		public static WebElement  infoSideBarCustomizeBtn;

		@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[3]/span")
		public static WebElement  infoSideBarMinimizeExpandBtn;
			
			@FindBy(xpath="//li[@id='Trans_Dash_Save']//span[text()='Save']")
			public static WebElement  customizeSaveBtn;
			
			@FindBy(xpath="//span[@class='noWrap clsBlueColor'][contains(text(),'Cancel')]")
			public static WebElement  customizeCancelBtn;
			
			@FindBy(xpath="//input[@id='searchBoxTrans']")
			public static WebElement  customizeSearchTxt;
						
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@class='icon-search searchicon']")
			public static WebElement  customizeSearchBtn;
						
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='g']")
			public static WebElement  graphBtn;
						
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='Newgraph']")
				public static WebElement  newGraphOption;
					
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='r']")
			public static WebElement  reportBtn;
				
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewReport']")
				public static WebElement  newReportOption;
						
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='i']")
			public static WebElement  infoPanelBtn;
						
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewInfopanel']")
				public static WebElement  newInfoPanelOption;
				
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='w']")
			public static WebElement  workFlowBtn;
							
					@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewWorkflow']")
					public static WebElement  newWorkFlowOption;
							
			@FindBy(xpath="//a[@id='DocumentInfoOption']")
			public static WebElement  otherDashlets;
							
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//label[contains(@class,'theme_icon-color')][contains(text(),'Document Info')]")
				public static WebElement  documentInfo;

		/*@FindBy(xpath="//span[contains(@class,'icon-left-and-right-panel-icon icon-font6 no_padding_left_right')]")
		public static WebElement  infoSideBarMinimizeExpandBtn;	*/	
				
		@FindBy(xpath="//span[@class='icon-left-and-right-panel-icon icon-font6 no_padding_left_right']")
		public static WebElement  infoSideBarExpandBtn;


		// Footer Section
		@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
		public static WebElement  netLabel;
		
		@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_net']/span[2]")
		public static WebElement  netAmount;


		
		//Navigation of Voucher Menus
		
		// Financial Menu and Sub Menus
		@FindBy(xpath="//span[@class='icon-financial icon-font1']")
		public static WebElement  finacinalsMenu;
		
			@FindBy(xpath="//a[@id='61']//span[contains(text(),'Transactions')]")
			public static WebElement  transactionsExpandBtn;
				
				@FindBy(xpath="//a[@id='2007']//span[contains(text(),'Purchases')]")
				public static WebElement  purchasesExpandBtn;
				
				@FindBy(xpath="//span[contains(text(),'Purchases Vouchers')]")
				public static WebElement  purchaseVouchersBtn;
				
	    //Inventory Menu and Sub Menus		
		@FindBy(xpath="//a[@id='135']")
		public static WebElement  inventoryMenu; 
		
			@FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
			public static WebElement  inventoryTransactionsMenu; 
				
				@FindBy(xpath="//*[@id='139']/span")
				public static WebElement  inventoryTransactionsPurchasesMenu; 
			
					@FindBy(xpath="//*[@id='2010']/span")
					public static WebElement  requestForQuoteVoucher;
					
					@FindBy(xpath="//*[@id='2011']/span")
					public static WebElement  purchasesQuotationsVoucher;
						
					@FindBy(xpath="//a[@id='2012']//span[contains(text(),'Purchases Orders')]")
					public static WebElement  purchasesOrdersVoucher;
				
					@FindBy(xpath="//*[@id='2013']/span")
					public static WebElement  materialReceiptNotesVoucher;
						
				@FindBy(xpath="//*[@id='140']/span")
				public static WebElement  inventoyTransactionsSalesMenu; 
					
					@FindBy(xpath="//*[@id='2018']/span")
					public static WebElement  salesQuotationsVoucher;
					
					@FindBy(xpath="//*[@id='2019']/span")
					public static WebElement  deliveryNotesVoucher;
					
					@FindBy(xpath="//*[@id='2022']/span")
					public static WebElement  posSalesVoucher;
					
					@FindBy(xpath="//*[@id='2045']/span")
					public static WebElement  productionOrdersVoucher;
					
					@FindBy(xpath="//*[@id='2017']/span")
					public static WebElement  salesOrdersVoucher;
								
				@FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
				public static WebElement  inventoryTransactionsStocksMenu; 
					
					@FindBy(xpath="//*[@id='2034']/span")
					public static WebElement  shortagesInStockVoucher;
					
					@FindBy(xpath="//*[@id='2035']/span")
					public static WebElement  excessesInStocksVoucher;
						
					@FindBy(xpath="//*[@id='2036']/span")
					public static WebElement  stockTransfersVoucher;
					
					@FindBy(xpath="//a[@id='2037']//span[contains(text(),'Opening Stocks')]")
					public static WebElement  openingStocksVoucher;
					
					@FindBy(xpath="//span[contains(text(),'Opening Stocks New')]")
					public static WebElement  openingStocksNewVoucher;
					
					@FindBy(xpath="//*[@id='2038']/span")
					public static WebElement  materialRequisitionVoucher;
							
					@FindBy(xpath="//*[@id='2049']/span")
					public static WebElement  stockAdjustmentVoucher;
						
				@FindBy(xpath="//*[@id='164']/span")
				public static WebElement  holdAndUnholdStockVoucher;
				
				@FindBy(xpath="//*[@id='93']/span")
				public static WebElement  stockReconciliation;
				
				@FindBy(xpath="//*[@id='99']/span")
				public static WebElement  stockAllocation;
			
				
	    //Validation and Confirmation messages
				
		@FindBy(xpath="//*[@id='idGlobalError']/div/div[2]")
		public static WebElement errorMessage;
		 
		@FindBy(xpath="//*[@id='idGlobalError']/div/div[1]/button")
		public static WebElement errorMessageCloseBtn;
		
		//Dash board Page
		
		@FindBy(xpath="//*[@id='dashName']")
	    public static WebElement labelDashboard ;
		
		@FindBy(xpath="//*[@id='Select_dash']")
		public static WebElement selectDashboard ;
			
		@FindBy(xpath="//*[@id='Dashboard_AddDash']")
	    public static WebElement newAddDashBoard;
		 
	    @FindBy(xpath="//*[@id='Dashboard_Dash_Config']")
	    public static WebElement dashboardCustomizationSettings;
				
			   
			    
	    //Vouchers Settings Options
		@FindBy(xpath="(//i[@class='icon-save hiconright2'])[1]")
		public static WebElement  settings_updateBtn;
		
		@FindBy(xpath="(//i[@class='icon-close hiconright2'])[1]")
		public static WebElement  settings_closeBtn;
						
			//Documents Tab
			@FindBy(xpath="//div[@class='font-5 theme_background-color-inverse theme_color-inverse']")
			public static WebElement  documentsTab;
			
			@FindBy(xpath="//li[@id='navigationtab1']")
			public static WebElement  documentsTabForMaterialReceiptNotes;
			
			@FindBy(xpath="//span[@id='DocumentLoadMasterPopupBtn']")
			public static WebElement  loadMastersBtn;
				
				@FindBy(xpath="//select[@id='doc_voucherDropDown']")
				public static WebElement  loadmasterDropDown;
				
				@FindBy(xpath="//button[@id='btnSelectDependMaster']")
				public static WebElement  selectAllBtn;
				
				@FindBy(xpath="//button[contains(text(),'Reset')]")
				public static WebElement  resetBtn;
				
				@FindBy(xpath="//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
				public static WebElement  okBtn;
				
				@FindBy(xpath="//*[@id='editScreen_CustomizeButtons']/span[1]")
				public static WebElement  deleteTagBtn;
				
				@FindBy(xpath="//span[@id='DocumentAddGroupPopupBtn']")
				public static WebElement  addGroupBtn;
				
					@FindBy(xpath="//input[@id='doc_GroupName']")
					public static WebElement  groupNameTXt;
					
					@FindBy(xpath="//button[contains(text(),'Add')]")
					public static WebElement  addBtn;
					
					@FindBy(xpath="//div[@class='col-xs-12 form-group']//button[@id='btnCancel']")
					public static WebElement  cancelBtn;

				@FindBy(xpath="//div[@id='voucherTabContent']//span[2]")
				public static WebElement  deletegroupBtn;
				
				@FindBy(xpath="//input[@id='doc_title']")
				public static WebElement  titleTxt;
				
				@FindBy(xpath="//input[@id='doc_baseDocument']")
				public static WebElement  baseDocumentTxt;
				
				@FindBy(xpath="//input[@id='txtbox_doc_Accountdepandency']")
				public static WebElement  accountDependencyTxt;
				
					@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentGainAC')]")
					public static WebElement  iExchangeAdjustmentGainACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentLossAC')]")
					public static WebElement  iExchangeAdjustmentLossACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iPrimaryAccount')]")
					public static WebElement  iPrimaryAccountChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCity')]")
					public static WebElement  iCityChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iDeliveryCity')]")
					public static WebElement  iDeliverycityChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iBankAc')]")
					public static WebElement  iBankACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iPDCDiscountedAC')]")
					public static WebElement  iPDCDiscountedACChkBox;
							
				@FindBy(xpath="//input[@id='txtbox_doc_Productdepandency']")
				public static WebElement  itemDependencyTxt;
				
					@FindBy(xpath="//span[contains(text(),'Outlet__')]")
					public static WebElement  outletChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCostofShortageStockAC')]")
					public static WebElement  iCostofShortageStockACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCostofExcessStockAC')]")
					public static WebElement  iCostofExcessStockACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCostofSaleReturnAC')]")
					public static WebElement  iCostofSaleReturnACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iPurchaseVarianceAC')]")
					public static WebElement  iPurchaseVarianceACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iDefaultBaseUnit')]")
					public static WebElement  iDefaultBaseUnitChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iDefaultSalesUnit')]")
					public static WebElement  iDefaultSalesUnitChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iDefaultPurchaseUnit')]")
					public static WebElement  iDefaultPurchaseUnitChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCostOfIssueAccount')]")
					public static WebElement  iCostOfIssueAccountChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iStocksAccount')]")
					public static WebElement  iStocksAccountChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iSalesAccount')]")
					public static WebElement  iSalesAccountChkBox;
					
					@FindBy(xpath="//li[12]//div[1]//label[1]//span[1]")
					public static WebElement  otherdetails1Box;
					
					@FindBy(xpath="//li[13]//div[1]//label[1]//span[1]")
					public static WebElement  replenishment1ChkBox;
					
					@FindBy(xpath="//span[contains(text(),'Reorder__')]")
					public static WebElement  reorderChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCategory')]")
					public static WebElement  iCategoryChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iWIPAccount')]")
					public static WebElement  iWIPAccountChkBox;
					
					@FindBy(xpath="//span[contains(text(),'Classification__')]")
					public static WebElement  classificationChkBox;
					
					@FindBy(xpath="//li[18]//div[1]//label[1]//span[1]")
					public static WebElement  repelenishment2ChkBox;
					
					@FindBy(xpath="//li[19]//div[1]//label[1]//span[1]")
					public static WebElement  otherDetails2ChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iBin')]")
					public static WebElement  iBinChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iAlternateCategory')]")
					public static WebElement  iAlternateCategoryChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iTaxCode')]")
					public static WebElement  iTaxCodeChkBox;
				
				@FindBy(xpath="//select[@id='doc_Accountdepandency_Filter']")
				public static WebElement  accountfilterDropdown;
				
				@FindBy(xpath="//select[@id='doc_Itemdepandency_Filter']")
				public static WebElement  itemfilterDropdown;
				
				
				// Documents Tab Grid Elements
				
			    // first row 
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-0']")
				public static WebElement  firstrow;
				
				@FindBy(xpath="//div[contains(text(),'Delete Row')]")
				public static WebElement  doc_deleterowBtn;
				
				@FindBy(xpath="//div[contains(text(),'Insert Row')]")
				public static WebElement  doc_insertRowBtn;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-1']")
				public static WebElement  masters1;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-2']")
				public static WebElement  position1;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-3']")
				public static WebElement  showDependency1;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-4']")
				public static WebElement  group1;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-5']")
				public static WebElement  filter1;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-6']")
				public static WebElement  mandatory1;
				
				
				// Second Row // Delete and Insert row are same
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-0']")
				public static WebElement  secondRow;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-1']")
				public static WebElement  masters2;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-2']")
				public static WebElement  position2;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-3']")
				public static WebElement  showDependency2;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-4']")
				public static WebElement  group2;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-5']")
				public static WebElement  filter2;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-6']")
				public static WebElement  mandatory2;
				
				// After clicking // Properties Changes which are same for all rows
				
				@FindBy(xpath="//select[@id='doc_TagsTableMasterDropDown']")
				public static WebElement  masterDropDown;
				
				@FindBy(xpath="//select[@id='doc_TagsPositionDropDown']")
				public static WebElement  positionDropdown;
				
				@FindBy(xpath="//input[@id='txtbox_doc_TagsDepedencyDropDown']")
				public static WebElement  showDependencyDropdown;
				
				@FindBy(xpath="//input[@id='doc_TagsGroupTxtbox']")
				public static WebElement  groupTxt;
				
				@FindBy(xpath="//select[@id='docFilter']")
				public static WebElement  filterDropdown;
				
				@FindBy(xpath="//select[@id='doc_MandatoryDropDown']")
				public static WebElement  mandatoryDropDown;
				
				
				
				
				//Financials Menu // Opening Balance Voucher Page
				
				@FindBy(xpath="//*[@id='60']")
				public static WebElement  financialsMenu; 
				
					@FindBy(xpath="//*[@id='61']/span")
					public static WebElement  financialsTransactionMenu; 		

						@FindBy(xpath="//*[@id='2001']/span")
						public static WebElement  cashAndBankMenu; 
						
				     		@FindBy(xpath="//*[@id='2002']/span")
							public static WebElement  receiptsVoucher;
							
							@FindBy(xpath="//*[@id='2003']/span")
							public static WebElement  paymentsVoucher;
							
							@FindBy(xpath="//*[@id='2004']/span")
							public static WebElement  pettyVoucher;
							
							@FindBy(xpath="//*[@id='2005']/span")
							public static WebElement  postDatedReceiptsVoucher;
										
							@FindBy(xpath="//*[@id='2006']/span")
							public static WebElement  postDatedPaymentsVoucher;
							
							@FindBy(xpath="//*[@id='108']/span")
							public static WebElement  defineChequeSeries;
							
							@FindBy(xpath="//*[@id='109']/span")
							public static WebElement  cancelCheque;				
			
						@FindBy(xpath="//*[@id='2007']/span")
						public static WebElement  financialsTransactionsPurchaseMenu; 
						
							@FindBy(xpath="//*[@id='2008']/span")
							public static WebElement  purchaseVoucher;
							
							@FindBy(xpath="//*[@id='2009']/span")
							public static WebElement  purchaseReturnsVoucher;
													
						@FindBy(xpath="//*[@id='2014']/span")
						public static WebElement  financialsTransactionsSalesMenu;
							
							@FindBy(xpath="//*[@id='2015']/span")
							public static WebElement  salesInvoicesVoucher;
							
							@FindBy(xpath="//*[@id='2016']/span")
							public static WebElement  salesReturnsVoucher;
							
							@FindBy(xpath="//a[@id='2060']/span")
							public static WebElement  salesInvoiceVATVoucher;
							
							
							
							
							/*@FindBy(xpath="//*[@id='2020']/span")
							public static WebElement  cashSales;
									
							@FindBy(xpath="//*[@id='2021']/span")
							public static WebElement  hirePurchaseSales;*/
						
						@FindBy(xpath="//*[@id='2023']/span")
						public static WebElement  financialsTransactionsJournalsMenu;
						
						    @FindBy(xpath="//*[@id='2032']/span")
							public static WebElement  journalsEntriesVoucher;
							
							@FindBy(xpath="//*[@id='2025']/span")
							public static WebElement  forexJVVoucher;
							
							@FindBy(xpath="//*[@id='2029']/span")
							public static WebElement  interdepartmentaljvVoucher;
							
							@FindBy(xpath="//*[@id='2024']/span")
							public static WebElement  oldJouranlEntriesVoucher;
							
							@FindBy(xpath="//*[@id='2026']/span")
							public static WebElement  debitNotesVoucher;
							
							@FindBy(xpath="//*[@id='2030']/span")
							public static WebElement  debitNotesLinewiseVoucher;
							
							@FindBy(xpath="//*[@id='2027']/span")
							public static WebElement  creditNotesVoucher;
							
							@FindBy(xpath="//*[@id='2031']/span")
							public static WebElement  creditNotesLinewiseVoucher;
							
							@FindBy(xpath="//*[@id='2028']/span")
							public static WebElement  openingBalancesVoucher;
							
							@FindBy(xpath="//*[@id='2046']/span")
							public static WebElement  fixedAssetsDepreciationVoucher;
						
						@FindBy(xpath="//*[@id='219']/span")
						public static WebElement  financialsTransactionsAutoPostingsMenu;
						
							@FindBy(xpath="//*[@id='77']/span")
							public static WebElement  recurringJournalVoucher;
							
							@FindBy(xpath="//*[@id='79']/span")
							public static WebElement  postRecurringJournal;
							
							@FindBy(xpath="//*[@id='92']/span")
							public static WebElement  recurringJournalTemplate;
							
							@FindBy(xpath="//*[@id='91']/span")
							public static WebElement  postInterest;
							
							@FindBy(xpath="//*[@id='90']/span")
							public static WebElement  convertMaturedPDCs;
							
							@FindBy(xpath="//*[@id='161']/span")
							public static WebElement assignPDCLimit;
							
							@FindBy(xpath="//*[@id='166']/span")
							public static WebElement  stockReplenishment;

					@FindBy(xpath="//*[@id='62']/span")
					public static WebElement  financialsCreditManagementMenu; 
					
						@FindBy(xpath="//*[@id='63']/span")
						public static WebElement  paymentTerms;
						
						@FindBy(xpath="//*[@id='64']/span")
						public static WebElement  financeTerms;
						
						@FindBy(xpath="//*[@id='65']/span")
						public static WebElement  reminderTerms;		
						
						@FindBy(xpath="//*[@id='89']/span")
						public static WebElement  sendReminder;
						
						@FindBy(xpath="//*[@id='217']/span")
						public static WebElement  delinquency;
						
							@FindBy(xpath="//*[@id='73']/span")
							public static WebElement  questionnarie;
							
							@FindBy(xpath="//*[@id='218']/span")
							public static WebElement  delinquencyMgmt;
							
						@FindBy(xpath="//*[@id='35']/span")
						public static WebElement  creidtApproval;
						
				    @FindBy(xpath="//*[@id='81']/span")
				    public static WebElement  financialsReportsMenu; 
				    
					    @FindBy(xpath="//*[@id='500']/span")
						public static WebElement  ledger;
			
						@FindBy(xpath="//*[@id='658']/span")
						public static WebElement  ledgerDetail;
			
						@FindBy(xpath="//*[@id='501']/span")
						public static WebElement  subLedger;
						
						@FindBy(xpath="//*[@id='82']/span")
						public static WebElement  cashAndBankBooksMenu;
						
							@FindBy(xpath="//*[@id='510']/span")
							public static WebElement  cashBookReport;
							
							@FindBy(xpath="//*[@id='511']/span")
							public static WebElement  bankBookReport;
							
							@FindBy(xpath="//*[@id='512']/span")
							public static WebElement  pettyCashBokReport;
							
							@FindBy(xpath="//*[@id='513']/span")
							public static WebElement  dayBookReport;
							
							@FindBy(xpath="//*[@id='83']/span")
							public static WebElement  bankReconciliationReport;
							
							@FindBy(xpath="//*[@id='84']/span")
							public static WebElement  bankReconciliationImport;
							
							@FindBy(xpath="//*[@id='85']/span")
							public static WebElement  customerVendorReconciliation;
						
							@FindBy(xpath="//*[@id='537']/span")
							public static WebElement  bankReconciliationStatement;
								
							@FindBy(xpath="//*[@id='162']/span")
							public static WebElement chequeDiscountingMenu;
						
						@FindBy(xpath="//*[@id='502']/span")
						public static WebElement  salesReportsMenu;
						
							@FindBy(xpath="//*[@id='503']/span")
							public static WebElement  salesRegisterReport;
			
							@FindBy(xpath="//*[@id='504']/span")
							public static WebElement  salesReturnRegisterReport;
							
							@FindBy(xpath="//*[@id='505']/span")
							public static WebElement summarySalesBookReport;
							
							@FindBy(xpath="//*[@id='628']/span")
							public static WebElement monthlySalesBookReport;
							
							@FindBy(xpath="//*[@id='629']/span")
							public static WebElement  topCustomersListReport;
						
						@FindBy(xpath="//*[@id='506']/span")
						public static WebElement  purchaseReportsMenu;
						
							@FindBy(xpath="//*[@id='507']/span")
							public static WebElement  purchaseRegisterReport;
							
							@FindBy(xpath="//*[@id='508']/span")
							public static WebElement  purchaseReturnRegisteReport;
							
							@FindBy(xpath="//*[@id='509']/span")
							public static WebElement  summaryPurchaseBookReport;
									
						@FindBy(xpath="//*[@id='514']/span")
						public static WebElement  registersReportMenu;
						
							@FindBy(xpath="//*[@id='516']/span")
							public static WebElement  openingBalanceRegisterReport;
							
							@FindBy(xpath="//*[@id='515']/span")
							public static WebElement journalEntriesRegisterReport;
							
							@FindBy(xpath="//span[contains(text(),'Credit Note Register')]")
							public static WebElement creditNoteRegisterReport;
							
							@FindBy(xpath="//*[@id='610']/span")
							public static WebElement  debitNoteRegisterReport;
							
							@FindBy(xpath="//*[@id='598']/span")
							public static WebElement  receiptsRegisterReport;
							
							@FindBy(xpath="//*[@id='599']/span")
							public static WebElement  paymentRegisterReport;
							
							@FindBy(xpath="//*[@id='518']/span")
							public static WebElement  pdcReceiptsRegisterReport;
							
							@FindBy(xpath="//*[@id='519']/span")
							public static WebElement pdcPaymentsRegisterReport;
							
							@FindBy(xpath="//*[@id='517']/span")
							public static WebElement  entryJournalRegisterMenu;
									
						@FindBy(xpath="//*[@id='523']/span")
						public static WebElement  salesAndPurchasesReportMenu;
						
							@FindBy(xpath="//*[@id='524']/span")
							public static WebElement  salesGroupedByCustomerReport;
							
							@FindBy(xpath="//*[@id='525']/span")
							public static WebElement  salesGroupedByProductReport;
							
							@FindBy(xpath="//*[@id='526']/span")
							public static WebElement  salesGroupedByDepartmentReport;
							
							@FindBy(xpath="//*[@id='527']/span")
							public static WebElement  purchasesGroupedByVendorReport;
							
							@FindBy(xpath="//*[@id='528']/span")
							public static WebElement  purchasesGroupedByProductReport;
							
							@FindBy(xpath="//*[@id='529']/span")
							public static WebElement  purchasesGroupedByDepartmentReport;		
						
						@FindBy(xpath="//*[@id='568']/span")
						public static WebElement  MiscellaneousAnalysisReportMenu;
						
							@FindBy(xpath="//*[@id='569']/span")
							public static WebElement  peakAndLowBalancesReport;
							
							@FindBy(xpath="//*[@id='570']/span")
							public static WebElement  comprativeAnalysisReport;
							
							@FindBy(xpath="//*[@id='571']/span")
							public static WebElement  transactionsTypeAnalysisReport;
							
							@FindBy(xpath="//*[@id='572']/span")
							public static WebElement  abcAnalysisReport;
							
							@FindBy(xpath="//*[@id='597']/span")
							public static WebElement  interestCalculationReport;
			
						@FindBy(xpath="//*[@id='536']/span")
						public static WebElement  mastersInformationMenu;
						
					     	@FindBy(xpath="//*[@id='538']/span")
							public static WebElement  masterInfoMenu;
							
							@FindBy(xpath="//*[@id='144']/span")
							public static WebElement  productLabelMenu;
							
							@FindBy(xpath="//*[@id='573']/span")
							public static WebElement  unitConversionMenu;
								
							@FindBy(xpath="//*[@id='147']/span")
							public static WebElement  skidDefinitionMenu;
											
						@FindBy(xpath="//*[@id='520']/span")
						public static WebElement  auditTrailMenu;
						
							@FindBy(xpath="//*[@id='521']/span")
							public static WebElement  auditTrailtransactionsReport;
							
							@FindBy(xpath="//*[@id='522']/span")
							public static WebElement  aAuditTrailloginsReport;
						
						@FindBy(xpath="//*[@id='204']/span")
						public static WebElement  accountQuery;
						
				    @FindBy(xpath="//*[@id='530']/span")
				    public static WebElement  financialsFinalAccountsMenu; 
				    
					    @FindBy(xpath="//*[@id='531']/span")
						public static WebElement trialBalanceReport;
								
						@FindBy(xpath="//*[@id='532']/span")
						public static WebElement profitandLossReport;
						
						@FindBy(xpath="//*[@id='533']/span")
						public static WebElement  tradingAccountReport;
						
						@FindBy(xpath="//*[@id='534']/span")
						public static WebElement  tradingandProfitAndLossReport;
						
						@FindBy(xpath="//*[@id='535']/span")
						public static WebElement  balanceSheetReport;				
						
						@FindBy(xpath="//*[@id='592']/span")
						public static WebElement  finalAccountSchedulesReport;
						
						@FindBy(xpath="//*[@id='593']/span")
						public static WebElement  fundFlowReport;
						
						@FindBy(xpath="//*[@id='594']/span")
						public static WebElement  cashFlowReport;
						
						@FindBy(xpath="//*[@id='252']/span")
						public static WebElement  cashFlowCalendarReport;
						
						@FindBy(xpath="//*[@id='595']/span")
						public static WebElement  cashFlowAnalysisReport;
						
						@FindBy(xpath="//*[@id='632']/span")
						public static WebElement  advanceCashFlowReport;
						
						@FindBy(xpath="//*[@id='630']/span")
						public static WebElement  incomeExpenseTrendsReport;
						
						@FindBy(xpath="//*[@id='655']/span")
						public static WebElement  receivablePayableReport;
					
					@FindBy(xpath="//*[@id='558']/span")
					public static WebElement  financialsReceivableAndPayableAnalysisMenu; 
					
						@FindBy(xpath="//*[@id='605']/span")
						public static WebElement customerDetailMenu;
						
							@FindBy(xpath="//*[@id='559']/span")
							public static WebElement  customerListingOfOutstandingBillsReport;
							
							@FindBy(xpath="//*[@id='560']/span")
							public static WebElement  customerStatementsReport;
							
							@FindBy(xpath="//*[@id='560']/span")
							public static WebElement  customerDueDateAnalysisReport;
							
							@FindBy(xpath="//*[@id='563']/span")
							public static WebElement  customerAgeingDetailsReport;
							
							@FindBy(xpath="//*[@id='564']/span")
							public static WebElement  customerDetailAgeingbyDueDateReport;
							
							@FindBy(xpath="//*[@id='566']/span")
							public static WebElement  customerOverdueAnalysisReport;
						
						@FindBy(xpath="//*[@id='607']/span")
						public static WebElement  customerSummaryMenu;
								
							@FindBy(xpath="//*[@id='562']/span")
							public static WebElement  customerAgeingSummaryMenu;
							
							@FindBy(xpath="//*[@id='565']/span")
							public static WebElement  customerSummaryAgeingByDueDateMenu;
							
							@FindBy(xpath="//*[@id='567']/span")
							public static WebElement  customerOverdueSummaryMenu;
							
							@FindBy(xpath="//*[@id='539']/span")
							public static WebElement  customerbillwiseSummaryMenu;	
						
						@FindBy(xpath="//*[@id='606']/span")
						public static WebElement  vendorDetailMenu;
						
							@FindBy(xpath="//*[@id='541']/span")
							public static WebElement  vendorListingoFOutstandingBillsReport;
								
							@FindBy(xpath="//*[@id='542']/span")
							public static WebElement  vendorStatementsReport;
							
							@FindBy(xpath="//*[@id='543']/span")
							public static WebElement  vendorDueDateAnalysisReport;
							
							@FindBy(xpath="//*[@id='545']/span")
							public static WebElement  vendorAgeingDetailsReport;
								
							@FindBy(xpath="//*[@id='546']/span")
							public static WebElement  vendorDetailVendorDetailAgeingByDueDateMenu;
						
							@FindBy(xpath="//*[@id='548']/span")
							public static WebElement  vendorOverdueAnalysisMenu;
							
						@FindBy(xpath="//*[@id='608']/span")
						public static WebElement  vendorSummaryMenu;
						
							@FindBy(xpath="//*[@id='544']/span")
							public static WebElement  vendorAgeingSummaryReport;
							
							@FindBy(xpath="//*[@id='547']/span")
							public static WebElement  vendorSummaryAgeingByDueDateReport;
							
							@FindBy(xpath="//*[@id='549']/span")
							public static WebElement  vendorOverdueSummaryReport;
							
							@FindBy(xpath="//*[@id='634']/span")
							public static WebElement  vendorbillWiseSummaryReport;
						
						@FindBy(xpath="//*[@id='75']/span")
						public static WebElement  letterofCredit;
						
						@FindBy(xpath="//*[@id='165']/span")
						public static WebElement  releaseLetterofCredit;
				
					@FindBy(xpath="//*[@id='3301']/span")
					public static WebElement  financialsBudgetMenu; 
					
						@FindBy(xpath="//*[@id='3302']/span")
						public static WebElement  defineBudgetReport;
						
						@FindBy(xpath="//*[@id='3303']/span")
						public static WebElement  confirmBudgetReport;
						
						@FindBy(xpath="//*[@id='3304']/span")
						public static WebElement  reviseBudgetMenu;
						
							@FindBy(xpath="//*[@id='3305']/span")
							public static WebElement  appendBudget;
							
							@FindBy(xpath="//*[@id='3306']/span")
							public static WebElement  addORReduceBudget;
							
							@FindBy(xpath="//*[@id='3307']/span")
							public static WebElement  transferBudget;
						
						@FindBy(xpath="//*[@id='3309']/span")
						public static WebElement  approveBudgetReport;
						
						@FindBy(xpath="//*[@id='3310']/span")
						public static WebElement  rejectedBudgetReport;
						
						@FindBy(xpath="//*[@id='3321']/span")
						public static WebElement  budgetReportsMenu;
						
							@FindBy(xpath="//*[@id='666']/span")
							public static WebElement  advancedBudgetReportMenu;
							
							@FindBy(xpath="//*[@id='669']/span")
							public static WebElement  revisedBudgetReportMenu;
					
							
					@FindBy(xpath="//*[@id='3311']/span")
					public static WebElement  financialsOnlinePaymentsMenu;   
					
						@FindBy(xpath="//*[@id='3312']/span")
						public static WebElement  onlineBankRegistrationMenu;
						
						@FindBy(xpath="/html/body/section/div[2]/aside/section/ul/li[2]/ul/li[7]/ul/li[2]/a/span")
						public static WebElement  issuePaymentToBankMenu;
						
						@FindBy(xpath="/html/body/section/div[2]/aside/section/ul/li[2]/ul/li[7]/ul/li[3]/a/span")
						public static WebElement  reconcilePaymentsMenu;
						
						@FindBy(xpath="//*[@id='3315']/span")
						public static WebElement  onlineBankReconcilationMenu;
						
						@FindBy(xpath="//*[@id='3317']/span")
						public static WebElement  bankStatementMenu;	
					    
						@FindBy(xpath="//a[text()='Dashboard']")
						public static WebElement dashboard;
						
						
						@FindBy(xpath = "//a[text()='Pending Purchases Orders']")
						public static WebElement pendingPurchasesOrdersLink;
						
						@FindBy(xpath = "//*[@id='id_TransHomeFilter']")
						public static WebElement filterVoucher;
						
						@FindBy(xpath = "//*[text()='Filter']")
						public static WebElement filterPopupTxt;
						
						@FindBy(xpath = "//*[@id='idFilterCustomizeIcon']")
						public static WebElement filterCustomizationIcon;
						
						@FindBy(xpath = "(//*[text()='Customize'])[1]")
						public static WebElement customizationPopupTxt;
						
						@FindBy(xpath = "//*[@id='btnSetFilterVal']")
						public static WebElement defaultFilterPopupOkBtn;
						
						@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
						public static List<WebElement> grid_CheckBoxList;
						
						@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td")
						public static List<WebElement> Row1BodyList;

						@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[5]")
						public static List<WebElement> grid_VoucherNoList;
						
						@FindBy(xpath = "//label[contains(text(),'DocNo')]//..//span")
						public static WebElement docnoCheckBx;
						
						@FindBy(xpath = "(//*[@id='FilterFieldCust_2050_2']/div/div[3]/input[1])[1]")
						public static WebElement customizePopupOkBtn;
						
						@FindBy(xpath = "//*[@id='2050_2_DefaultFilter_0_Start']")
						public static WebElement fromDocNoTxt;
						
						@FindBy(xpath = "//*[@id='2050_2_DefaultFilter_0_End']")
						public static WebElement toDocNoTxt;

						 //Starting Of PurchaseVoucher 
					    
						@FindBy(xpath="//span[contains(text(),'Purchase Vouchers N')]")
						public static WebElement  purchaseVoucherNew;
						
						@FindBy(xpath="//*[@id='id_transaction_homescreen_new']")
						public static WebElement  voucherNewBtn;
						
						@FindBy(xpath="//*[@id='id_prog_spanPlus']")
						public static WebElement programmableExpandBtn; 
						
						@FindBy(xpath="//span[contains(text(),' Programmable Field')]")
						public static WebElement programmableFiledBtn; 
						
						@FindBy(xpath="//p[contains(text(),'Programmable Field')]")
						public static WebElement programmableTab; 
						
						@FindBy(xpath="//p[contains(text(),'Name')]")
						public static WebElement nameTab; 
						
						@FindBy(xpath="//*[@id='formulaControl_textbox']")
						public static WebElement formulaControlTxt; 
						
						@FindBy(xpath="//*[@id='formulaControl_Ok']")
						public static WebElement formulaControlOkBtn; 
						
						@FindBy(xpath="(//*[@id='id_customize_rearrange_Okbtn'])[2]")
						public static WebElement reArrangeFormulaOkBtn; 
						
						
						@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[1]/td")
						public static List<WebElement> workFlowRow1List;
						
						@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[2]/td")
						public static List<WebElement> workFlowRow2List;

						
						@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[1]/a")
						public static WebElement  homePageAllVouchersView;
						
						@FindBy(xpath="//*[@id='btnMoreViews']")
						public static WebElement  homePageMoreBtn;
						
						@FindBy(xpath="//a[contains(text(),'*Pending Authorization Purchase')]")
						public static WebElement  homePagePendingAuthorizationView;
						
						@FindBy(xpath="//a[contains(text(),'Pending Purchases Orders')]")
						public static WebElement  homePagePendingOrdersLinks;
						
						@FindBy(xpath = "//ul[@id='navigation_menu']/li[2]/ul/li/a/span")
						public static List<WebElement> financialsMenusList;
						
						
						@FindBy(xpath="//span[@class='icon-pick']")
						public static WebElement  billRefPickIcon;		
						
						@FindBy(xpath="//span[@class='icon-ok']")
						public static WebElement  billRefOkBtn;		
						
						@FindBy(xpath="//li[@id='id_Cancel']")
						public static WebElement  billRefcancel;	
						
						
						@FindBy(xpath="//*[@id='icon_5']")
						public static WebElement purchasesVouchersExpandBtn;
				
			    
		
				
		 //Views Tab
		@FindBy(xpath="//span[@class='icon-views'")
		public static WebElement  viewsTab;
			
		//Export Fields 
		@FindBy(xpath="//span[contains(text(),'Export Fields')]")
		public static WebElement exportFieldsTab;
			
		//Triggers
		@FindBy(xpath="//span[@class='icon-trigger icon-font7']")
		public static WebElement  triggersTab;	
			
		//Document Numbering
		@FindBy(xpath="//span[contains(text(),'Document Numbering')]")
		public static WebElement  documentNumberingTab;
			
		//Hire Purchase	
		@FindBy(xpath="//span[contains(text(),'Hire Purchase')]")
		public static WebElement hirePurchasetab;
			
		//Reports Tab	
		@FindBy(xpath="//span[@class='icon-text70 icon-font7']")
		public static WebElement  reportsTab;	
		
		//Schemes
		@FindBy(xpath="//span[contains(text(),'Schemes')]")
		public static WebElement schemestab;	
		
		
		// Bin Inward Elements
		
			@FindBy (xpath="//input[@id='id_bins_totalquantity']")
			public static WebElement binTotalQty;
			
			@FindBy (xpath="//div[@class='modal-body']//div[4]")
			public static WebElement binBaseUOM;
			
			@FindBy (xpath="//input[@id='srch_bin']")
			public static WebElement binSearchTxt;
			
			
			
			@FindBy (xpath="//i[@class='icon-search form-control-feedback searchicon searchicon-extra']")
			public static WebElement binSearchBtn; 
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-0']")
			public static WebElement  binselect1stRow_1stColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-1']")
			public static WebElement  binselect1stRow_2ndColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-3']")
			public static WebElement  binselect1stRow_3rdColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-5']")
			public static WebElement  binselect1stRow_4thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-6']")
			public static WebElement  binselect1stRow_5thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-7']")
			public static WebElement  binselect1stRow_6thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-8']")
			public static WebElement  binselect1stRow_7thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-12']")
			public static WebElement  binselect1stRow_8thColumn;
			
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-0']")
			public static WebElement  binselect2ndRow_1stColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-1']")
			public static WebElement  binselect2ndRow_2ndColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-3']")
			public static WebElement  binselect2ndRow_3rdColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-5']")
			public static WebElement  binselect2ndRow_4thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-6']")
			public static WebElement  binselect2ndRow_5thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-7']")
			public static WebElement  binselect2ndRow_6thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-8']")
			public static WebElement  binselect2ndRow_7thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-12']")
			public static WebElement  binselect2ndRow_8thColumn;
			
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-0']")
			public static WebElement  binselect3rdRow_1stColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-1']")
			public static WebElement  binselect3rdRow_2ndColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-3']")
			public static WebElement  binselect3rdRow_3rdColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-5']")
			public static WebElement  binselect3rdRow_4thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-6']")
			public static WebElement  binselect3rdRow_5thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-7']")
			public static WebElement  binselect3rdRow_6thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-8']")
			public static WebElement  binselect3rdRow_7thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-12']")
			public static WebElement  binselect3rdRow_8thColumn;
			
			
			@FindBy(xpath="//span[@class='icon-sum']")
			public static WebElement  binRowSum;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[2]")
			public static WebElement  binRowSum_2ndColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[4]")
			public static WebElement  binSelect4htRow_3rdColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[6]")
			public static WebElement  binRowSum_4thColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[7]")
			public static WebElement  binRowSum_5thColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[8]")
			public static WebElement  binRowSum_6thColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[9]")
			public static WebElement  binRowSum_7thColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[12]")
			public static WebElement  binRowSum_8thColumn;
			
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[13]")
			public static WebElement  binSumInward;
			
			
			
			@FindBy (xpath="//input[@id='id_bins_balance']")
			public static WebElement binBalanceTxt;
			
			@FindBy (xpath="//div[@id='id_btnalternatecategorycheck']//div[@class='toolbar_button_image']")
			public static WebElement binAlternateCategoryCheckBtn;
			
			@FindBy (xpath="//div[@id='id_btnautoallocate']//div[@class='toolbar_button_image']")
			public static WebElement binAutoAllocateBtn;
			
			@FindBy (xpath="//span[@class='icon-pick icon-font4']")
			public static WebElement binPickBtn; 
			
			@FindBy (xpath="//div[@id='id_btnautoallocategroup']//div[@class='toolbar_button_image']")
			public static WebElement binAutoAllocateWithinGroupBtn;
			
			@FindBy (xpath="//input[@id='id_bins_ok']")
			public static WebElement binOkBtn;
			
			@FindBy (xpath="//div[@class='col-xs-9 pull-right']//span[@class='icon-close icon-font6']")
			public static WebElement binCancelBtn;

			
			// RMA POpup Window
			@FindBy (xpath="//div[@id='Modal_Header']/h5")
			public static WebElement rmaScreenTitle;
			
			@FindBy (xpath="//input[@id='txtSerialNo']")
			public static WebElement rmaSerialNumberTxtField;

			@FindBy (xpath="//input[@id='txtQuantity']")
			public static WebElement rmaQuantityTxtField;
			
			@FindBy (xpath="//i[@class='icon icon-add']")
			public static WebElement rmaAddBtn;
				
			@FindBy (xpath="//div[@id='Modal_Search_Body']/div[3]/label")
			public static WebElement rmaNumberofItemsLabel;
			
			@FindBy (xpath="//th[@id='RMA_Table_control_heading_1']/div")
			public static WebElement rmaTableHeadingRMA;
			
			@FindBy (xpath="//th[@id='RMA_Table_control_heading_2']/div")
			public static WebElement rmaTableHeadingDocumentNo;
			
			@FindBy (xpath="//th[@id='RMA_Table_control_heading_3']/div")
			public static WebElement rmaTableHeadingDocumentDate;
			
			@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[1]/label")
			public static WebElement rmaClearBtn;
			
			@FindBy (xpath="//button[@id='div_OK']")
			public static WebElement rmaOkBtn;
			
			@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[3]/label")
			public static WebElement rmaCancelBtn;
			
			@FindBy (xpath="//div[@id='Modal_Header']/div[2]/span/i")
			public static WebElement rmaCloseBtn;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_1-1']")
			public static WebElement rmaTableRow1Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_2-1']")
			public static WebElement rmaTableRow2Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_3-1']")
			public static WebElement rmaTableRow3Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_4-1']")
			public static WebElement rmaTableRow4Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_5-1']")
			public static WebElement rmaTableRow5Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_6-1']")
			public static WebElement rmaTableRow6Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_7-1']")
			public static WebElement rmaTableRow7Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_8-1']")
			public static WebElement rmaTableRow8Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_9-1']")
			public static WebElement rmaTableRow9Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_10-1']")
			public static WebElement rmaTableRow10Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_11-1']")
			public static WebElement rmaTableRow11Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_12-1']")
			public static WebElement rmaTableRow12Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_13-1']")
			public static WebElement rmaTableRow13Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_14-1']")
			public static WebElement rmaTableRow14Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_15-1']")
			public static WebElement rmaTableRow15Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_16-1']")
			public static WebElement rmaTableRow16Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_17-1']")
			public static WebElement rmaTableRow17Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_18-1']")
			public static WebElement rmaTableRow18Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_19-1']")
			public static WebElement rmaTableRow19Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_20-1']")
			public static WebElement rmaTableRow20Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_1-2']")
			public static WebElement rmaTableRow1Column2;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_1-3']")
			public static WebElement rmaTableRow1Column3;
			
			@FindBy (xpath="//td[@id='id_body_38_input_image']/img")
			public static WebElement rmaExpansionBtn;
			
			
			//----------------------------------------------------------------------------------------------------------    
		    // Edit Screen Tab     
					    
		    @FindBy(xpath="//span[contains(text(),'Edit Screen')]")
		   	public static WebElement  editScreenTab; 
			
			@FindBy(xpath="//i[@class='icon-add icon-font7']")
			public static WebElement editScreenaddBtn;

			@FindBy(xpath="//a[contains(text(),'Field Details')]")
			public static WebElement editScreenFieldDetailsTab;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Caption']")
			public static WebElement  editScreenCaptionTxt;

			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_DataType']")
			public static WebElement  editScreenCaptionDataTypeDropdown;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_DefaultValue']")
			public static WebElement editScreenDefaultValueTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_noofDecimals']")
			public static WebElement editScreenNoOfDecimalsDropdown;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_toolTip']")
			public static WebElement editScreenToolTipTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_bannerText']")
			public static WebElement editScreenBannerTextTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_MinValue']")
			public static WebElement editScreenMinimunValueTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_MaxValue']")
			public static WebElement editScreenMaximunValueTxt;
		   
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_behaviour']")
			public static WebElement editScreenAddFieldsBehaviourDropdown;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Formula_textbox']")
			public static WebElement  editScreenAddBehaviourformulaTxt;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Formula_Ok']")
			public static WebElement  editScreenAddBehaviourFormulaokBtn;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
			public static WebElement editScreenPreloadTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
			public static WebElement editScreenRestrictformulaTxt;
		   
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_RoundOff']")
			public static WebElement editScreenRoundOffsDropdown;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RoundOffTo']")
			public static WebElement editScreenRoundOffToTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RestrictMsg']")
			public static WebElement editScreenRestrictMessageTxt;
		   
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToNet']")
			public static WebElement editScreenAddToNetDropdown;
		   
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToStock']")
			public static WebElement editScreenAddToStockDropDown;

			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_Position']")
			public static WebElement editScreenpositionDropdown;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Columnwidth']")
			public static WebElement editScreenColumnWidthTxt;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
			public static WebElement editScreenValueInBaseCurrencyChkBox;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
			public static WebElement editScreenHideFromSummaryChkBox;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkPostToAcc']")
			public static WebElement editScreenPostToAccountChkBox;  
		 
			@FindBy(xpath="//input[@id='acc1-1']")
			public static WebElement editScreenAccount1Radio;  
					   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1']")
			public static WebElement editScreenAccount1Txt;  
		   
			@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_image']/span")
			public static WebElement editScreenAccount1ExpandBtn;  
		   
			@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_settings']/span")
			public static WebElement editScreenAccount1SettingsBtn;  
					   
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_container']")
				public static WebElement editScreenAccount1Container;  
			    
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_footer']//input[1]")
				public static WebElement editScreenAccount1StandardFiledsBtn;  
								    
				    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_list']")
					public static WebElement editScreenAccount1StandardFiledsDropdown;  
				    
				    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_header']")
					public static WebElement editScreenAccount1StandardFiledsHeaderTxt;  
				    
				    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_alignment']")
					public static WebElement editScreenAccount1StandardFiledsAllignmentDropdown; 
				    
				    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_width']")
					public static WebElement editScreenAccount1StandardFiledsWidthTxt;  
				    
				    @FindBy(xpath="//section[@id='page_Content']//input[3]")
					public static WebElement editScreenAccount1StandardFiledsokBtn;  
				    
				    @FindBy(xpath="//section[@id='page_Content']//input[4]")
					public static WebElement editScreenAccount1StandardFiledscancelBtn;  
								    
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_search_container']//input[2]")
				public static WebElement editScreenAccount1deleteColumnBtn;
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[3]")
			   	public static WebElement editScreenAccount1okBtn;  
			       
			    @FindBy(xpath="//section[@id='page_Content']//input[4]")
			   	public static WebElement editScreenAccount1cancelBtn;
					
			@FindBy(xpath="//input[@id='acc2-2']")
			public static WebElement editScreenAccount2Radio;  
			    
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2']")
			public static WebElement editScreenAccount2Txt;  
			    
			@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_image']/span")
			public static WebElement editScreenAccount2ExpandBtn;
		  
		    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_settings']/span")
		  	public static WebElement editScreenAccount2SettingsBtn;  
					      
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_container']")
				public static WebElement editScreenAccount2Container;  
			    
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_footer']//input[1]")
				public static WebElement editScreenAccount2StandardFiledsBtn;  
					  			    
				    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_list']")
					public static WebElement editScreenAccount2StandardFiledsDropdown;  
				    
				    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_header']")
					public static WebElement editScreenAccount2StandardFiledsHeaderTxt;  
				    
				    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_alignment']")
					public static WebElement editScreenAccount2StandardFiledsAllignmentDropdown; 
				    
				    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_width']")
					public static WebElement editScreenAccount2StandardFiledsWidthTxt;  
				    
				    @FindBy(xpath="//section[@id='page_Content']//input[3]")
					public static WebElement editScreenAccount2StandardFiledsokBtn;  
				    
				    @FindBy(xpath="//section[@id='page_Content']//input[4]")
					public static WebElement editScreenAccount2StandardFiledscancelBtn;  
					  			    
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_search_container']//input[2]")
				public static WebElement editScreenAccount2deleteColumnBtn;
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[3]")
			   	public static WebElement editScreenAccount2okBtn;  
			       
			       @FindBy(xpath="//section[@id='page_Content']//input[4]")
			   	public static WebElement editScreenAccount2cancelBtn;
		   
		   @FindBy(xpath="//input[@id='acc1-3']")
		   public static WebElement editScreenAccount1VariableRadio; 
		  
		   @FindBy(xpath="//input[@id='Account_1Var']")
		   public static WebElement editScreenAccount1VariableTxt;
		   
		   @FindBy(xpath="//input[@id='acc2-4']")
		   public static WebElement editScreenAccount2VariableRadio; 
		  
		   @FindBy(xpath="//input[@id='Account_2Var']")
		   public static WebElement editScreenAccount2VariableTxt;
		   
		   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RegularExpr']")
		   public static WebElement editScreenRegularExpTxt; 
		   
		   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_ErrorMsg']")
		   public static WebElement editScreenerrorMessageTxt; 

		 // properties  
		   
		  @FindBy(xpath="//a[contains(text(),'Properties')]")
		  public static WebElement editScreenPropertiesTab;  
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkAuditTrail']")
		  public static WebElement editScreenauditTrailChkBox;  
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantExprt']")
		  public static WebElement editScreencantExportChkBox;  
		  
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantImprt']")
		  public static WebElement editScreencantImportChkbox; 
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkHidden']")
		  public static WebElement editScreenhiddenChkbox;  
		  
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkMandatory']")
		  public static WebElement editScreenmandatorychkBox; 
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkNotAvailForReports']")
		  public static WebElement editScreennotAvailableForReportsChkBox;  
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkReadOnly']")
		  public static WebElement editScreenreadOnlyChkBox;  
		 
		     
		  @FindBy(xpath="//span[contains(text(),'Apply')]")
		  public static WebElement editScreenApplyBtn;  
		     
		  @FindBy(xpath="//span[@id='editScreen_FieldsCustomization_Close']")
		  public static WebElement editScreencloseBtn;  
		  

		 
		  @FindBy(xpath="//a[@href='#editScreen_FieldsCustomization_ExternalModules']")
		  public static WebElement editScreenExternalModulesTab; 
					
			// External Module Tab is named As EFES And ELV For Each Screen (ReceiptsEFES,ReceiptsELV )
		    // External Functions(External Fields) Changes From Screen to Screen
		
			// Formatting Tab
					  
		    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_tabs']/li[3]/a")
		    public static WebElement editScreenformattingTab;

			@FindBy(xpath="//*[@id='fontFamily_editScreen_FieldsCustomization_FontCtrl']")
		    public static WebElement editScreenFontFamilyDropdown;
			
		    @FindBy(xpath="//*[@id='fontStyle_editScreen_FieldsCustomization_FontCtrl']")
		    public static WebElement editScreenFontStyleDropdown;

		    @FindBy(xpath="//*[@id='fontWeight_editScreen_FieldsCustomization_FontCtrl']")
		    public static WebElement editScreenFontWeightDropdown;

			@FindBy(xpath="//*[@id='fontSizes_editScreen_FieldsCustomization_FontCtrl']")
			public static WebElement editScreenFontSizeDropdown;
			
			@FindBy(xpath="//*[@id='fontForeColor_editScreen_FieldsCustomization_FontCtrl']")
			public static WebElement editScreenForeColourDropdown;
			
			@FindBy(xpath="//*[@id='fontBackColor_editScreen_FieldsCustomization_FontCtrl']")
			public static WebElement editScreenBackColourDropdown;
			
			@FindBy(xpath="//*[@id='chkBaseline_editScreen_FieldsCustomization_FontCtrl']")
			public static WebElement editScreenBaseLineCheckbox;
			
			@FindBy(xpath="//*[@id='chkOverLine_editScreen_FieldsCustomization_FontCtrl']")
			public static WebElement editScreenOverLineCheckbox;
			
			@FindBy(xpath="//*[@id='chkStrikeThrough_editScreen_FieldsCustomization_FontCtrl']")
			public static WebElement EditScreenStrikeThroughCheckbox;
			
			@FindBy(xpath="//*[@id='chkUnderline_editScreen_FieldsCustomization_FontCtrl']")
			public static WebElement editScreenUnderlineCheckbox;
			
			@FindBy(xpath="//*[@id='previewfont_editScreen_FieldsCustomization_FontCtrl']")
			public static WebElement editScreenFontPreviewTxt;
			
			@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Formatting_chkenableFont']")
			public static WebElement editScreenenableFontChkbox;
					
			  @FindBy(xpath="//i[@class='icon-copyfields icon-font7']")
			  public static WebElement editScreenLoadFieldsBtn;  
			     
			  @FindBy(xpath="//select[@id='editScreen_voucherDropDown']")
			  public static WebElement editScreenLoadFieldsDropdown;  
			     
			  @FindBy(xpath="//*[@id='editScreen_copyFieldsDiv']/div[3]/button[1]")
			  public static WebElement editScreenselectAllBtn;  
			  
			  @FindBy(xpath="//div[@id='editScreen_copyFieldsDiv']//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
			  public static WebElement editScreenokBtn;  
			     
			  @FindBy(xpath="//input[@id='searchlayout2']")
			  public static WebElement editScreenSearchTxt;  
			     
			  @FindBy(xpath="//button[@id='btnEditScreenPrev']")
			  public static WebElement editScreenPreviousBtn;  
			     
			  @FindBy(xpath="//button[@id='btnEditScreenNext']")
			  public static WebElement editScreenNextBtn;  
			  
			  @FindBy(xpath="//*[@id='editScreen_tabContent']/label")
				public static WebElement editScreenRatePreloadLabel;
			  
			  @FindBy(xpath="//select[@id='cmbBehaviour']")
			  public static WebElement editScreenBehaviourDropdown;
			  
			  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
			  public static WebElement editScreenQuantityPreloadedTxt;
			  	  
			  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
			  public static WebElement  formulaTxt;
				
			  @FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_expandedFormula']")
			  public static WebElement  expandeFormula;
						
		     // Grid Elements 
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_1-2']//span[@class='icon-collepse icon-font8']")
			public static WebElement  editScreenTransactionExpandBtn;
					
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-2']")
				public static WebElement  editScreenQuantity;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-3']")
				public static WebElement  editScreenqty;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-2']")
				public static WebElement  editScreenRate;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-3']")
				public static WebElement  editScreenrt;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-2']")
				public static WebElement  editScreenAlternateQty;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-3']")
				public static WebElement  editScreenqtya;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-2']")
				public static WebElement  editScreengrossAmount;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-3']")
				public static WebElement  editScreengr;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-2']")
				public static WebElement  editScreenStockValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-3']")
				public static WebElement  editScreenstkv;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-2']")
				public static WebElement  editScreenAccount;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-3']")
				public static WebElement  EditScreenacc;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-2']")
				public static WebElement  editScreenAccount2;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-3']")
				public static WebElement  editScreenacc2;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-2']")
				public static WebElement  editScreenExchangeRate;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-3']")
				public static WebElement  editScreenexrt;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-2']")
				public static WebElement  editScreenqtyinBaseUnit;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-3']")
				public static WebElement  editScreenqtyb;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-2']")
				public static WebElement  editScreenCurrency;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-3']")
				public static WebElement  editScreencrn;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-2']")
				public static WebElement  editScreenValueOfThetagMasterIDofTheTag;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-3']")
				public static WebElement  editScreentgval;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-2']")
				public static WebElement  editScreenNetAmount;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-3']")
				public static WebElement  EditScreennet;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-2']")
				public static WebElement  editScreenNetAmountInOriginalCurrency;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-3']")
				public static WebElement  editScreenneto;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-2']")
				public static WebElement  editScreenTotalQuantity;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-3']")
				public static WebElement  editScreentqty;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-2']")
				public static WebElement  editScreenTotalGross;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-3']")
				public static WebElement  editScreentgr;
								
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_17-2']//span[@class='icon-expand icon-font8']")
			public static WebElement  screenFiledExpandBtn;
					
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-2']")
				public static WebElement  mrnQtyInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-3']")
				public static WebElement  sb1;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-2']")
				public static WebElement  mrnQtyCalculatedValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-3']")
				public static WebElement  sbo1;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-2']")
				public static WebElement  qtyBalancedInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-3']")
				public static WebElement  sb2;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-2']")
				public static WebElement  qtyCalculatedValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-3']")
				public static WebElement  sbO2;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-2']")
				public static WebElement  averagerateInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-3']")
				public static WebElement  sb3;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-2']")
				public static WebElement  avreageRateCalculatedValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-3']")
				public static WebElement  sbO3;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-2']")
				public static WebElement  addValueInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-3']")
				public static WebElement  sb4;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-2']")
				public static WebElement  addValueInputCalculatedValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-3']")
				public static WebElement  sbO4;
					
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_26-2']//span[@class='icon-collepse icon-font8']")
			public static WebElement  layoutFieldExpandBtn;
			
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-2']")
				public static WebElement  appropriateBasedOnInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-3']")
				public static WebElement  lh0;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-2']")
				public static WebElement  additionalValueInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-3']")
				public static WebElement  lh1;
								
		    //Grid Completed
			
			@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
			public static WebElement  editScreenqtyFormulaSearchTxt;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_PlusOpt']")
			public static WebElement  editScreenqtyPlusBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'-')]")
			public static WebElement  editScreenqtyMinusBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[3]")
			public static WebElement  editScreenqtyDivideBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'*')]")
			public static WebElement  editScreenqtyMultiplyBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[5]")
			public static WebElement  editScreenqtyBrackets1Btn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[6]")
			public static WebElement  editScreenqtyBrackets2Btn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'~')]")
			public static WebElement  editScreenqtyTildeBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'&')]")
			public static WebElement  editScreenqtyAndBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'%')]")
			public static WebElement  editScreenqtyPercentBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//div[@id='operationButtons']//button[@class='btn btn-link'][contains(text(),']')]")
			public static WebElement  editScreenqtySquarebracketBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'|')]")
			public static WebElement  editScreenqtyVerticalBarBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'\')]")
			public static WebElement  editScreenqtyBackSlashBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'<')]")
			public static WebElement  editScreenqtyLessThanbtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'>')]")
			public static WebElement  editScreenqtyGreaterThanBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
			public static WebElement  editScreenqtyExclamationBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
			public static WebElement  editScreenqtyEqualBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'?:')]")
			public static WebElement  editScreenqtyQuestionBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'^')]")
			public static WebElement  editScreenqtyCaretBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'DateDiff()')]")
			public static WebElement  editScreenqtyDateDiffBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Cond()')]")
			public static WebElement  editScreenqtyCondBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Min()')]")
			public static WebElement  editScreenqtyMinBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Max()')]")
			public static WebElement  editScreenqtyMaxBtn;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
			public static WebElement  editScreenqtyConditionokBtn;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
			public static WebElement  editScreenqtyConditioncancelBtn;
					
					
			@FindBy(xpath="//*[@id='editScreen_qtyFormula_textbox']")
			public static WebElement  editScreenformulaTxt;
			
			
			// CustomizeGrid
			
			@FindBy(xpath="//i[@class='icon-custamize icon-font7']")
			public static WebElement editScreencustomizeGridBtn;  
			  
			@FindBy(xpath="//span[contains(text(),'Apportion')")
			public static WebElement editScreenApportionBtn;
			     
			@FindBy(xpath="//span[contains(text(),'Audit Trial')]")
			public static WebElement editScreenAuditTrialBtn;  
			    
			@FindBy(xpath="//span[contains(text(),'Back color')]")
			public static WebElement editScreenbackColorBtn;  
			     
			@FindBy(xpath="//span[contains(text(),'Banner text')]")
			public static WebElement editScreenbannerTextBtn;  
			 
			  @FindBy(xpath="//span[contains(text(),'Cannot be exported')]")
			  public static WebElement editScreencannotBeExportedBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Cannot be imported')]")
			  public static WebElement editScreencannotBeImportedBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Column Span')]")
			  public static WebElement editScreencolumnSpanBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Copy from Parent')]")
			  public static WebElement editScreencopyFromParentBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'DataType')]")
			  public static WebElement editScreendataTypeBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Default Value')]")
			  public static WebElement editScreenDefaultValueBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Error message')]")
			  public static WebElement editScreenerrorMessageBtn;  
			 
			  @FindBy(xpath="//span[contains(text(),'External module attached')]")
			  public static WebElement editScreenExternalModuleAttachedBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Field Order')]")
			  public static WebElement editScreenFilterOrderBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Font')]")
			  public static WebElement editScreenFontBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Group Name')]")
			  public static WebElement editScreengroupNameBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Hide left panel')]")
			  public static WebElement editScreenHideLeftPanelBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Information Field')]")
			  public static WebElement editScreenInformationFieldBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Mandatory')]")
			  public static WebElement editScreenMandatoryBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Mass Update')]")
			  public static WebElement editScreenMassupdateBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Maximum Value')]")
			  public static WebElement editScreenMaximumValueBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Merge Field')]")
			  public static WebElement editScreenMergerFieldBtn;  
			  
			  @FindBy(xpath="//span[contains(text(),'Minimum Value')]")
			  public static WebElement editScreenMinimumValueBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'No Of Decimals')]")
			  public static WebElement editScreenNoOfDecimalsBtn;  
			  
			  @FindBy(xpath="//span[contains(text(),'Not available for reports')]")
			  public static WebElement editScreenNotAvailableForReportsBtn; 
			     
			  @FindBy(xpath="//span[contains(text(),'Read Only')]")
			  public static WebElement editScreenReadOnlyBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Regular expression')]")
			  public static WebElement editScreenRegularExpressionBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Restrict formula')]")
			  public static WebElement editScreenRestrictFormulaBtn;  
			  
			  @FindBy(xpath="//span[contains(text(),'Restrict Message')]")
			  public static WebElement editScreenRestrictMessageBtn;  
			  
			  @FindBy(xpath="//span[contains(text(),'Round Offs')]")
			  public static WebElement editScreenRoundsOffsBtn;  
			
			  @FindBy(xpath="//span[contains(text(),'Row Span')]")
			  public static WebElement editScreenRowSpanBtn; 
			     
			  @FindBy(xpath="//span[contains(text(),'Rule Attached')]")
			  public static WebElement editScreenRuleAttachedBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Tooltip')]")
			  public static WebElement editScreenToolTipBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Variable name')]")
			  public static WebElement editScreenVariableNameBtn;  
			 
			  
			  
			  
			
			 // Body Tab 
			  
			  @FindBy(xpath="//a[contains(text(),'Body')]")
			  public static WebElement  editScreenBodyTab; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='editIcon']")
			  public static WebElement  editScreenBody1stRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='deleteIcon']")
			  public static WebElement  editScreenBody1stRowDeleteBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='editIcon']")
			  public static WebElement  editScreenBody2ndRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='deleteIcon']")
			  public static WebElement  editScreenBody2ndRowDeleteBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_3 _1']//span[@id='editIcon']")
			  public static WebElement  editScreenBody3rdRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_3 _1']//span[@id='deleteIcon']")
			  public static WebElement  editScreenBody3rdRowDeleteBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='editIcon']")
			  public static WebElement  editScreenBody4thRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='deleteIcon']")
			  public static WebElement  editScreenBody4thRowDeleteBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='editIcon']")
			  public static WebElement  editScreenBody5thRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='deleteIcon']")
			  public static WebElement  editScreenBody5thRowDeleteBtn;
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_6 _1']//span[@id='editIcon']")
			  public static WebElement  editScreenBody6thRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_6 _1']//span[@id='deleteIcon']")
			  public static WebElement  editScreenBody6thRowDeleteBtn;
			  
			  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-up-arrow Fbutton']")
			  public static WebElement  editScreenBodyUpArrowBtn; 
			
			  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-down-arrow Fbutton']")
			  public static WebElement  editScreenBodyDownArrowBtn;
							
			  // Footer Tab
			  
			  @FindBy(xpath="//a[contains(text(),'Footer')]")
			  public static WebElement  editScreenFooterTab;  
			  
			  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='editIcon']")
			  public static WebElement  editScreenFooter1stRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='deleteIcon']")
			  public static WebElement  editScreenFooter1stRowDeleteBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='editIcon']")
			  public static WebElement  editScreenFooter2ndRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='deleteIcon']")
			  public static WebElement  editScreenFooter2ndRowDeleteBtn; 
			  
			  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-up-arrow Fbutton']")
			  public static WebElement  editScreenFooterUpArrowBtn; 
			
			  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-down-arrow Fbutton']")
			  public static WebElement  editScreenFooterDownArrowBtn; 
			  
			  	@FindBy(xpath="//label[contains(text(),'Quantity preloaded')]")
				public static WebElement qtyPreloadedLabel;
				
				@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
				public static WebElement qtyPreloadedTxt;
				
				@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
				public static WebElement qtyPreloadedformulaTxt;
				
				@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
				public static WebElement qtyPreloadedFormulaSearchTxt;
				
				@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
				public static WebElement qtyPreloadedFormulaokBtn;
				
				@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
				public static WebElement qtyPreloadedFormulacancelBtn;


				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[1]/label/span")
				public static WebElement editScreenLoadFields1stChkBox;
				
				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[2]/label/span")
				public static WebElement editScreenLoadFields2ndChkBox;
				
				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[3]/label/span")
				public static WebElement editScreenLoadFields3rdChkBox;
				
				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[4]/label/span")
				public static WebElement editScreenLoadFields4thChkBox;
				
				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[5]/label/span")
				public static WebElement editScreenLoadFields5hChkBox;
				
				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[6]/label/span")
				public static WebElement editScreenLoadFields6thChkBox;
				
				@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_formulaText']")
				public static WebElement  preloadformulaTxt;
				
				@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_availableVariables']")
				public static WebElement  preloadFormulaSearchTxt;
				
				@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Ok']")
				public static WebElement  preloadFormulaokBtn;
					
				@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Cancel']")
				public static WebElement  preloadFormulacancelBtn;
				
				
				@FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
				public static WebElement  editScreenFooter1stRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
				public static WebElement  editScreenFooter2ndRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_1 _3']")
				public static WebElement  editScreenbody1stRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_2 _3']")
				public static WebElement  editScreenbody2ndRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _3']")
				public static WebElement  editScreenbody3rdRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _3']")
				public static WebElement  editScreenbody4thRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _3']")
				public static WebElement  editScreenbody5thRowCaption;
				
				
				
				// Add To Stock Status
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_1 _14']")
				public static WebElement  editScreenbody1stRowAddtoStock;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_2 _14']")
				public static WebElement  editScreenbody2ndRowAddtoStock;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _14']")
				public static WebElement  editScreenbody3rdRowAddtoStock;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _14']")
				public static WebElement  editScreenbody4thRowAddtoStock;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _14']")
				public static WebElement  editScreenbody5thRowAddtoStock;			
				
			// Suspend Status Of Entry Page
			@FindBy(xpath="//tr[1]//td[11]")
			public static WebElement suspendStatusRow1;
		
		//User Name Display
		/*@FindBy(xpath="/html/body/section/div[2]/header/nav/div/ul/li[6]/a/span")
		public static WebElement userNameDisplay;

		@FindBy(xpath="//*[@id='ulCompanyDetails_HomePage']/li[1]")
		public static WebElement companyName;

		@FindBy(xpath="//*[@id='companyLogo']")
		public static WebElement companyLogo;*/

	    @FindBy(xpath="//div[@id='Layout_Popup']//input[2]")
		public static WebElement noIn;
	    
	    /*@FindBy(xpath="//input[@id='donotshow']")
		public static WebElement doNotShowCheckbox;
	    
	    @FindBy(xpath="//span[@class='pull-right']")
		public static WebElement closeBtnInDemoPopupScreen;*/
	    
	    
	    // Inentory Menu 
	    
	    @FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
	    public static WebElement  invTransactionsMenu; 
	    
	    @FindBy(xpath="//a[@id='139']//span[contains(text(),'Purchases')]")
	    public static WebElement  invTransPurchasesMenu; 
	    
	    @FindBy(xpath="//a[@id='140']//span[contains(text(),'Sales')]")
	    public static WebElement  invTransSalesMenu; 
	    
	    @FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
	    public static WebElement  invTransStocksMenu; 
	    
	   
		
		// Home Menu
		@FindBy(xpath = "//*[@id='1']")
		public static WebElement homeMenu;

		//Financial Menu
		@FindBy (xpath="//span[@class='icon-financial icon-font1']")
		public static WebElement financialMenu;
		
		//Fixed Assets Menu
		@FindBy (xpath="//span[@class='icon-assets icon-font1']")
		public static WebElement fixedAssetsMenu;
		
		//Production Menu
		@FindBy (xpath="//span[@class='icon-production icon-font1']")
		public static WebElement productionMenu;
		
		//Point Of Sale Menu
		@FindBy (xpath="//div[contains(text(),'Point of Sale')]")
		public static WebElement pointOfSaleMenu;
		
		//Quality Of Control Menu
		@FindBy (xpath="//span[@class='icon-quotationanalysis icon-font1']")
		public static WebElement qualityControlMenu;
		
		//Settings Menu
		@FindBy (xpath="//*[@id='16']")
		public static WebElement SettingsMenu;
		
		@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[2]/a")
		public static WebElement  pendingAuthorizationPurchases;
		
		@FindBy(xpath="//button[@class='accordion-button collapsed']")
		public static WebElement  homePageVoucherArrowBtn;
		
		@FindBy(xpath="//tr[@id='trRender_1']//td//input")
		public static WebElement  voucherHomeRow1ChkBox;
		
		@FindBy(xpath="//i[@class='icon-convert hiconright2']")
		public static WebElement  voucherConvert;
		
		@FindBy(xpath="//tr[@id='trRender_2']//td//input")
		public static WebElement  voucherHomeRow2ChkBox;
		
		
		
			
		@FindBy(xpath="//textarea[@id='id_transaction_authorization_remark']")
		public static WebElement  authorizePopupTextArea;
		
		@FindBy(xpath="//input[@id='id_transaction_authorization_remark_popup_ok']")
		public static WebElement  authorizePopupOkBtn;
		
		@FindBy(xpath="//div[@id='id_transaction_homeview_authorization_remarkpopup_container']//input[2]")
		public static WebElement  authorizePopupCancelBtn;
		
		
		// Login Page
		@FindBy(xpath = "//*[@id='txtUsername']")
		public static WebElement username;
		
		
		
		//Consume the links through CTRL + L in linked voucher
		@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
		public static WebElement workFlowExpandBtn;

		@FindBy(xpath="//select[@id='id_transactionentry_workflow_dropdown']")
		public static WebElement  workFlowDropdown;

		@FindBy(xpath="//select[@id='id_transactionentry_workflow_searchon']")
		public static WebElement  searchOnDropdownCL;

		@FindBy(xpath="//select[@id='id_transactionentry_workflow_searchtype']")
		public static WebElement  containingDropdownCL;
				
		@FindBy(xpath="//input[@id='id_transactionentry_workflow_search_input']")
		public static WebElement  workFlowSearchTxtCL;

		@FindBy(xpath="//*[@id='id_transactionentry_workflow_popup']/div[2]/div/div[3]/div/input[1]")
		public static WebElement  workFlowCustomizeBtnCL;
		
		@FindBy(xpath="//*[@id='Deleteayout']")
		public static WebElement  workflowDeleteLayout;
		
		@FindBy(xpath="//*[@id='Export']")
		public static WebElement  workFlowExportBtn;
		
		@FindBy(xpath="//*[@id='Import']/i")
		public static WebElement  workFlowImportBtn;
		
		@FindBy(xpath="//p[contains(text(),'Warehouse Code')]")
		public static WebElement  workFlowWarehouseCodeTab;
		
		@FindBy(xpath="//a[contains(text(),'Remove Column')]")
		public static WebElement  workFlowRemoveColumnBtn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_row_heading']/th/div[2]")
		public static List<WebElement>  workflowHeaderList;
		
		
		@FindBy(xpath="//*[@id='RearrangeFormula']")
		public static WebElement  rearrangeFormula;
		
		@FindBy(xpath="//*[@id='id_customize_rearrangeformula_grid_body']/tr/td[4]")
		public static WebElement  newFormula;
		
		@FindBy(xpath="//*[@id='id_customize_rearrangeformula_grid_control_heading_ctrl_3']")
		public static WebElement  newFormula1;

		@FindBy(xpath="(//input[@class='FButton-Primary FPopupChildren mx-1'])[3]")
		public static WebElement  workFlowOkBtnCL;

		@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
		public static WebElement  workFlowMinimizeBtnCL;

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_control_heading_ctrl_1']")
		public static WebElement  workFlowHeaderChkBoxCL;

		@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_control_heading_6']//div[contains(text(),'Voucher No')]")
		public static WebElement  workFlowHeaderVoucherNoCL;

		@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_control_heading_7']//div[contains(text(),'Date')]")
		public static WebElement  workFlowHeaderDateCL;

		@FindBy(xpath="//div[contains(text(),'Name')]")
		public static WebElement  workFlowHeaderNameCL;

		@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_control_heading_9']//div[contains(text(),'Quantity')]")
		public static WebElement  workFlowHeaderQtyCL;

		@FindBy(xpath="//div[contains(text(),'Suspended')]")
		public static WebElement  workFlowHeaderSuspendCL;

		//1 Row CRTL + L

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[1]/td[2]/input")
		public static WebElement workFlowRow1ChkBoxCL;

		/*@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-6']")
		public static WebElement  workFlowRow1Column1CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-7']")
		public static WebElement  workFlowRow1Column2CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-8']")
		public static WebElement  workFlowRow1Column3CL;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-9']")
		public static WebElement  workFlowRow1Column4CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-10']")
		public static WebElement  workFlowRow1Column5CL;*/


		//2 Row CRTL + L

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_body']/tr[2]/td[2]/input")
		public static WebElement workFlowRow2ChkBoxCL;

		/*@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-6']")
		public static WebElement  workFlowRow2Column1CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-7']")
		public static WebElement  workFlowRow2Column2CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-8']")
		public static WebElement  workFlowRow2Column3CL;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-9']")
		public static WebElement  workFlowRow2Column4CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-10']")
		public static WebElement  workFlowRow2Column5CL;*/
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']")
		public static WebElement  workflowTableBody;
	
		
		@FindBy(xpath="//input[@id='id_header_4']")
		public static WebElement  newCashBankAccountTxt;
		
		
		
		
		@FindBy(xpath="//*[@id='lblAccount']")
		public static WebElement  billRefPartyName;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr")
		public static List<WebElement> billRefAdjustBillsGrid;
		
		@FindBy(xpath="//tbody[@id='id_Adjustment_Grid_body']")
		public static WebElement  billRefAdjustBillsTable;
		

		 //Bill Reference Screen 	
		

		@FindBy(xpath="//input[@id='txtNewReference']")
		public static WebElement  billRefNewReferenceTxt;
		
		@FindBy(xpath="//input[@id='txtOnAccount']")
		public static WebElement  billRefTxtOnAccount;		
			
		@FindBy(xpath="//input[@id='Searchtxt']")
		public static WebElement  billRefSearchTxt;		
		
		@FindBy(xpath="//select[@id='cbmShowBillForAdjustment']")
		public static WebElement  billRefNewReferenceDropdown;		
		
		@FindBy(xpath="//select[@id='cbmShowBills']")
		public static WebElement  billRefShowBillsDropdown;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_11']//div[contains(text(),'Due Date')]")
		public static WebElement  billRefGridHeaderDueDate;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_16']//div[contains(text(),'Currency')]")
		public static WebElement  billRefGridHeaderCurrency;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_21']//div[contains(text(),'Original Amt')]")
		public static WebElement  billRefGridHeaderOrginalAmt;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_23']//div[contains(text(),'Balance Amount')]")
		public static WebElement  billRefGridHeaderBalanceAmt;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_33']//div[contains(text(),'Adjustment Amount')]")
		public static WebElement  billRefGridHeaderAdjustmentAmt;		
		
		@FindBy(xpath="//div[contains(text(),'Native Currency')]")
		public static WebElement  billRefGridHeaderNativeCurrency;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_41']//div[contains(text(),'Narration')]")
		public static WebElement  billRefGridHeaderNarration;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_50']//div[contains(text(),'Previous Adjustment Amount')]")
		public static WebElement  billRefGridHeaderPreviosAdjustmentAmt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-0']")
		public static WebElement  billRefGridFirstRow;	
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-1']//input")
		public static WebElement  billRefGridFirstRowChkbox;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-1']//input")
		public static WebElement  billRefGridSecondRowChkbox;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-1']//input")
		public static WebElement  billRefGridThirdRowChkbox;		
		
		/*@FindBy(xpath="//tbody[@id='id_Adjustment_Grid_body']//td[13]")
		public static WebElement  billRefGridFirstRowAdjustmentAmtTxt;		
		*/             
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[2]/div[2]/div[1]/div[3]/div[1]/div[1]/div[4]/div[1]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[13]")
		public static WebElement  billRefGridFirstRowAdjustmentAmtTxt;		
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[2]/div[2]/div[1]/div[3]/div[1]/div[1]/div[4]/div[1]/div[2]/div[1]/table[1]/tbody[1]/tr[2]/td[13]")
		public static WebElement  billRefGridSecondRowAdjustmentAmtTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-33']")
		public static WebElement  billRefGridThirdRowAdjustmentAmtTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-41']")
		public static WebElement  billRefGridFirstNarrationTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-41']")
		public static WebElement  billRefGridSecondNarrationTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-41']")
		public static WebElement  billRefGridThirdNarrationTxt;		
		
		@FindBy(xpath="//input[@id='id_Narration']")
		public static WebElement  narrationToWrite;		
		
		@FindBy(xpath="//input[@id='id_limit']")
		public static WebElement  adjustAmtToWrite;		
		
		@FindBy(xpath="//div[@class='col-xs-6 navbar-header']//div[@class='navText']")
		public static WebElement  billRefPaymentsBillReferenceLabel;		
		
		@FindBy(xpath="//div[@class='col-sm-12 col-md-3']//input[@class='Fbutton']")
		public static WebElement  billRefAdjustOnFIFOBtn;		
		
		/*@FindBy(xpath="//span[@id='btnPick']")
		public static WebElement  billRefPickIcon;		
		
		@FindBy(xpath="//span[@id='btnOk']")
		public static WebElement  billRefOkBtn;		
		
		@FindBy(xpath="//span[@id='btnCancel']")
		public static WebElement  billRefcancel;	*/	
		
		@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
		public static WebElement  billRefSummatyValueNet;		
		
		@FindBy(xpath="//td[@id='AccountAmount_col_1-1']")
		public static WebElement  billRefGridVendorRow1;	
		
		@FindBy(xpath="//td[@id='AccountAmount_col_1-2']")
		public static WebElement  billRefGridVendorAmtRow1;	
		
		@FindBy(xpath="//td[@id='AccountAmount_col_2-1']")
		public static WebElement  billRefGridVendorRow2;	
		
		@FindBy(xpath="//td[@id='AccountAmount_col_2-2']")
		public static WebElement  billRefGridVendorAmtRow2;	
		
		@FindBy(xpath="//td[@id='AccountAmount_col_3-1']")
		public static WebElement  billRefGridVendorRow3;
		
		@FindBy(xpath="//label[@id='tbNewRefAmountAdjValue']")
		public static WebElement amtAdjustedAgainstNewREfinOtherVouchers;
				
		@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
		public static WebElement transactionCurency;
		
		@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
		public static WebElement baseCurrency;
		
		@FindBy(xpath="//label[@id='tbAmountToAdjustInLocalCurrencyValue']")
		public static WebElement localCurrencyDhs;
		
		@FindBy(xpath="//label[@id='tbNewRefBalAmountValue']")
		public static WebElement balanceNewReferenceAmt;
		
		@FindBy(xpath="//li[@id='id_li_Adjustment_Tab_BreakUpByTag']//span[@class='font-5'][contains(text(),'Break Up by Tag')]")
		public static WebElement breakUpByTagTab;
		
		@FindBy(xpath="//span[@class='font-5'][contains(text(),'Adjustment')]")
		public static WebElement adjustmentTab;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-9']")
		public static WebElement breakUpByTagDueDate;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-10']")
		public static WebElement breakUpByTagDepartment;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-18']")
		public static WebElement breakUpByTagBaseCurrency;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-17']")
		public static WebElement breakUpByTagBillCurrency;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-20']")
		public static WebElement breakUpByTagBaseConversionRate;
			
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-21']")
		public static WebElement breakUpByTagBaseLocalCurrency;
		
		@FindBy(xpath="//label[@id='txtblkAmountadjusted']")
		public static WebElement  billRefAdjustAmountInTransCurency;
		
		@FindBy(xpath="//label[@id='txtblkAmounttobeadjust']")
		public static WebElement  billRefBalanceAmountAdjustInTrnasCurrency;
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
		public static WebElement  billRefInfoBarLocalCurrencyRate;
		
		
		@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
		public static WebElement billRefTransactionCurency;
		
		@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
		public static WebElement billRefBaseCurrency;
		

		@FindBy(xpath="//label[@id='id_BillWise_IP_AccountName']")
		public static WebElement breakUpDetailsAccount;
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_ProductName']")
		public static WebElement breakUpDetailsItem;
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_TagName']")
		public static WebElement breakUpDetailsDepartment;
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_BaseCurrencyValue']")
		public static WebElement conversationRateBaseCurrencyRate;
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
		public static WebElement conversationRateLocalCurrencyRate;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAEDTranAmountValue']")
		public static WebElement asOnEntryDateTransAmt;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAEDBaseConversionValue']")
		public static WebElement asOnEntryDateBaseConcersationRate;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAEDBaseAmountValue']")
		public static WebElement asOnEntryDateBaseAmount;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAEDLocalConversionValue']")
		public static WebElement asOnEntryDateLocConversationRate;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAEDLocalAmountValue']")
		public static WebElement asOnEntryDateAmt;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAADTranAmountValue']")
		public static WebElement balOnAdjstDateTransAmt;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAADBaseConversionValue']")
		public static WebElement  balOnAdjstDateBasrConversionRate;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAADBaseAmountValue']")
		public static WebElement  balOnAdjstDateBaseAmount;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAADLocalConversionValue']")
		public static WebElement  balOnAdjstDateLocalConversionRate;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAADLocalAmountValue']")
		public static WebElement  balOnAdjstDateAmt;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAdjTranAmountValue']")
		public static WebElement adjustmentsAmount1;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAdjBaseAmountValue']")
		public static WebElement adjustmentsAmount2;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAdjLocalAmountValue']")
		public static WebElement adjustmentsAmount3;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblNativeCurrencyValue']")
		public static WebElement adjustmentsAmount4;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblExDiffTranAmountValue']")
		public static WebElement exchangeGainLossForBaseCurrency;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblExDiffLocalAmountValue']")
		public static WebElement exchangeGainLossForLocalCurrency;
		
		
		
		@FindBy(xpath="//input[@id='id_limit']")
		public static WebElement gridEnterAdjustAmtRow1;
		
		//Billreference Body Grid Elements
		
	    
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[8]")
		public static WebElement gridOrginalAmtRow1;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[8]")
		public static WebElement gridOrginalAmtRow2;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[8]")
		public static WebElement gridOrginalAmtRow3;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[8]")
		public static WebElement gridOrginalAmtRow4;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[8]")
		public static WebElement gridOrginalAmtRow5;
		
		
		
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[10]")
		public static WebElement gridBalanceAmtRow1;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[10]")
		public static WebElement gridBalanceAmtRow2;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[10]")
		public static WebElement gridBalanceAmtRow3;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[10]")
		public static WebElement gridBalanceAmtRow4;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[10]")
		public static WebElement gridBalanceAmtRow5;
		
		
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[13]")
		public static WebElement gridAdjustmentAmtRow1;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[13]")
		public static WebElement gridAdjustmentAmtRow2;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[13]")
		public static WebElement gridAdjustmentAmtRow3;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[13]")
		public static WebElement gridAdjustmentAmtRow4;

		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[13]")
		public static WebElement gridAdjustmentAmtRow5;
		
		@FindBy(xpath="//*[@id='id_body_12_table_body']/tr")
		public static List<WebElement> bodyAccountListInGrid;
		
		               
		@FindBy(xpath="//*[@id='id_body_39_table_body']/tr")
		public static List<WebElement> bodyCreditAccountListInGrid;
		
		
		
		@FindBy(xpath="//div[@id='id_transaction_authorization_remark_popup']/div/div")
		public static WebElement authorizationRemarkPopup;
		
		
		
		@FindBy(xpath="//label[@class='modal-title modal-title-customization']")
		public static WebElement stockReservationLabel;
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-4']")
		public static WebElement stockRes_QtyToReserveRow1; 
		
		
		@FindBy(xpath="//*[@id='btnPickQuantity']/div/div[2]")
		public static WebElement res_PickBtn;
		
		@FindBy(xpath="//*[@id='id_Reservation_Modal_SalesOrder']/div[2]/div/div[3]/div/ul[4]/li[2]/div/div[2]")
		public static WebElement res_DiscardBtn;
		
		@FindBy(xpath="//*[@id='id_Reservation_Modal_SalesOrder']/div[2]/div/div[3]/div/ul[4]/li[3]/div/div[2]")
		public static WebElement res_OkBtn;
		
		@FindBy(xpath="//*[@id='id_Reservation_Modal_SalesOrder']/div[2]/div/div[3]/div/ul[4]/li[4]/div/div[2]")
		public static WebElement res_CloseBtn;
		
		
		@FindBy(xpath="//tbody[@id='ctrlAuthorizationH_table_body']/tr/td[2]")
		public static List<WebElement> tranAuthNameList;
		
		@FindBy(xpath="//button[contains(text(),'Ok')]")
   	public static WebElement loginRefreshOkBtn;
		
		@FindBy(xpath="//select[@id='ddlCompany']")
   	public static WebElement companyDropDownList;
   	
   	@FindBy(xpath="(//li[@class='nav-item pt-md-2']/a)[2]")   //a[text()='SU']
   	public static WebElement userNameDisplay;
   	
   	@FindBy(xpath="//div[@class='adminprofile']")
		public static WebElement userNameDisplayLogo;
   	
   	/*@FindBy(xpath="//span[text()='SU']")
       public static WebElement userNameDisplay;*/
   	
   	@FindBy(xpath="//*[@id='companyLogo']")
   	public static WebElement companyLogo;
   	
   	@FindBy(xpath="//*[@id='ulCompanyDetails_HomePage']/li[1]")
   	public static WebElement companyName;
   	
   	@FindBy(xpath="//a[contains(text(),'Logout')]")
   	public static WebElement logoutOption;
   		
   	@FindBy(xpath="//input[@id='donotshow']")
   	public static WebElement doNotShowCheckbox;
   	 		    
   	@FindBy(xpath="//span[@class='pull-right']")
   	public static WebElement closeBtnInDemoPopupScreen;
   	
   	//DataManagement menu
   	@FindBy (xpath="//*[@id='25']/span")
       public static WebElement dataMangementMenu;
   	
   		@FindBy (xpath="//*[@id='26']/span")
   		public static WebElement backup;
   			
   		@FindBy (xpath="//*[@id='27']/span")
   		public static WebElement restore;
   		
   		@FindBy (xpath="//*[@id='111']/span")
   		public static WebElement reindex;
   		
   		@FindBy (xpath="//*[@id='115']/span")
   		public static WebElement eraseAll;
   		
   		@FindBy (xpath="//*[@id='216']/span")
   		public static WebElement lockAndUnlock;
   		
   		
   		@FindBy (xpath="//input[@id='idEraseTransaction']")
   		public static WebElement eraseTranscationsRadio;
   		
   		@FindBy (xpath="//i[@class='icon-ok hiconright2']")
   		public static WebElement eraseAllOkBtn;
   		
   		@FindBy (xpath="//ul[@class='nav navbar-nav navbar-right']//i[@class='icon-font6 icon-close']")
   		public static WebElement eraseAllCancelBtn;
   		
   		
   	@FindBy (xpath="//button[@class='btn Fbutton']")
   	public static WebElement folderpathExpandBtn;
   	
   	@FindBy (xpath="//*[@id='navbarSupportedContent2']/ul/li[1]/a/i")
   	public static WebElement restoreCompanyBtn;
   	
   	@FindBy (xpath="//*[@id='RestoreCompanyModal']/div/div/div[2]/button[1]")
   	public static WebElement overRideYesBtn;
   	
   	@FindBy (xpath="//*[@id='RestoreCompanyModal']/div/div/div[2]/button[2]")
   	public static WebElement overRideNoBtn;
   	
   	@FindBy (xpath="//*[@id='RestoreCompanyModal']/div/div/div[2]/button[3]")
   	public static WebElement overRideCancelBtn;
   	
   	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='4']")
   	public static WebElement selectFieldVendorAC;
   	
   	@FindBy(xpath="//*[@id='filterTree_68_0_AdvanceFilter_']/ul/li[5]/ul/li[1]/a")
   	public static WebElement selectFieldVendorACName;
   	
   	
   	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='23']")
   	public static WebElement selectFieldItem;
   	
   	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='5021']")
   	public static WebElement selectFieldItemName;
   	
   	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[text()='Quantity']")
   	public static WebElement selectFieldQuantity;
   	
   	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='268435460']")
   	public static WebElement selectFieldWarehouse;
   	
   	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='268435460']/following-sibling::ul/li/a[text()='Name']")
   	public static WebElement selectFieldWarehouseName;
   	
   	
   	
   	
   	
   	
   	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='1073741850']")
   	public static WebElement voucherQty;
   	
   	@FindBy(xpath="//li[@id='id_menu_tree_Purchases Vouchers']//i[@class='icon-expand col-xs-1']")
   	public static WebElement purchasevoucherExpandbutton;
   	
   	@FindBy(xpath="//span[@class='col-xs-10'][contains(text(),'Purchase Vouchers N')]")
   	public static WebElement purchasevoucherTypeCreatedVoucher;
   	
   	@FindBy(xpath="//li[@id='id_menu_tree_Sales Orders']/a/span")
   	public static WebElement documentNameSalesOrders;
   	
   	@FindBy(xpath="//li[@id='id_menu_tree_Sales Orders (1)']/a/span")
   	public static WebElement documentNameSalesOrders1;
   	
   	
   	
   	
   	// 
   	
   	@FindBy(xpath="//select[@id='ddlLimiton']")
   	public static WebElement limitDefination_LimitOnDrpdwn;
   	
   	@FindBy(xpath="//div[@id='divCondtionModal']/div/div/div[2]/div[1]/div[4]/span")
   	public static WebElement limitDefination_ConditionPopupOkBtn;
   	
   	@FindBy(xpath="(//div[@id='68_1_AdvanceFilter_']/table/tbody//select)[1]")
   	public static WebElement limitDefination_ConjunctionDrpdwn;
   	
   	@FindBy(xpath="(//div[@id='68_1_AdvanceFilter_']/table/tbody//input)[1]")
   	public static WebElement limitDefination_SelectFieldTxt;
   	
   	@FindBy(xpath="//div[@id='68_1_AdvanceFilter_']/table/tbody//a[text()='CustomerAC']")
   	public static WebElement limitDefination_SelectFieldCustomerAC;
   	
   	@FindBy(xpath="//div[@id='68_1_AdvanceFilter_']/table/tbody//a[text()='Warehouse']")
   	public static WebElement limitDefination_SelectFieldWarehouse;
   	
   	@FindBy(xpath="//div[@id='68_1_AdvanceFilter_']/table/tbody//a[text()='Item']")
   	public static WebElement limitDefination_SelectFieldItem;
   	
   	@FindBy(xpath="//div[@id='68_1_AdvanceFilter_']/table/tbody//a[text()='Unit']")
   	public static WebElement limitDefination_SelectFieldUnit;
   	
   	@FindBy(xpath="(//div[@id='68_1_AdvanceFilter_']/table/tbody//select)[2]")
   	public static WebElement limitDefination_SelectOperatorDrpdwn;
   	
   	@FindBy(xpath="(//div[@id='68_1_AdvanceFilter_']/table/tbody//select)[3]")
   	public static WebElement limitDefination_CompareWithDrpdwn;
   	
   	@FindBy(xpath="(//div[@id='68_1_AdvanceFilter_']/table/tbody//input)[2]")
   	public static WebElement limitDefination_ValueTxt;
   	
   	@FindBy(xpath="//span[@id='btnCancel']")
   	public static WebElement limitDefination_CancelBtn;
   	
   	
   	
   	// Escalation Tab
   	
   	@FindBy(xpath="//span[@class='font-5'][contains(text(),'Escalation')]")
   	public static WebElement escalationTab;					

   	@FindBy(xpath="//*[@id='spnAddEscalation']/i")
   	public static WebElement escalationLevelAddBtn;					
   	
   	
   	//First Escalation
   	
   	@FindBy(xpath="//*[@id='txtTimeLimit1']")
   	public static WebElement TimelimitTxt1;					
   			
   	@FindBy(xpath="//*[@id='ddlTimeLimit1']")
   	public static WebElement timelimitDropdown1;					
   			
   	@FindBy(xpath="//*[@id='ddlEscalationType1']")
   	public static WebElement EscalationType1;	
   	
   	@FindBy(xpath="//select[@id='ddlUserType1']")
   	public static WebElement escalation_UserTypeDrpdwn;
   	
   	@FindBy(xpath="//div[@id='divEscalationBody1']/div[4]/div[2]/div[2]/div/div[1]//label/input")
   	public static List<WebElement> escalation_UsersCheckboxList;
   	
   	@FindBy(xpath="//div[@id='divEscalationBody1']/div[4]/div[2]/div[2]/div/div[1]//label")
   	public static List<WebElement> escalation_UsersList;
   	
   	
   	
   	
   	@FindBy(xpath="//*[@id='divEscalation1']/div[1]/div[2]/i[1]")
   	public static WebElement Minimize1;					
   	
   	@FindBy(xpath="//*[@id='divEscalation1']/div[1]/div[2]/i[2]")
   	public static WebElement Close1;					
   			
   	
   	//Second Escalation
   	
   	@FindBy(xpath="//*[@id='txtTimeLimit2']")
   	public static WebElement TimelimitTxt2;					
   			
   	@FindBy(xpath="//*[@id='ddlTimeLimit2']")
   	public static WebElement Dropdown2;					
   			
   	@FindBy(xpath="//*[@id='ddlEscalationType2']")
   	public static WebElement EscalationType2;	
   	
   	@FindBy(xpath="//*[@id='divEscalation2']/div[1]/div[2]/i[1]")
   	public static WebElement Minimize2;					
   	
   	@FindBy(xpath="//*[@id='divEscalation2']/div[1]/div[2]/i[2]")
   	public static WebElement Close2;
   	
   	@FindBy (xpath="//input[@id='chkDateRange']")
   	public static WebElement transactionAuthorizationConditionTabDateRangeChkBox;
   	
   	@FindBy (xpath="//input[@id='dpFromDate']")
   	public static WebElement transactionAuthorizationConditionTabFromDateTxt;
   	
   	@FindBy (xpath="//td[@id='dpFromDate_input_image']/span")
   	public static WebElement transactionAuthorizationConditionTabFromDateCalendarIcon;
   	
   	@FindBy (xpath="//input[@id='dpToDate']")
   	public static WebElement transactionAuthorizationConditionTabToDateTxt;
   	
   	@FindBy (xpath="//td[@id='dpToDate_input_image']/span")
   	public static WebElement transactionAuthorizationConditionTabToDateCalendarIcon;
   	
   	
   	@FindBy (xpath="//input[@id='chkTimeRange']")
   	public static WebElement transactionAuthorizationConditionTabTimeRangeChkBox;
   	
   	@FindBy (xpath="//input[@id='tpFromTime']")
   	public static WebElement transactionAuthorizationConditionTabFromTimeTxt;
   	
   	@FindBy (xpath="//input[@id='tpToTime']")
   	public static WebElement transactionAuthorizationConditionTabToTimeTxt;

   	@FindBy(xpath="//*[@id='trRender_0']/td[2]")
		public static WebElement listOfDoc_1stRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_0']/td[3]")
		public static WebElement listOfDoc_1stRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[4]")
		public static WebElement listOfDoc_1stRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[5]")
		public static WebElement listOfDoc_1stRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[6]")
		public static WebElement listOfDoc_1stRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[7]")
		public static WebElement listOfDoc_1stRow6thCol;
		
		
		@FindBy(xpath="//*[@id='trRender_1']/td[2]")
		public static WebElement listOfDoc_2ndRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_1']/td[3]")
		public static WebElement listOfDoc_2ndRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[4]")
		public static WebElement listOfDoc_2ndRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[5]")
		public static WebElement listOfDoc_2ndRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[6]")
		public static WebElement listOfDoc_2ndRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[7]")
		public static WebElement listOfDoc_2ndRow6thCol;
		
		
		@FindBy(xpath="//*[@id='trRender_2']/td[2]")
		public static WebElement listOfDoc_3rdRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_2']/td[3]")
		public static WebElement listOfDoc_3rdRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[4]")
		public static WebElement listOfDoc_3rdRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[5]")
		public static WebElement listOfDoc_3rdRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[6]")
		public static WebElement listOfDoc_3rdRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[7]")
		public static WebElement listOfDoc_3rdRow6thCol;
		
		
		@FindBy(xpath="//*[@id='trRender_3']/td[2]")
		public static WebElement listOfDoc_4thRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_3']/td[3]")
		public static WebElement listOfDoc_4thRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[4]")
		public static WebElement listOfDoc_4thRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[5]")
		public static WebElement listOfDoc_4thRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[6]")
		public static WebElement listOfDoc_4thRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[7]")
		public static WebElement listOfDoc_4thRow6thCol;
		
		@FindBy(xpath="//input[@id='id_body_37']")
		public static WebElement enter_Expirydate;
		
		@FindBy(id="txtPassword")
		public static WebElement password;
		
		@FindBy(xpath="//td[@id='id_tblAlerts_col_1-5']")
		public static WebElement alertTabRow1AlertTxt;
		
		@FindBy(xpath="//th[@id='id_tblAlerts_control_heading_5']/div/u")
		public static WebElement alertTabAlertHeadingLink;
		
		@FindBy(xpath="//select[@id='id_tblAlerts_Alerts']")
		public static WebElement alertTabRow1AlertDrpdwn;
		
		@FindBy(xpath="//label[text()=' Escalation Level 1']")
		public static WebElement EscalationLevelText;




	//***************** Design Work flow Options Elements ******************//

	@FindBy(xpath="//a[@id='16']")
	public static WebElement settingsMenu; 

	@FindBy(xpath="//a[@id='74']//span[contains(text(),'Design Workflow')]")
	public static WebElement designWorkflowbtn; 

	@FindBy(xpath="//div[@class='navText']//span[contains(text(),'Design Workflow')]")
	public static WebElement designWorkflowLabel; 

	@FindBy(xpath="//i[@class='icon icon-clear icon-font6']")
	public static WebElement clearBtn; 

	@FindBy(xpath="//a[@id='btnCancel']")
	public static WebElement closeBtn;
	
	@FindBy(xpath="//*[@id='btnCancel']/i")
	public static WebElement CloseBtn;

	@FindBy(xpath="//input[@id='optWorkflow']")
	public static WebElement workflowNameTxt; 

	@FindBy(xpath="//*[@id='optWorkflow_input_settings']/span")
	public static WebElement workFlowNameSettingsBtn; 

	@FindBy(xpath="//span[@class='DragLi ui-draggable ui-draggable-handle'][contains(text(),'Purchases Vouchers')]")
	public static WebElement purchasesVouchersDragAndDrop; 

	@FindBy(xpath="//span[@class='DragLi ui-draggable ui-draggable-handle'][contains(text(),'Purchases Orders')]")
	public static WebElement purchasesOrdersDragAndDrop; 

	@FindBy(xpath="//span[@class='DragLi ui-draggable ui-draggable-handle'][contains(text(),'Material Requisition')]")
	public static WebElement materialRequisitionDragAndDrop; 

	@FindBy(xpath="//span[@class='DragLi ui-draggable ui-draggable-handle'][contains(text(),'Purchase Vouchers N')]")
	public static WebElement purchaseVoucherNDragAndDrop; 

	//Body Fields After Drag Then On Flow Chart Link  Layer

	//For the First element which Drags From List TO Screen The Id Property Changes And Remaining Will Be same

	@FindBy(xpath="//div[@class='flowchart-operator-title ui-draggable-handle']")  //As it Is First One Selected Drag On FlowChart Is Same Id Property For Every Element
	public static WebElement FirstDraggedElement; 

	@FindBy(xpath="//*[@id='idNode_4']")
	public static WebElement draggedPurchasesOrders; 

	@FindBy(xpath="//*[@id='idNode_5']")
	public static WebElement draggedMaterialRequisition ; 

	@FindBy(xpath="//*[@id='idNode_0']")       //div[contains(text(),'NDT45')]  //*[@id='idNode_0']
	public static WebElement draggedPurchasesVouchersN;
	
	
	@FindBy(xpath="//div[contains(text(),'NDT45')]")
	public static WebElement draggedPurchasesVouchersN1;

	// Link and Delete of Dragged Options

	@FindBy(xpath="/html[1]/body[1]/ul[1]/li[1]")
	public static WebElement draggedlinkBtn; 

	@FindBy(xpath="/html/body/ul[1]/li[2]/span")
	public static WebElement draggeddeleteBtn; 

	@FindBy(xpath="//*[@id='line0']")
	public static WebElement link0TO1; 

	@FindBy(xpath="//*[@id='line1']")
	public static WebElement link1TO2; 

	@FindBy(xpath="//*[@id='line2']")
	public static WebElement link2TO3; 

	@FindBy(xpath="//*[@id='line3']")
	public static WebElement link3TO4; 
	
	@FindBy(css="#line3 > path")
	public static WebElement line3To4;
	
	@FindBy(xpath="//*[@id='line4']")
	public static WebElement link4TO5; 

	@FindBy(xpath="//*[@id='line5']")
	public static WebElement link5TO6;
	
	public By a1=By.xpath("//*[@id='line5']");

	@FindBy(xpath="//*[@id='line6']")
	public static WebElement link6TO7; 

	@FindBy(xpath="//*[@id='line7']")
	public static WebElement link7TO8; 

	@FindBy(xpath="//*[@id='line8']")
	public static WebElement link8TO9; 


	//Connections  Node to Node Points Fields

	@FindBy(xpath="//*[@id='idNode_0']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode0Left; 

	@FindBy(xpath="//*[@id='idNode_1']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode1Left; 

	@FindBy(xpath="//*[@id='idNode_2']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode2Left;

	@FindBy(xpath="//*[@id='idNode_3']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode3Left; 

	@FindBy(xpath="//*[@id='idNode_4']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode4Left; 

	@FindBy(xpath="//*[@id='idNode_5']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode5Left;

	@FindBy(xpath="//*[@id='idNode_6']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode6Left; 

	@FindBy(xpath="//*[@id='idNode_7']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode7Left; 

	@FindBy(xpath="//*[@id='idNode_8']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode8Left;


	@FindBy(xpath="//*[@id='idNode_0']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode0Right; 

	@FindBy(xpath="//*[@id='idNode_1']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode1Right; 

	@FindBy(xpath="//*[@id='idNode_2']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode2Right; 

	@FindBy(xpath="//*[@id='idNode_3']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode3Right; 

	@FindBy(xpath="//*[@id='idNode_4']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode4Right; 

	@FindBy(xpath="//*[@id='idNode_5']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode5Right; 

	@FindBy(xpath="//*[@id='idNode_6']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode6Right; 

	@FindBy(xpath="//*[@id='idNode_7']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode7Right; 

	@FindBy(xpath="//*[@id='idNode_8']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode8Right; 



	@FindBy(xpath="//div[@id='settingIcon']//span[@class='iconbar']")
	public static WebElement rightSideExpandBtn; 

	@FindBy(xpath="//a[contains(text(),'Definition')]")
	public static WebElement DefinitionTab; 

	@FindBy(xpath="//select[@id='DDLLinkValue']")
	public static WebElement DefinitionLinkValueDropdown; 

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[1]//li[1]//input[1]")
	public static WebElement dateChkBox; 

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[2]//li[1]//input[1]")
	public static WebElement customerAccountChkbox; 

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[4]//li[1]//input[1]")
	public static WebElement salesOrderandInvoicewareHouseChkbox; 

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[3]//li[1]//input[1]")
	public static WebElement autosalesOrderandInvoicewareHouseChkbox; 

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[3]//li[1]//input[1]")
	public static WebElement narrationChkbox; 

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[4]//li[1]//input[1]")
	public static WebElement salesOrderandInvoicenarrationChkbox;

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[4]//li[1]//input[1]")
	public static WebElement itemchkbox; 

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[3]//li[1]//input[1]")
	public static WebElement materialRequiitionAndPquotationsitemchkbox; 

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[5]//li[1]//input[1]")
	public static WebElement salesOrderandInvoiceitemchkbox;

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[4]//li[1]//input[1]")
	public static WebElement purchaseOrderandPvoucheritemchkbox;

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[5]//li[1]//input[1]")
	public static WebElement purchaseOrderandPvoucherUnitchkbox;

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[10]//li[1]//input[1]")
	public static WebElement purchaseVoucherAndPReturnsitemchkbox;

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[11]//li[1]//input[1]")
	public static WebElement purchaseVoucherNAndMRNitemchkbox;

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[4]//li[1]//input[1]")
	public static WebElement mrnAndPurchaseReturnsitemchkbox;

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[10]//li[1]//input[1]")
	public static WebElement salesInvoicenAndDeliveryNotesitemchkbox;

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[11]//li[1]//input[1]")
	public static WebElement salesInvoiceAndSalesRetutrnsitemchkbox;

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[6]//li[1]//input[1]")
	public static WebElement stockTransferAndSalesInvoiceNitemchkbox;

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[5]//li[1]//input[1]")
	public static WebElement unitsChkbox; 

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[6]//li[1]//input[1]")
	public static WebElement salesOrderandInvoiceunitsChkbox;

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[6]//li[1]//input[1]")
	public static WebElement quantityChkbox; 

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[7]//li[1]//input[1]")
	public static WebElement salesOrderandInvoicequantityChkbox; 

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[7]//li[1]//input[1]")
	public static WebElement voucherQtyhkbox; 

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[8]//li[1]//input[1]")
	public static WebElement salesOrderandInvoicevoucherQtyhkbox;

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[8]//li[1]//input[1]")
	public static WebElement reserveChkbox; 

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[9]//li[1]//input[1]")
	public static WebElement salesOrderandInvoicereserveChkbox;

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[9]//li[1]//input[1]")
	public static WebElement rateChkbox; 

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[10]//li[1]//input[1]")
	public static WebElement salesOrderandInvoicerateChkbox; 

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[10]//li[1]//input[1]")
	public static WebElement grossChkbox; 

	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[11]//li[1]//input[1]")
	public static WebElement salesOrderandInvoicegrossChkbox; 

	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[1]//li[1]//input[1]")
	public static WebElement voucherGrossChkbox; 

	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[2]//li[1]//input[1]")
	public static WebElement netChkbox; 

	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[3]//li[1]//input[1]")
	public static WebElement voucherNetChkbox; 

	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[4]//li[1]//input[1]")
	public static WebElement userChkbox; 

	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[5]//li[1]//input[1]")
	public static WebElement roleChkbox; 

	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[6]//li[1]//input[1]")
	public static WebElement user1Chkbox; 

	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[7]//li[1]//input[1]")
	public static WebElement user2Chkbox; 

	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[8]//li[1]//input[1]")
	public static WebElement user3Chkbox; 

	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[9]//li[1]//input[1]")
	public static WebElement user4Chkbox; 

	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[10]//li[1]//input[1]")
	public static WebElement user5Chkbox; 


	//Link Setting -----Setting Tab

	@FindBy(xpath="//a[contains(text(),'Setting')]")
	public static WebElement settingTab; 

	@FindBy(xpath="//input[@id='chkRaiseLinkDoc']")
	public static WebElement raiseLinkDocumentWhenbaseIsSavedChkboxIsSelected; 
	
	@FindBy(xpath="//input[@id='chkRaiseLinkDoc']/following-sibling::span")
	public static WebElement raiseLinkDocumentWhenbaseIsSavedChkbox; 
	
	

	@FindBy(xpath="//input[@id='idNegative']")
	public static WebElement tolerance1Txt; 

	@FindBy(xpath="//input[@id='idPossitive']")
	public static WebElement tolerance2Txt; 

	@FindBy(xpath="//select[@id='ddlTolearenceType']")
	public static WebElement tolearenceTypeDropdown; 

	@FindBy(xpath="//select[@id='ddlReleaseto']")
	public static WebElement relatesToDropdown; 

	@FindBy(xpath="//input[@id='AutoCloseTxt']")
	public static WebElement autoCloseTxt; 

	@FindBy(xpath="//select[@id='ddlActions']")
	public static WebElement settinglinkValueDropdown; 

	@FindBy(xpath="//select[@id='ddlLoadpendingDoc']")
	public static WebElement loadpendingDocumentsDropdown; 

	@FindBy(xpath="//select[@id='ddlBasedOnfiled']")
	public static WebElement loadFieldsDropdown; 



	//Link Settings-----Properties

	@FindBy(xpath="//a[contains(text(),'Properties')]")
	public static WebElement propertiesTab; 

	@FindBy(xpath="//input[@id='chkUseItemWisetolerance']")
	public static WebElement useItemWiseToleranceWhenAvailableChkBoxIsSelected;
	
	@FindBy(xpath="//input[@id='chkUseItemWisetolerance']/following-sibling::span")
	public static WebElement useItemWiseToleranceWhenAvailableChkBox;

	@FindBy(xpath="//input[@id='chkConsolidateondocument']")
	public static WebElement checkConsolidateDocWhenDisplayingInSelectionChkBoxIsSelected;
	
	@FindBy(xpath="//input[@id='chkConsolidateondocument']/following-sibling::span")
	public static WebElement checkConsolidateDocWhenDisplayingInSelectionChkBox;

	@FindBy(xpath="//input[@id='ChkStockLink']")
	public static WebElement checkstockWhileLinkingChkboxIsSelected; 
	
	@FindBy(xpath="//input[@id='ChkStockLink']/following-sibling::span")
	public static WebElement checkstockWhileLinkingChkbox; 

	@FindBy(xpath="//input[@id='chkCannotExceedBase']")
	public static WebElement cannotExceedTheBaseValueChkboxIsSelected;
	
	@FindBy(xpath="//input[@id='chkCannotExceedBase']/following-sibling::span")
	public static WebElement cannotExceedTheBaseValueChkbox;

	@FindBy(xpath="//input[@id='chkBaseDocCannotEdited']")
	public static WebElement baseDocumentCannotBeEditedAfterItIsLinkedChkboxIsSelected; 
	
	@FindBy(xpath="//input[@id='chkBaseDocCannotEdited']/following-sibling::span")
	public static WebElement baseDocumentCannotBeEditedAfterItIsLinkedChkbox; 

	@FindBy(xpath="//input[@id='chkUseLinkForLoading']")
	public static WebElement useThisLinkOnlyForLoadingChkboxIsSelected;
	
	@FindBy(xpath="//input[@id='chkUseLinkForLoading']/following-sibling::span")
	public static WebElement useThisLinkOnlyForLoadingChkbox;

	@FindBy(xpath="//input[@id='chkLoadBaseDocDtlsAtLinking']")
	public static WebElement loadTheBaseDocumentDetailsAtTheTimeOfLinkingChkboxIsSelected;
	
	@FindBy(xpath="//input[@id='chkLoadBaseDocDtlsAtLinking']/following-sibling::span")
	public static WebElement loadTheBaseDocumentDetailsAtTheTimeOfLinkingChkbox;
	
	@FindBy(xpath="//input[@id='chkCloseLinkAfterDueDt']")
	public static WebElement closeLinkAfterTheDueDateElapsesChkboxIsSelected; 
	
	@FindBy(xpath="//input[@id='chkCloseLinkAfterDueDt']/following-sibling::span")
	public static WebElement closeLinkAfterTheDueDateElapsesChkbox; 

	@FindBy(xpath="//input[@id='chkLinkIsMandatory']")
	public static WebElement linkIsMandatoryChkboxIsSelected;
	
	@FindBy(xpath="//input[@id='chkLinkIsMandatory']/following-sibling::span")
	public static WebElement linkIsMandatoryChkbox;

	@FindBy(xpath="//input[@id='chkLinkIsOptional']/following-sibling::span")
	public static WebElement linkIsOptionalIfTheDocumentIsLinkedToAnotherbasedocumentChkbox; 
	
	@FindBy(xpath="//input[@id='chkLinkIsOptional']")
	public static WebElement linkIsOptionalIfTheDocumentIsLinkedToAnotherbasedocumentChkboxIsSelected; 

	@FindBy(xpath="//input[@id='chkDoNotClubCommonBase']")
	public static WebElement doNotClubWithCommonBaseChkboxIsSelected;
	
	@FindBy(xpath="//input[@id='chkDoNotClubCommonBase']/following-sibling::span")
	public static WebElement doNotClubWithCommonBaseChkbox;

	@FindBy(xpath="//input[@id='chkDoNotAllowSelection']")
	public static WebElement doNotAllowSelectionIfLinksFieldsAreNotSelectedChkboxIsSelected; 
	
	@FindBy(xpath="//input[@id='chkDoNotAllowSelection']/following-sibling::span")
	public static WebElement doNotAllowSelectionIfLinksFieldsAreNotSelectedChkbox; 

	@FindBy(xpath="//input[@id='chkRecheckBeforeTheSavingIflink']")
	public static WebElement recheckBeforeTheSavingIfLinkIsConsumeEelsewhereOnTheNetworkChkboxIsSelected; 
	
	@FindBy(xpath="//input[@id='chkRecheckBeforeTheSavingIflink']/following-sibling::span")
	public static WebElement recheckBeforeTheSavingIfLinkIsConsumeEelsewhereOnTheNetworkChkbox; 

	@FindBy(xpath="//input[@id='chkAllowbackdatedlinking']")
	public static WebElement allowBackdatedLinkingChkboxIsSelected;
	
	@FindBy(xpath="//input[@id='chkAllowbackdatedlinking']/following-sibling::span")
	public static WebElement allowBackdatedLinkingChkbox;

	@FindBy(xpath="//input[@id='chkDonotupdatelinkunlessQCisdone']")
	public static WebElement doNotUpdateLinkUnlessQCIsDoneChkbox;


	//Footer Fields oF Link Settings

	@FindBy(xpath="//a[contains(text(),'Mapping')]")
	public static WebElement MapTab; 

	//Map POp  Grid items to be write.

	@FindBy(xpath="//h5[contains(text(),'Link Mapping')]")
	public static WebElement linkMappingLabel; 

	@FindBy(xpath="//button[contains(text(),'Close')]")
	public static WebElement linkMappingCloseBtn; 

	@FindBy(xpath="//*[@id='WorkflowSettingDialog']/div[2]/div/div[3]/div/input[1]")
	public static WebElement OkBtn; 

	@FindBy(xpath="//*[@id='WorkflowSettingDialog']/div[2]/div/div[3]/div/input[2]")
	public static WebElement CancelBtn; 


	@FindBy(xpath="//label[@id='lblitem']")
	public static WebElement batchItemName;

	@FindBy(xpath="//label[@id='lblTotalQty']")
	public static WebElement batchTotalQtyAmt;

	@FindBy(xpath="//label[@id='lblAdjustQty']")
	public static WebElement batchAdjustQtyAmt;


	@FindBy(xpath="//label[@id='lblBalnceQty']")
	public static WebElement batchBalanceAmt;

	@FindBy(xpath="//div[contains(@class,'col-xs-12 col-sm-12 col-md-12 col-lg-12 P_ingBottom')]//div[2]//input[1]")
	public static WebElement batchExipiringInRadioBtn;

	@FindBy(xpath="//section[@id='page_Content']//div[@class='row']//div//div[3]//input[1]")
	public static WebElement batchExipiringAfetrRadioBtn;

	@FindBy(xpath="//input[@id='txtWithin']")
	public static WebElement batchWithInTxt;

	@FindBy(xpath="//*[@id='Id_MRPBatch_Grid_control_heading_6']")
	public static WebElement batchTableHeaderRateColumn;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-1']")
	public static WebElement batchTable1stRow1stCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-2']")
	public static WebElement batchTable1stRow2ndCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-5']")
	public static WebElement batchTable1stRow3rdCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-6']")
	public static WebElement batchTable1stRow4thCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-8']")
	public static WebElement batchTable1stRow5thCol;

	@FindBy(xpath="//input[@id='MRPBatch_AdjBatchQty']")
	public static WebElement enter_BatchTableQtyAdjusted;


	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-13']")
	public static WebElement batchTable1stRow6thCol;


	@FindBy(xpath="//*[@id='Id_MRPBatch_Grid_col_2-1']")
	public static WebElement batchTable2ndRow1stCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-2']")
	public static WebElement batchTable2ndRow2ndCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-5']")
	public static WebElement batchTable2ndRow3rdCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-6']")
	public static WebElement batchTable2ndRow4thCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-7']")
	public static WebElement batchTable2ndRow5thCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-13']")
	public static WebElement batchTable2ndRow6thCol;


	@FindBy(xpath="//*[@id='Id_MRPBatch_Grid_col_3-1']")
	public static WebElement batchTable3rdRow1stCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-2']")
	public static WebElement batchTable3rdRow2ndCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-5']")
	public static WebElement batchTable3rdRow3rdCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-6']")
	public static WebElement batchTable3rdRow4thCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-7']")
	public static WebElement batchTable3rdRow5thCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-13']")
	public static WebElement batchTable3rdRow6thCol;

	@FindBy(xpath="//*[@id='Id_MRPBatch_Grid_col_4-1']")
	public static WebElement batchTable4thRow1stCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-2']")
	public static WebElement batchTable4thRow2ndCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-5']")
	public static WebElement batchTable4thRow3rdCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-6']")
	public static WebElement batchTable4thRow4thCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-7']")
	public static WebElement batchTable4thRow5thCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-13']")
	public static WebElement batchTable4thRow6thCol;

	@FindBy(xpath="//*[@id='MRPBatch_AdjBatchQty']")
	public static WebElement batchTableEnterQtyAdjusted;


	/*@FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']/tr")
	public static  List<WebElement> batchPopupTable;*/

	@FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']")
	public static WebElement batchPopupTable;

	@FindBy(xpath="//i[@class='icon-refresh icon-font7']")
	public static WebElement batchRefreshBtn;

	@FindBy(xpath="//input[@id='Batch_Search']")
	public static WebElement batchSearchTxt;

	@FindBy(xpath="//input[@class='Fcheckbox']")
	public static WebElement batchShowAllAvalibleBatches;

	@FindBy(xpath="//label[contains(text(),'Customization')]")
	public static WebElement batchCustomizationIcon;

	/*@FindBy(xpath="//label[contains(text(),'Pick On FIFO')]")
	public static WebElement batchPickOnFIFOIcon;*/

	@FindBy(xpath="//div[@class='btnhighlight theme_button_color P_LeftRight10'][2]")
	public static WebElement batchPickOnFIFOIcon;

	@FindBy(xpath="//button[@id='div_Ok1']")
	public static WebElement batchOkIcon;

	@FindBy(xpath="//div[@class='col-xs-12 col-sm-12 col-md-12 col-lg-12']//div[6]//label[1]")
	public static WebElement batchTotalAdjustedQty;

	@FindBy(xpath="(//button[@id='div_PICKFIFO'])[2]")
	public static WebElement batchCancelIcon;

	@FindBy(xpath="//*[@id='MBatch_Content']/div[1]/div[2]/span/i")
	public static WebElement batchCloseIcon;

	@FindBy(xpath="//*[@id='MBatch_Content']/div[2]/div/div[5]/div/div[3]")
	public static WebElement batchTotalQuantity;


	@FindBy (xpath="//*[@id='navbarSupportedContent2']/ul/li[1]/a/i")
	public static WebElement backupBtn;


	@FindBy(xpath="//input[@id='id_header_268435460']")
	public static WebElement  warehouseTxt;

	@FindBy (xpath="//a[@id='2074']/span")
	public static WebElement shortagesInStockNewVoucher;

	@FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']/tr/td[2]")
	public static  List<WebElement> batchPopupBatchNoList;

	@FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']/tr/td[1]")
	public static  List<WebElement> batchPopupRowNosList;	



	@FindBy(xpath="//*[@id='copydoc_tblBodyTransRender']/tr/td[3]")
	public static  List<WebElement> cdVoucherNameList;

	@FindBy(xpath="//*[@id='copydoc_tblBodyTransRender']/tr/td[1]/input")
	public static  List<WebElement> cdChkBoxList;


	@FindBy(xpath="//input[@id='optCopyDocType']")
	public static WebElement cd_vouchertypeTxt;

	@FindBy(xpath="//select[@id='id_searchoncolumns']")
	public static WebElement cd_searchOnDropdown1;

	@FindBy(xpath="//div[@id='id_transaction_entry_container_others']//div[5]//select[1]")
	public static WebElement cd_searchOnDropdown2;

	@FindBy(xpath="//input[@id='srch_doc']")
	public static WebElement cd_searchTxt;

	@FindBy(xpath="//input[@id='id_transaction_entry_copydocument_refresh']")
	public static WebElement cd_refreshBtn;

	@FindBy(xpath="//input[@id='id_transaction_entry_copydocument_filter_togglebutton']")
	public static WebElement cd_filterBtn;

	@FindBy(xpath="//input[@id='copydoc_HeaderChkBox']")
	public static WebElement cd_HeaderChkBox;

	@FindBy(xpath="//tr[@id='tr_copydoc_voucher_1']//td//input")
	public static WebElement cd_FirstChkBox;

	@FindBy(xpath="//input[@id='id_chkclubsimilartxn']")
	public static WebElement cd_clubsimilarTransChkBox;

	@FindBy(xpath="//*[@id='id_copydoc_grid1_buttonsrow']/div[3]/input")
	public static WebElement cd_SelectallBtn;

	@FindBy(xpath="//button[@id='btn_firstPage']")
	public static WebElement cd_firstBtn;

	@FindBy(xpath="//button[@id='btn_previousPage']")
	public static WebElement cd_PreviousBtn;

	@FindBy(xpath="//button[@id='input_pagenumber']")
	public static WebElement cd_PageNo;

	@FindBy(xpath="//button[@id='btn_nextPage']")
	public static WebElement cd_nextBtn; 

	@FindBy(xpath="//button[@id='btn_lastPage']")
	public static WebElement cd_LastBtn;

	@FindBy(xpath="//input[@id='id_transaction_copydoc_ok']")
	public static WebElement cd_OkBtn;

	@FindBy(xpath="//input[@id='id_transaction_copydoc_cancel']")
	public static WebElement cd_CancelBtn;

	@FindBy(xpath="//*[@id='navigation_menu']/li[3]/ul/li[2]/ul/li[4]/ul/li/a/span")
	public static List<WebElement> stocksVouchersList;
	
	@FindBy (xpath="//*[@id='2075']/span")
	public static WebElement excessInStocksNewVoucher;
	
	@FindBy(xpath="//*[@id='panelsStayOpen-headingOne']/button")
	public static WebElement homePannelOpenBtn;
	
	

	@FindBy (xpath="//*[@id='id_transaction_viewcontainer']/li[3]/a")
	public static WebElement pendingShortageInStocksLink;


	@FindBy(xpath="//*[@id='WorkflowCheckboxDiv']/div/div/label")
	public static  List<WebElement> definitionTabChkBoxNameList;

	@FindBy(xpath="//*[@id='WorkflowCheckboxDiv']/div/div/label/input")
	public static  List<WebElement> definitionTabChkBoxListIsSelected;
	
	@FindBy(xpath="//*[@id='WorkflowCheckboxDiv']/div/div/label/input/following-sibling::span")
	public static  List<WebElement> definitionTabChkBoxList;


	@FindBy(xpath="//tbody[@id='mapWorkflow_GrdId_body']/tr/td[2]")
	public static  List<WebElement> baseFieldList;

	@FindBy(xpath="//select[@id='mapWorkflow_GrdId_control_heading_ctrl_1']")
	public static WebElement baseFieldDropDown;

	@FindBy(xpath="//select[@id='mapWorkflow_GrdId_control_heading_ctrl_2']")
	public static WebElement linkFieldDropDown;

	@FindBy(xpath="//*[@id='mapWorkflow_GrdId_body']/tr[1]/td[2]")
	public static WebElement baseFieldRow1;

	@FindBy(xpath="//*[@id='mapWorkflow_GrdId_body']/tr[2]/td[2]")
	public static WebElement baseFieldRow2;


	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[20]")
	public static WebElement  select1stRow_19thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[21]")
	public static WebElement  select1stRow_20thColumn;

	@FindBy(xpath="//*[@id='tblBodyTransRender']/tr")
	public static  List<WebElement>  voucherBodyGridRowCount;

	@FindBy(xpath="//tbody[@id='tblBodyTransRender']")
	public static WebElement  voucherBodyGrid;


	//WorkFlow Elements

	@FindBy(xpath="//select[@id='id_transactionentry_workflow_popup_searchon']")
	public static WebElement  searchOnDropdown;

	@FindBy(xpath="//select[@id='id_transactionentry_workflow_popup_searchtype']")
	public static WebElement  containingDropdown;

	@FindBy(xpath="//input[@id='id_transactionentry_workflow_popup_search']")
	public static WebElement  workFlowSearchTxt;

	@FindBy(xpath="//i[@id='id_transactionentry_workflow_popup_close']")
	public static WebElement  workFlowCloseBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_workflow_popup']/div[2]/div/div[1]/span/i")
	public static WebElement workFlowCtrlPlusLCloseBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_close']/a")
	public static WebElement voucherEntryPageCloseBtn;
	
	@FindBy(xpath="(//i[@class='icon-close hiconright2'])[1]")
	public static WebElement voucherHomePageCloseBtn;

	@FindBy(xpath="//ul[@class='nav navbar-nav navbar-right']//div[@class='toolbar_button_text font-7'][contains(text(),'Customize')]")
	public static WebElement  workFlowCustomizeBtn;

	@FindBy(xpath="(//input[@class='FButton-Primary FPopupChildren mx-1'])[3]")
	public static WebElement  workFlowOkBtn;

	@FindBy(xpath="//div[@class='toolbar_button_text font-7'][contains(text(),'Ok')]")
	public static WebElement  workFlowOkBtnInSalesVoucher;

	@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
	public static WebElement  workFlowMinimizeBtn;
	
	
	
	@FindBy(xpath="//*[@id='id_transactionentry_workflow_popup']/div[2]/div")
	public static WebElement workFlowPopupCtrlPlusL;



	//WorkFlow Screen with Line wise

	@FindBy(xpath="//input[@id='id_transaction_entry_detail_workflow_popup_control_heading_ctrl_1']")
	public static WebElement  workFlowHeaderChkBox;

	@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_popup_control_heading_6']//div[contains(text(),'Voucher No')]")
	public static WebElement  workFlowHeaderVoucherNo;

	@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_popup_control_heading_7']//div[contains(text(),'Date')]")
	public static WebElement  workFlowHeaderDate;

	@FindBy(xpath="//div[contains(text(),'Name')]")
	public static WebElement  workFlowHeaderName;

	@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_popup_control_heading_9']//div[contains(text(),'Quantity')]")
	public static WebElement  workFlowHeaderQty;

	@FindBy(xpath="//div[contains(text(),'Suspended')]")
	public static WebElement  workFlowHeaderSuspend;


	//WorkFlow with Line wise
	// 1 Row

	@FindBy(xpath="//tbody[@id='id_transaction_entry_detail_workflow_popup_body']/tr/td[2]/input")
	public static WebElement workFlowRadioBtnRowOne;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-6']")
	public static WebElement  workFlowRow1Column1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-7']")
	public static WebElement  workFlowRow1Column2;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-8']")
	public static WebElement  workFlowRow1Column3;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-9']")
	public static WebElement  workFlowRow1Column4;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-10']")
	public static WebElement  workFlowRow1Column5;

	// 2 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-1']//input")
	public static WebElement workFlowRadioBtnRowTwo;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-6']")
	public static WebElement  workFlowRow2Column1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-7']")
	public static WebElement  workFlowRow2Column2;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-8']")
	public static WebElement  workFlowRow2Column3;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-9']")
	public static WebElement  workFlowRow2Column4;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-10']")
	public static WebElement  workFlowRow2Column5;




	// 3 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-1']//input")
	public static WebElement workFlowRadioBtnRowThree;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-6']")
	public static WebElement  workFlowRow3Column1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-7']")
	public static WebElement  workFlowRow3Column2;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-8']")
	public static WebElement  workFlowRow3Column3;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-9']")
	public static WebElement  workFlowRow3Column4;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-10']")
	public static WebElement  workFlowRow3Column5;


	// 4 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-1']//input")
	public static WebElement workFlowRadioBtnRowFour;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-6']")
	public static WebElement  workFlowRow4Column1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-7']")
	public static WebElement  workFlowRow4Column2;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-8']")
	public static WebElement  workFlowRow4Column3;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-9']")
	public static WebElement  workFlowRow4Column4;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-10']")
	public static WebElement  workFlowRow4Column5;	



	// 5 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-1']//input")
	public static WebElement workFlowRadioBtnRowFive;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-6']")
	public static WebElement  workFlowRow5Column1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-7']")
	public static WebElement  workFlowRow5Column2;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-8']")
	public static WebElement  workFlowRow5Column3;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-9']")
	public static WebElement  workFlowRow5Column4;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-10']")
	public static WebElement  workFlowRow5Column5;	



	// 6 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-1']//input")
	public static WebElement workFlowRadioBtnRowSix;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-6']")
	public static WebElement  workFlowRow6Column1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-7']")
	public static WebElement  workFlowRow6Column2;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-8']")
	public static WebElement  workFlowRow6Column3;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-9']")
	public static WebElement  workFlowRow6Column4;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-10']")
	public static WebElement  workFlowRow6Column5;	


	// 7 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-1']//input")
	public static WebElement workFlowRadioBtnRowSeven;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-6']")
	public static WebElement  workFlowRow7Column1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-7']")
	public static WebElement  workFlowRow7Column2;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-8']")
	public static WebElement  workFlowRow7Column3;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-9']")
	public static WebElement  workFlowRow7Column4;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-10']")
	public static WebElement  workFlowRow7Column5;	



	// 8 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-1']//input")
	public static WebElement workFlowRadioBtnRowEight;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-6']")
	public static WebElement  workFlowRow8Column1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-7']")
	public static WebElement  workFlowRow8Column2;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-8']")
	public static WebElement  workFlowRow8Column3;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-9']")
	public static WebElement  workFlowRow8Column4;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-10']")
	public static WebElement  workFlowRow8Column5;	



	// 9 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-1']//input")
	public static WebElement workFlowRadioBtnRowNine;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-6']")
	public static WebElement  workFlowRow9Column1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-7']")
	public static WebElement  workFlowRow9Column2;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-8']")
	public static WebElement  workFlowRow9Column3;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-9']")
	public static WebElement  workFlowRow9Column4;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-10']")
	public static WebElement  workFlowRow9Column5;	



	// 10 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-1']//input")
	public static WebElement workFlowRadioBtnRowTen;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-6']")
	public static WebElement  workFlowRow10Column1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-7']")
	public static WebElement  workFlowRow10Column2;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-8']")
	public static WebElement  workFlowRow10Column3;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-9']")
	public static WebElement  workFlowRow10Column4;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-10']")
	public static WebElement  workFlowRow10Column5;	



	// 11 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-1']//input")
	public static WebElement workFlowRadioBtnRowElevan;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-6']")
	public static WebElement  workFlowRow11Column1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-7']")
	public static WebElement  workFlowRow11Column2;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-8']")
	public static WebElement  workFlowRow11Column3;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-9']")
	public static WebElement  workFlowRow11Column4;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-10']")
	public static WebElement  workFlowRow11Column5;	



	// 12 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-1']//input")
	public static WebElement workFlowRadioBtnRowTwevle;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-6']")
	public static WebElement  workFlowRow12Column1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-7']")
	public static WebElement  workFlowRow12Column2;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-8']")
	public static WebElement  workFlowRow12Column3;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-9']")
	public static WebElement  workFlowRow12Column4;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-10']")
	public static WebElement  workFlowRow12Column5;	


	// 13 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-1']//input")
	public static WebElement workFlowRadioBtnRowThirteen;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_13-6']")
	public static WebElement  workFlowRow13Column1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_13-7']")
	public static WebElement  workFlowRow13Column2;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_13-8']")
	public static WebElement  workFlowRow13Column3;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_13-9']")
	public static WebElement  workFlowRow13Column4;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-10']")
	public static WebElement  workFlowRow13Column5;	



	// 14 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-1']//input")
	public static WebElement workFlowRadioBtnRowFourteen;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-6']")
	public static WebElement  workFlowRow14Column1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-7']")
	public static WebElement  workFlowRow14Column2;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-8']")
	public static WebElement  workFlowRow14Column3;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-9']")
	public static WebElement  workFlowRow14Column4;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-10']")
	public static WebElement  workFlowRow14Column5;	



	// 15 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-1']//input")
	public static WebElement workFlowRadioBtnRowFifteen;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-6']")
	public static WebElement  workFlowRow15Column1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-7']")
	public static WebElement  workFlowRow15Column2;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-8']")
	public static WebElement  workFlowRow15Column3;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-9']")
	public static WebElement  workFlowRow15Column4;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-10']")
	public static WebElement  workFlowRow15Column5;	





	// 16 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-1']//input")
	public static WebElement workFlowRadioBtnRowSixteen;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-6']")
	public static WebElement  workFlowRow16Column1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-7']")
	public static WebElement  workFlowRow16Column2;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-8']")
	public static WebElement  workFlowRow16Column3;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-9']")
	public static WebElement  workFlowRow16Column4;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-10']")
	public static WebElement  workFlowRow16Column5;	


	@FindBy(xpath="//input[@id='id_header_67108924']")
	public static WebElement  purchaseVoucherNewNarration;

	@FindBy(xpath="//input[@id='id_header_67108931']")
	public static WebElement  purchaseVoucherNewTest;

	@FindBy(xpath="//input[@id='id_header_10']")
	public static WebElement  voucherHeaderCurrency;

	@FindBy(xpath="//input[@id='id_header_145']")
	public static WebElement  voucherHeaderLocalExchangeRate;	

	@FindBy(xpath="//input[@id='id_header_11']")
	public static WebElement  voucherHeaderExchangeRate;



	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_26']")
	public static WebElement  QtyAmount;

	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_28']")
	public static WebElement  GrossAmount;

	@FindBy(xpath="//*[@id='id_transactionentry_summary_btn_expand']")
	public static WebElement  new_footerExpandBtn;

	@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[2]//div[2]")
	public static WebElement PVNFooterAvgRateO;


	@FindBy(xpath="//*[@id='id_transaction_entry_heading2']")
	public static WebElement  purchaseVoucherWorlFlowText;
	
	@FindBy(xpath="//*[@id='id_transactionentry_workflow_popup']/div[2]/div/div[1]")
	public static WebElement  purchaseVoucherWorlFlowText1;
	
	


	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[1]/td[7]")
	public static WebElement  workFlowRow1Column1CL;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[1]/td[8]")
	public static WebElement  workFlowRow1Column2CL;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[1]/td[9]")
	public static WebElement  workFlowRow1Column3CL;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[1]/td[10]")
	public static WebElement  workFlowRow1Column4CL;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[1]/td[11]")
	public static WebElement  workFlowRow1Column5CL;


	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[2]/td[7]")
	public static WebElement  workFlowRow2Column1CL;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[2]/td[8]")
	public static WebElement  workFlowRow2Column2CL;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[2]/td[9]")
	public static WebElement  workFlowRow2Column3CL;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[2]/td[10]")
	public static WebElement  workFlowRow2Column4CL;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[2]/td[11]")
	public static WebElement  workFlowRow2Column5CL;


	//3 Row CRTL + L

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[3]/td[2]/input")
	public static WebElement workFlowRow3ChkBoxCL;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[3]/td[7]")
	public static WebElement  workFlowRow3Column1CL;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[3]/td[8]")
	public static WebElement  workFlowRow3Column2CL;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[3]/td[9]")
	public static WebElement  workFlowRow3Column3CL;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[3]/td[10]")
	public static WebElement  workFlowRow3Column4CL;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr[3]/td[11]")
	public static WebElement  workFlowRow3Column5CL;

	@FindBy(xpath="//tbody[@id='id_transaction_entry_detail_workflow_popup_body']")
	public static WebElement workFlowTableBody;

	@FindBy(xpath="//tbody[@id='id_transaction_entry_detail_workflow_popup_body']/tr")
	public static  List<WebElement>  LinkRowCount;


	@FindBy(xpath="//input[@id='id_body_33554460']")
	public static WebElement so_enter_AQTxt;

	@FindBy(xpath="//input[@id='id_body_33554461']")
	public static WebElement so_enter_FQTxt;

	/*@FindBy(xpath="//tbody[@id='id_header_3_table_data_body']/tr")
	public static  List<WebElement> salesAccountListCount; 

	@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
	public static  List<WebElement> customerAccountListCount; */

	@FindBy(xpath="//a[@id='2014']//span[contains(text(),'Sales')]")
	public static WebElement  financialTransactionSalesMenu;

	@FindBy(xpath="//*[@id='idNode_5']")
	public static WebElement draggedSalesInvoicesVAT; 

	/*@FindBy(xpath="//tbody[@id='id_header_268435460_table_body']/tr/td[2]")
	public static  List<WebElement> wareHouseListCount;*/

	@FindBy(xpath="//div[@id='idGlobalError']")
	public static WebElement validationConfirmationMessage;

	@FindBy(xpath="//*[@id='id_transaction_homescreen_Delete']/i")
	public static WebElement  voucherHomedeleteBtn;

	@FindBy(xpath="(//i[@class='icon-close hiconright2'])[1]")  
	public static WebElement  voucherhomeCloseBtn;

	@FindBy(xpath="//span[contains(text(),'Purchases Voucher VAT')]")
	public static WebElement  purchaseVouchersVat;
	
	@FindBy(xpath="//label[contains(text(),'Preferences')]")
	public static WebElement  preferencesBtn;

	@FindBy(xpath="//div[@id='docCustomization']")
	public static WebElement  documentCustomization45Btn;

	@FindBy(xpath="//*[@id='updateButton']/i")
	public static WebElement  updateBtn;

	@FindBy(xpath="//a[@id='2560']")
	public static WebElement  purchaseOrdersBtn;

	@FindBy(xpath="//ul[@id='navigationTabs']/li[3]/a")
	public static WebElement editLayoutTab;

	@FindBy(xpath="(//*[@class='icon-load hiconright2'])[2]")
	public static WebElement editLayoutLoadFieldsBtn;  

	@FindBy(xpath="//select[@id='editLayout_voucherDropDown']")
	public static WebElement editLayoutLoadFieldsDropdown;  

	@FindBy(xpath="//*[@id='dvVWCommonDetails']/div[2]/div/div[3]/input[1]")
	public static WebElement editLayoutselectAllBtn; 

	@FindBy(xpath="//*[@id='dvVWCommonDetails']/div[2]/div/div[3]/input[2]")
	public static WebElement editLayoutokBtn;  
	
	@FindBy(xpath="//*[@id='1000']/span")
	public static WebElement  homeMasterMenu;

	@FindBy(xpath="//*[@id='221']/span")
	public static WebElement  homeMasterItemMenu;

	@FindBy(xpath="//*[@id='1105']/span")
	public static WebElement  homeMasterItem_ItemMenu;

	@FindBy(xpath="//*[@id='LandingGridBody']/tr/td[12]")
	public static  List<WebElement> itemList;

	@FindBy(xpath="//*[@id='LandingGridBody']/tr/td[8]/div/label/input")
	public static  List<WebElement> itemListChkBox;

	@FindBy(xpath="//input[@id='PositiveTolerance']")
	public static WebElement itemToleranceTxt;

	@FindBy(xpath="//*[@id='btnProperties']/i")
	public static WebElement itemPropertiesBtn;

	@FindBy(xpath="//*[@id='btnPropOk']")
	public static WebElement ItemPropertiesOkBtn;
	
	
	
	@FindBy(xpath="//*[@id='id_rc_columnheadertable']/thead/tr/th")
	public static  List<WebElement>  custBodyHeaderList;

	@FindBy(xpath="//*[@id='id_Default_spanPlus']")
	public static WebElement  custLeftPannelDefaultExpandBtn;

	@FindBy(xpath="//*[@id='id_prog_spanPlus']")
	public static WebElement  custLeftPannelProgExpandBtn;

	@FindBy(xpath="//*[@id='id_Trans_spanPlus']")
	public static WebElement  custLeftPannelTransExpandBtn;

	@FindBy(xpath="//span[contains(text(),'Extra Fields')]")
	public static WebElement  custTransExtraFieldExpandBtn;
	
	 @FindBy(xpath="//*[@id='rd_customization_tree5098']/span/span/i") 
	 public static WebElement  warehouse1ExpandBtn; 
	 
	 @FindBy(xpath="//li[@id='rd_customization_tree5100']")
	 public static WebElement  warehouseCode1;

	@FindBy(xpath="//*[@id='Save']")
	public static WebElement  custSaveBtn;

	@FindBy(xpath="//*[@id='btnCustomizeClose']")
	public static WebElement  custCancelBtn;

	@FindBy(xpath="//input[@id='layoutName']")
	public static WebElement  custLayoutNameTxt;

	@FindBy(xpath="//input[@id='chkDefault']")
	public static WebElement  custDefaultChkBox;

	@FindBy(xpath="//input[@id='totalWidth']")
	public static WebElement  custTotalWidthTxt;

	@FindBy(xpath="//input[@id='chkLandscape']")
	public static WebElement  custLandscapeChkBox;

	@FindBy(xpath="//span[contains(text(),'Warehouse')]//..//i")
	public static WebElement  warehouseExpandBtn;

	@FindBy(xpath="((//span[contains(text(),'Warehouse')])[2]//following::ul//li[contains(text(),'Name')])[1]")   //*[@id='rd_customization_tree5100']
	public static WebElement  warehouseName;

	@FindBy(xpath="//li[@id='rd_customization_tree4247']")
	public static WebElement  warehouseCode;

	@FindBy(xpath="//input[@id='ColumnHeading']")
	public static WebElement  columnHeadingTxt;

	@FindBy(xpath="//*[@id='id_rc_columnheadertable']/thead/tr/th[5]/div/p")
	public static WebElement  suspendTab;

	@FindBy(xpath="//*[@id='id_rc_columnheadertable']/thead/tr/th[13]")
	public static WebElement  warehouseCodeHeaderTxt;

	@FindBy(xpath="//input[@id='HidethisColumn']//..//span")
	public static WebElement  hideThisColumnChkbox;
	
	@FindBy(xpath="//input[@id='HidethisColumn']")
	public static WebElement  hideThisColumnChkboxisSelected;	

	

	@FindBy(xpath="//*[@id='id_rc_columnheadertable']/thead/tr/th")
	public static  List<WebElement>  cusHeaderList;	

	@FindBy(xpath="//*[@id='id_rc_columnheadertable']//tr//div/p")
	public static  List<WebElement>  workFlowHeaderList;	
	
	
	@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[1]/a")
	public static WebElement allVouchersInHomePage;

	@FindBy(xpath="//*[@id='plnCustomizecolumn']/div/span[4]/a")
	public static WebElement  custRemoveBtn;

	@FindBy(xpath="//div[@id='RearrangeFormula']")
	public static WebElement  custRearrangeFormulaBtn;
	
	@FindBy(xpath="//div[@id='Cus717']")
	public static WebElement warehouseHeading;

	@FindBy(xpath="//a[contains(text(),'Remove Column')]")
	public static WebElement  custExtraFieldRemoveBtn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr")
	public static  List<WebElement>  LinkRowCountLineWise;

	@FindBy(xpath="//*[@id='id_rc_columnheadertable']//tr//th//p")
	public static  List<WebElement>  workFlowHeaderListLineWise;	
	
	@FindBy(xpath="//label[contains(text(),'Close Links')]")
	public static WebElement  closeLinksOption;

	@FindBy(xpath="//label[contains(text(),'Partial')]")
	public static WebElement  partialLinksOption;

	@FindBy(xpath="//label[contains(text(),'Open Link')]")
	public static WebElement  openLinksOption;

	@FindBy(xpath="//tbody[@id='id_transaction_entry_detail_workflow_popup_body']/tr/td[2]/input")
	public static  List<WebElement> linkChkBoxList;

	@FindBy(xpath="//tbody[@id='id_transaction_entry_detail_workflow_popup_body']/tr/td[7]")
	public static  List<WebElement> linkVoucherNameList;
	
	@FindBy(xpath="//*[@id='id_transactionentry_authorize']")
	public static WebElement  new_authorizeBtn;

	@FindBy(xpath="//textarea[@id='id_transactionentry_authorization_remark']")
	public static WebElement  remarksOfAuthorizeRemarks;

	@FindBy(xpath="//input[@id='id_transactionentry_authorization_remark_popup_ok']")
	public static WebElement  remarksOfAuthorizeRemarksOkButton;

	@FindBy(xpath="//td[contains(text(),'Authorized')]")
	public static WebElement homePageAuthStatusAuthorizeRowOne;
	
	@FindBy(xpath="//span[contains(text(),'Ageing of Pending Documents by Due Date')]")
	public static WebElement  ageingOfPendingDocumentsByDueDate;

	@FindBy(xpath="//span[contains(text(),'Pending voucher report')]")
	public static WebElement  pendingVoucherReports;

	@FindBy(xpath="//tr[@id='trRender_0']/td")
	public static  List<WebElement> reportRow1;

	@FindBy(xpath="//tr[@id='trRender_1']/td")
	public static  List<WebElement> reportRow2;

	@FindBy(xpath="//tr[@id='trRender_2']/td")
	public static  List<WebElement> reportRow3;

	@FindBy(xpath="//tr[@id='trRender_3']/td")
	public static  List<WebElement> reportRow4;

	@FindBy(xpath="//tr[@id='trRender_4']/td")
	public static  List<WebElement> reportRow5;

	@FindBy(xpath="//tr[@id='trRender_5']/td")
	public static  List<WebElement> reportRow6;

	@FindBy(xpath="//tr[@id='trRender_6']/td")
	public static  List<WebElement> reportRow7;

	@FindBy(xpath="//tr[@id='trRender_7']/td")
	public static  List<WebElement> reportRow8;

	@FindBy(xpath="//tr[@id='trRender_8']/td")
	public static  List<WebElement> reportRow9;

	@FindBy(xpath="//tr[@id='trRender_9']/td")
	public static  List<WebElement> reportRow10;

	@FindBy(xpath="//tr[@id='trRender_10']/td")
	public static  List<WebElement> reportRow11;

	@FindBy(xpath="//tr[@id='trRender_11']/td")
	public static  List<WebElement> reportRow12;

	@FindBy(xpath="//tr[@id='trRender_12']/td")
	public static  List<WebElement> reportRow13;
	
	@FindBy(xpath="//span[@id='2078']")
	public static WebElement mipSearch;

	@FindBy(xpath="//*[@id='id_search_menu']/input")
	public static WebElement serachMenuTextHomePage;	
	
	/*@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
	public static  List<WebElement> vendorAccountListCount; */

	/*@FindBy(xpath="//tbody[@id='id_body_536870916_table_body']/tr/td[2]")
	public static  List<WebElement> pvwareHouseListCount;*/

	/*@FindBy(xpath="//tbody[@id='id_body_23_table_body']/tr/td[2]")
	public static  List<WebElement> itemListCount;*/

	@FindBy(xpath="//*[@id='id_transactionentry_save']")
	public static WebElement  vouchersaveBtn;
	
	@FindBy(xpath="//*[@id='txtNewReference']")
	public static WebElement  billRefNewRefTxt;

	@FindBy(xpath="//input[@id='id_body_33554437']")
	public static WebElement  enter_Discount;

	@FindBy(xpath="//div[@id='ReIndexingError_Modal']/div/div")
	public static WebElement  reindexingPopup;

	@FindBy(xpath="//div[@id='ReIndexingError_Modal']/div/div/div[3]/button")
	public static WebElement  reindexingPopupCancelBtn;

	@FindBy(xpath="//div[@id='ReIndexingError_Modal']/div/div/div[3]/input")
	public static WebElement  reindexingPopupSaveLogBtn;
	
	/*@FindBy(xpath="//tbody[@id='id_header_268435459_table_body']/tr/td[2]")
	public static  List<WebElement> departmentListCount;*/

	/*@FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr/td[2]")
	public static  List<WebElement> purchaseAccountListCount; */

	@FindBy(xpath="//div[@id='Workflow_Mapping_dialog']//tr[1]//td[1]")
	public static WebElement mapFirstRowIndex;

	@FindBy(xpath="//span[@class='icon-delete icon-font8']")
	public static WebElement  mapdeleteRowBtn;
	
	@FindBy(xpath="//ul[@id='navigation_menu']/li[8]/ul/li/a/span")
	public static List<WebElement> SettingsSubMenusList;
	
	@FindBy(xpath="//a[contains(text(),'Preferences')]/i")
	public static WebElement  configureTransactionPreferencesMinus;

	@FindBy(xpath="//*[@id='divPref']/li[2]/a/i")    //*[@id='configureTransactions']/div[2]/div[1]/div/div/ul/li[2]/a/i
	public static WebElement  configureTransactionDocumentCustomiztionMinus;
	

	//**************************************************************************************************************************
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	




}
